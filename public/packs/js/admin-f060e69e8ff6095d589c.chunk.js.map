{"version":3,"sources":["webpack:///./app/javascript/src/apps/admin/Menus.tsx","webpack:///./app/javascript/src/apps/admin/pages/LoginPage/LoginPage.tsx","webpack:///./app/javascript/src/apps/admin/Routes.tsx","webpack:///./app/javascript/src/apps/admin/pages/AnnouncementsPage/AnnouncementsPage.tsx","webpack:///./app/javascript/src/apps/admin/pages/ArticlePage/ArticlePage.tsx","webpack:///./app/javascript/src/apps/admin/components/OrdersComponent/OrdersComponent.tsx","webpack:///./app/javascript/src/apps/admin/pages/ArticlesPage/ArticlesPage.tsx","webpack:///./app/javascript/src/apps/admin/pages/BalancePage/BalancePage.tsx","webpack:///./app/javascript/src/apps/admin/pages/BonusesPage/BonusesPage.tsx","webpack:///./app/javascript/src/apps/admin/pages/BonusesPage/components/BonusFormModalComponent.tsx","webpack:///./app/javascript/src/apps/admin/pages/CommentsPage/CommentsPage.tsx","webpack:///./app/javascript/src/apps/admin/pages/MixinMessagesPage/MixinMessagesPage.tsx","webpack:///./app/javascript/src/apps/admin/pages/MixinNetworkSnapshotsPage/MixinNetworkSnapshotsPage.tsx","webpack:///./app/javascript/src/apps/admin/pages/OverviewPage/OverviewPage.tsx","webpack:///./app/javascript/src/apps/admin/pages/PaymentsPage/PaymentsPage.tsx","webpack:///./app/javascript/src/apps/admin/pages/SwapOrdersPage/SwapOrdersPage.tsx","webpack:///./app/javascript/src/apps/admin/pages/TransfersPage/TransfersPage.tsx","webpack:///./app/javascript/src/apps/admin/pages/UsersPage/UsersPage.tsx","webpack:///./node_modules/prismjs/components lazy ^\\.\\/prism\\-.*$ namespace object","webpack:///./app/javascript/src/apps/admin/App.tsx","webpack:///./app/javascript/packs/admin.js","webpack:///./app/javascript/src/apps/admin sync ^\\.\\/.*$","webpack:///./app/javascript/src/apps/admin/shared/index.ts","webpack:///./app/javascript/src/graphql/documents.tsx","webpack:///./app/javascript/src/shared/apolloClient/apolloClient.tsx","webpack:///./app/javascript/src/shared/components/MarkdownRendererComponent/MarkdownRendererComponent.tsx","webpack:///./app/javascript/src/shared/constants/index.tsx","webpack:///./app/javascript/src/shared/contexts/ActiveMenuContext.tsx","webpack:///./app/javascript/src/shared/contexts/CurrentUserContext.tsx","webpack:///./app/javascript/src/shared/contexts/PrsdiggContext.tsx","webpack:///./app/javascript/src/shared/contexts/UserAgentContext.tsx","webpack:///./app/javascript/src/shared/hideLoader/index.ts","webpack:///./app/javascript/src/shared/mixinUtils/mixinUtils.ts","webpack:///./app/javascript/src/shared/index.ts","webpack:///./app/javascript/src/images/logo.svg","webpack:///./app/javascript/src/apps/admin/shared/contexts/index.ts","webpack:///./app/javascript/src/apps/admin/components/CommentsComponent/CommentsComponent.tsx","webpack:///./app/javascript/src/apps/admin/components/MixinNetworkSnapshotsComponent/MixinNetworkSnapshotComponent.tsx","webpack:///./app/javascript/src/apps/admin/components/TransfersComponent/TransfersComponent.tsx","webpack:///./app/javascript/src/apps/admin/components/WalletBalanceComponent/WalletBalanceComponent.tsx","webpack:///./app/javascript/src/apps/admin/components/LoadingComponent/LoadingComponent.tsx","webpack:///./app/javascript/channels/index.js","webpack:///./app/javascript/channels sync _channel\\.js$","webpack:///./app/javascript/src/shared/components/MarkdownRendererComponent/MarkdownRendererComponent.less?ac31","webpack:///./app/javascript/src/shared/components/MarkdownRendererComponent/MarkdownRendererComponent.less","webpack:///./app/javascript/src/images sync ^\\.\\/.*$","webpack:///./app/javascript/src/apps/admin/shared/contexts/CurrentAdminContext.tsx","webpack:///./app/javascript/src/apps/admin/shared/contexts/PrsdiggContext.tsx"],"names":["Menus","theme","style","height","margin","lineHeight","textAlign","Item","to","href","Content","LoginPage","login","useAdminLoginMutation","update","_","error","data","adminLogin","location","replace","className","display","minHeight","onFinish","values","variables","input","width","name","rules","required","message","prefix","color","placeholder","type","loading","htmlType","Routes","path","exact","status","title","subTitle","extra","AnnouncementsPage","useAdminAnnouncementConnectionQuery","fetchMore","refetch","useState","content","setContent","messageType","setMessageType","editing","setEditing","modalVisible","setModalVisible","createAnnouncement","useAdminCreateAnouncementMutation","adminCreateAnnouncement","success","updateAnnouncement","useAdminUpdateAnouncementMutation","adminUpdateAnnouncement","deleteAnnouncement","useAdminDeleteAnouncementMutation","adminDeleteAnnouncement","deliverAnnouncement","useAdminDeliverAnouncementMutation","adminDeliverAnnouncement","previewAnnouncement","useAdminPreviewAnouncementMutation","adminPreviewAnnouncement","adminAnnouncementConnection","announcements","nodes","pageInfo","hasNextPage","endCursor","columns","dataIndex","key","render","deliveredAt","announcement","onConfirm","id","onClick","marginBottom","closable","visible","onCancel","onOk","TextArea","value","onChange","e","currentTarget","autoSize","minRows","maxRows","Group","target","scroll","x","dataSource","rowKey","pagination","disabled","after","ArticlePage","uuid","useParams","history","useHistory","useAdminArticleQuery","article","adminArticle","onBack","goBack","bordered","size","label","src","author","avatarUrl","state","price","ordersCount","revenue","commentsCount","createdAt","defaultActiveKey","TabPane","tab","itemId","itemType","commentableId","commentableType","walletId","userId","OrdersComponent","props","useAdminOrderConnectionQuery","adminOrderConnection","orders","order","buyer","ArticlesPage","query","setQuery","setState","debouncedQuery","useDebounce","wait","gutter","Option","ArticlesComponent","useAdminArticleConnectionQuery","useAdminBlockArticleMutation","block","blocking","useAdminUnblockArticleMutation","unblock","unblocking","adminArticleConnection","articles","BalancePage","BonusesPage","useAdminBonusConnectionQuery","deliverBonus","useAdminDeliverBonusMutation","adminDeliverBonus","adminBonusConnection","bonuses","bonus","user","description","transfer","snapshotId","editingBonus","refetchBonuses","BonusesFormModalComponent","bonusForm","useForm","useAdminUserConnectionQuery","notifyOnNetworkStatusChange","createBonus","useAdminCreateBonusMutation","adminCreateBonus","resetFields","updateBonus","useAdminUpdateBonusMutation","adminUpdateBonus","useEffect","setFieldsValue","amount","users","adminUserConnection","submit","labelCol","span","form","showSearch","filterOption","notFoundContent","onSearch","map","mixinId","min","precision","CommentsPage","MixinMessagesPage","useAdminMixinMessageConnectionQuery","adminMixinMessageConnection","messages","maxWidth","MixinNetworkSnapshotsPage","filter","setFilter","OverviewPage","useStatisticsQuery","statistics","usersCount","articlesCount","authorRevenueAmount","readerRevenueAmount","padding","justify","UserChart","ArticleChart","RevenueChart","useUserChartQuery","userChart","JSON","parse","AreaChartComponent","useArticleChartQuery","articleChart","useRevenueChartQuery","revenueChart","top","right","left","bottom","x1","y1","x2","y2","offset","stopColor","stopOpacity","dataKey","strokeDasharray","stroke","fillOpacity","fill","PaymentsPage","useAdminPaymentConnectionQuery","adminPaymentConnection","payments","payment","payer","SUPPORTED_TOKENS","find","token","assetId","iconUrl","orderType","SwapOrdersPage","useAdminSwapOrderConnectionQuery","adminSwapOrderConnection","swapOrders","swapOrder","funds","payAssetId","fillAssetId","minAmount","TransfersPage","UsersPage","orderBy","setOrderBy","UsersComponent","adminBanUser","useAdminBanUserMutation","adminUnbanUser","useAdminUnbanUserMutation","mixinUuid","revenueTotal","paymentTotal","bannedAt","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","Error","code","ids","all","slice","t","keys","Object","module","exports","App","csrfToken","currentAdmin","prsdigg","client","apolloClient","Provider","basename","Sider","collapsible","background","require","start","componentRequireContext","useContext","webpackContext","webpackContextResolve","AdminBanUserDocument","gql","baseOptions","Apollo","AdminBlockArticleDocument","AdminCreateAnouncementDocument","AdminCreateBonusDocument","AdminDeleteAnouncementDocument","AdminDeleteCommentDocument","useAdminDeleteCommentMutation","AdminDeliverAnouncementDocument","AdminDeliverBonusDocument","AdminLoginDocument","AdminPreviewAnouncementDocument","AdminRecoverCommentDocument","useAdminRecoverCommentMutation","AdminUnbanUserDocument","AdminUnblockArticleDocument","AdminUpdateAnouncementDocument","AdminUpdateBonusDocument","AdminAnnouncementConnectionDocument","ArticleChartDocument","AdminArticleConnectionDocument","AdminArticleDocument","AdminBonusConnectionDocument","AdminMixinMessageConnectionDocument","AdminMixinNetworkSnapshotConnectionDocument","useAdminMixinNetworkSnapshotConnectionQuery","AdminOrderConnectionDocument","AdminPaymentConnectionDocument","RevenueChartDocument","AdminSwapOrderConnectionDocument","AdminTransferConnectionDocument","useAdminTransferConnectionQuery","UserChartDocument","AdminUserConnectionDocument","AdminWalletBalanceDocument","useAdminWalletBalanceQuery","CreateCommentDocument","useCreateCommentMutation","DownvoteArticleDocument","useDownvoteArticleMutation","DownvoteCommentDocument","useDownvoteCommentMutation","ToggleAuthoringSubscribeUserActionDocument","useToggleAuthoringSubscribeUserActionMutation","ToggleCommentingSubscribeArticleActionDocument","useToggleCommentingSubscribeArticleActionMutation","ToggleReadingSubscribeUserActionDocument","useToggleReadingSubscribeUserActionMutation","UpvoteArticleDocument","useUpvoteArticleMutation","UpvoteCommentDocument","useUpvoteCommentMutation","ArticleConnectionDocument","useArticleConnectionQuery","ArticleDocument","useArticleQuery","CommentConnectionDocument","useCommentConnectionQuery","PaymentDocument","usePaymentLazyQuery","StatisticsDocument","SwapPreOrderDocument","useSwapPreOrderQuery","TransferConnectionDocument","useTransferConnectionQuery","UserArticleConnectionDocument","useUserArticleConnectionQuery","UserDocument","useUserQuery","CreateArticleDocument","useCreateArticleMutation","HideArticleDocument","useHideArticleMutation","PublishArticleDocument","usePublishArticleMutation","UpdateArticleDocument","useUpdateArticleMutation","MyArticleConnectionDocument","useMyArticleConnectionQuery","MyArticleOrderConnectionDocument","useMyArticleOrderConnectionQuery","MyArticleDocument","useMyArticleQuery","MyPaymentConnectionDocument","useMyPaymentConnectionQuery","MyStatisticsDocument","useMyStatisticsQuery","MySwapOrderConnectionDocument","useMySwapOrderConnectionQuery","MyTransferConnectionDocument","useMyTransferConnectionQuery","customizedConnectionMergeFunction","keyArgs","merge","existing","incoming","args","uri","cache","InMemoryCache","typePolicies","Query","fields","adminMixinNetworkSnapshotConnection","adminTransferConnection","articleConnection","commentConnection","myTransferConnection","myArticleOrderConnection","mySwapOrderConnection","myPaymentConnection","myArticleConnection","userArticleConnection","transferConnection","ApolloClient","credentials","headers","document","querySelector","MarkdownRendererComponent","Markdown","source","renderers","image","alt","wrapElement","symbol","priceBase","PRS","FOXSWAP_APP_ID","FOXSWAP_CODE_ID","FOXSWAP_DISABLE","ActiveMenuContext","React","createContext","useActiveMenu","CurrentUserContext","useCurrentUser","PrsdiggContext","usePrsdigg","UserAgentContext","useUserAgent","hideLoader","ele","Boolean","mixinUtils","window","webkit","messageHandlers","MixinContext","getContext","ctx","this","environment","prompt","conversation_id","app_version","immersive","imagePath","CommentsComponent","authorMixinId","err","deleteComment","deleting","recover","recovering","comments","comment","commentable","deletedAt","MixinNetworkSnapshotsComponent","appId","snapshots","snapshot","opponent","opponentId","TransfersComponent","sourceId","sourceType","transfers","recipient","processedAt","WalletBalanceComponent","fetchPolicy","assets","adminWalletBalance","text","record","parseFloat","balance","pageSize","LoadingComponent","channels","forEach","webpackEmptyContext","api","__esModule","default","i","options","locals","___CSS_LOADER_API_IMPORT___","push","CurrentAdminContext","useCurrentAdmin"],"mappings":"yTAmBe,SAASA,IACtB,OACE,uBAAMC,MAAM,QACV,yBACEC,MAAO,CACLC,OAAQ,OACRC,OAAQ,OACRC,WAAY,OACZC,UAAW,WALf,SAUA,sBAAMC,KAAN,KACE,kBAAC,IAAD,CAAMC,GAAG,KACP,kBAAC,IAAD,MACA,6CAGJ,sBAAMD,KAAN,KACE,kBAAC,IAAD,CAAMC,GAAG,UACP,kBAAC,IAAD,MACA,yCAGJ,sBAAMD,KAAN,KACE,kBAAC,IAAD,CAAMC,GAAG,aACP,kBAAC,IAAD,MACA,4CAGJ,sBAAMD,KAAN,KACE,kBAAC,IAAD,CAAMC,GAAG,aACP,kBAAC,IAAD,MACA,4CAGJ,sBAAMD,KAAN,KACE,kBAAC,IAAD,CAAMC,GAAG,aACP,kBAAC,IAAD,MACA,4CAGJ,sBAAMD,KAAN,KACE,kBAAC,IAAD,CAAMC,GAAG,gBACP,kBAAC,IAAD,MACA,+CAGJ,sBAAMD,KAAN,KACE,kBAAC,IAAD,CAAMC,GAAG,cACP,kBAAC,IAAD,MACA,6CAGJ,sBAAMD,KAAN,KACE,kBAAC,IAAD,CAAMC,GAAG,kBACP,kBAAC,IAAD,MACA,iDAGJ,sBAAMD,KAAN,KACE,kBAAC,IAAD,CAAMC,GAAG,mBACP,kBAAC,IAAD,MACA,4CAGJ,sBAAMD,KAAN,KACE,kBAAC,IAAD,CAAMC,GAAG,4BACP,kBAAC,IAAD,MACA,6CAGJ,sBAAMD,KAAN,KACE,kBAAC,IAAD,CAAMC,GAAG,YACP,kBAAC,IAAD,MACA,2CAGJ,sBAAMD,KAAN,KACE,kBAAC,IAAD,CAAMC,GAAG,YACP,kBAAC,IAAD,MACA,2CAGJ,sBAAMD,KAAN,KACE,uBAAGE,KAAK,iBACN,kBAAC,IAAD,MACA,6C,iqCCtGFC,E,IAAAA,QAEO,SAASC,IAAa,IAC5BC,EAD2B,EAClBC,YAAsB,CACpCC,OADoC,SAElCC,EAFkC,GAQjC,IAHiBC,EAGlB,EAJEC,KACEC,WAAcF,MAIdA,EACF,IAAQA,MAAMA,GAEdG,SAASC,QAAQ,aAbW,MAkBlC,OACE,uBAAQC,UAAU,UAChB,kBAACX,EAAD,CAASR,MAAO,CAAEoB,QAAS,OAAQC,UAAW,UAC5C,uBACEC,SAAU,SAACC,GACTb,EAAM,CAAEc,UAAW,CAAEC,MAAOF,MAE9BvB,MAAO,CAAE0B,MAAO,IAAKxB,OAAQ,SAE7B,sBAAMG,KAAN,CACEsB,KAAK,OACLC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,cAEnC,uBACEC,OAAQ,kBAAC,IAAD,CAAc/B,MAAO,CAAEgC,MAAO,qBACtCC,YAAY,cAGhB,sBAAM5B,KAAN,CACEsB,KAAK,WACLC,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,cAEnC,uBACEC,OACE,kBAAC,IAAD,CAAqB/B,MAAO,CAAEgC,MAAO,qBAEvCE,KAAK,WACLD,YAAY,cAGhB,sBAAM5B,KAAN,KACE,uBACE8B,SAAS,EACTD,KAAK,UACLE,SAAS,SACTjB,UAAU,qBAJZ,gB,wRCvCG,SAASkB,IACtB,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,GACnB,kBAAC,UAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,SAASC,OAAK,GACxB,kBAAC,UAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,YAAYC,OAAK,GAC3B,kBAAC,UAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,kBAAkBC,OAAK,GACjC,kBAAC,UAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,YAAYC,OAAK,GAC3B,kBAAC,UAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,YAAYC,OAAK,GAC3B,kBAAC,UAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,eAAeC,OAAK,GAC9B,kBAAC,UAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,aAAaC,OAAK,GAC5B,kBAAC,UAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,kBAAkBC,OAAK,GACjC,kBAAC,UAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,2BAA2BC,OAAK,GAC1C,kBAAC,UAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,iBAAiBC,OAAK,GAChC,kBAAC,UAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,WAAWC,OAAK,GAC1B,kBAAC,UAAD,OAEF,kBAAC,IAAD,CAAOD,KAAK,WAAWC,OAAK,GAC1B,kBAAC,UAAD,OAEF,kBAAC,IAAD,KACE,uBACEC,OAAO,MACPC,MAAM,MACNC,SAAS,8CACTC,MACE,kBAAC,IAAD,CAAMrC,GAAG,KACP,uBAAQ4B,KAAK,WAAb,oB,wtCC1CC,SAASU,IAAqB,IAAD,EAMtCC,cAJF9B,EAFwC,EAExCA,KACAoB,EAHwC,EAGxCA,QACAW,EAJwC,EAIxCA,UACAC,EALwC,EAKxCA,QALwC,IAOZC,mBAAS,IAPG,GAOnCC,EAPmC,KAO1BC,EAP0B,SAQJF,mBAEpC,cAVwC,GAQnCG,EARmC,KAQtBC,EARsB,SAWZJ,mBAAS,MAXG,GAWnCK,EAXmC,KAW1BC,EAX0B,SAYFN,oBAAS,GAZP,GAYnCO,EAZmC,KAYrBC,EAZqB,KAanCC,EAbmC,EAabC,YAAkC,CAC7D9C,OAD6D,SAE3DC,EAF2D,GAQ1D,IAH8BC,EAG/B,EAJEC,KACE4C,wBAA2B7C,MAI3BA,EACF,IAAQA,MAAMA,IAEd0C,GAAgB,GAChB,IAAQI,QAAQ,YAChBb,QA3BoC,MA+BnCc,EA/BmC,EA+BbC,YAAkC,CAC7DlD,OAD6D,SAE3DC,EAF2D,GAQ1D,IAH8BC,EAG/B,EAJEC,KACEgD,wBAA2BjD,MAI3BA,EACF,IAAQA,MAAMA,IAEd0C,GAAgB,GAChB,IAAQI,QAAQ,YAChBb,QA7CoC,MAiDnCiB,EAjDmC,EAiDbC,YAAkC,CAC7DrD,OAD6D,SAE3DC,EAF2D,GAQ1D,IAH8BC,EAG/B,EAJEC,KACEmD,wBAA2BpD,MAI3BA,EACF,IAAQA,MAAMA,IAEd,IAAQ8C,QAAQ,YAChBb,QA9DoC,MAkEnCoB,EAlEmC,EAkEZC,YAAmC,CAC/DxD,OAD+D,SAE7DC,EAF6D,GAQ5D,IAH+BC,EAGhC,EAJEC,KACEsD,yBAA4BvD,MAI5BA,EACF,IAAQA,MAAMA,IAEd,IAAQ8C,QAAQ,cAChBb,QA/EoC,MAmFnCuB,EAnFmC,EAmFZC,YAAmC,CAC/D3D,OAD+D,SAE7DC,EAF6D,GAQ5D,IAH+BC,EAGhC,EAJEC,KACEyD,yBAA4B1D,MAI5BA,EACF,IAAQA,MAAMA,IAEd,IAAQ8C,QAAQ,4BAChBb,QAhGoC,MAqG1C,GAAIZ,EACF,OAAO,kBAAC,UAAD,MAtGiC,MA6GtCpB,EAJF0D,4BACSC,EA1G+B,EA0GtCC,MA1GsC,IA2GtCC,SAAYC,EA3G0B,EA2G1BA,YAAaC,EA3Ga,EA2GbA,UAIvBC,EAA4C,CAChD,CACEC,UAAW,KACXC,IAAK,KACLxC,MAAO,MAET,CACEuC,UAAW,cACXC,IAAK,cACLxC,MAAO,eAET,CACEuC,UAAW,UACXC,IAAK,UACLC,OAAQ,SAACjC,GAAD,OAAa,6BAAMA,IAC3BR,MAAO,WAET,CACEuC,UAAW,QACXC,IAAK,QACLxC,MAAO,SAET,CACEuC,UAAW,cACXC,IAAK,cACLC,OAAQ,SAACC,GAAD,OAAiBA,GAAe,KACxC1C,MAAO,eAET,CACEuC,UAAW,UACXC,IAAK,UACLC,OAAQ,SAACrE,EAAGuE,GAAJ,OACN,8BACE,uBACE3C,MAAM,gDACN4C,UAAW,kBACTlB,EAAoB,CAClB3C,UAAW,CAAEC,MAAO,CAAE6D,GAAIF,EAAaE,SAI3C,uCAEF,uBAASpD,KAAK,aACd,uBACEO,MAAM,8DACN4C,UAAW,kBACTf,EAAoB,CAClB9C,UAAW,CAAEC,MAAO,CAAE6D,GAAIF,EAAaE,SAI3C,uCAEF,uBAASpD,KAAK,aACd,uBACEO,MAAM,0BACN4C,UAAW,kBACTrB,EAAmB,CACjBxC,UAAW,CAAEC,MAAO,CAAE6D,GAAIF,EAAaE,SAI3C,sCAEF,uBAASpD,KAAK,aACd,uBACEqD,QAAS,WACPjC,EAAW8B,GACXlC,EAAWkC,EAAanC,SACxBG,EAAegC,EAAajC,aAC5BK,GAAgB,KALpB,UAYJf,MAAO,YAIX,OACE,6BACE,uBAAYA,MAAM,kBAClB,yBAAKzC,MAAO,CAAEwF,aAAc,SAC1B,uBACEtD,KAAK,UACLqD,QAAS,WACPrC,EAAW,IACXE,EAAe,cACfE,EAAW,MACXE,GAAgB,KANpB,OAWA,uBACEf,MAAOY,EAAU,OAAS,MAC1BoC,UAAU,EACVC,QAASnC,EACToC,SAAU,kBAAMnC,GAAgB,IAChCoC,KAAM,WACAvC,EACFQ,EAAmB,CACjBrC,UAAW,CACTC,MAAO,CACL6D,GAAIjC,EAAQiC,GACZrC,UACAE,kBAKNM,EAAmB,CACjBjC,UAAW,CACTC,MAAO,CACLwB,UACAE,oBAOV,6BACE,sBAAO0C,SAAP,CACEC,MAAO7C,EACP8C,SAAU,SAACC,GAAD,OAAO9C,EAAW8C,EAAEC,cAAcH,QAC5CI,SAAU,CAAEC,QAAS,EAAGC,QAAS,OAGrC,6BACE,sBAAOC,MAAP,CACEP,MAAO3C,EACP4C,SAAU,SAACC,GAAD,OAAO5C,EAAe4C,EAAEM,OAAOR,SAEzC,uBAAOA,MAAM,cAAb,QACA,uBAAOA,MAAM,cAAb,YAKR,uBACES,OAAQ,CAAEC,GAAG,GACbzB,QAASA,EACT0B,WAAY/B,EACZgC,OAAO,KACPC,YAAY,IAEd,yBAAK3G,MAAO,CAAEE,OAAQ,OAAQE,UAAW,WACvC,uBACE8B,KAAK,OACLC,QAASA,EACTyE,UAAW/B,EACXU,QAAS,WACPzC,EAAU,CACRtB,UAAW,CACTqF,MAAO/B,OAKZD,EAAc,YAAc,e,8QC/RxB,SAASiC,IAAe,IAC7BC,EAASC,cAATD,KACFE,EAAUC,cAFoB,EAGVC,YAAqB,CAC7C3F,UAAW,CAAEuF,UADP5E,EAH4B,EAG5BA,QAASpB,EAHmB,EAGnBA,KAIjB,GAAIoB,EACF,OAAO,kBAAC,UAAD,MAR2B,IAWdiF,EAAYrG,EAA1BsG,aAER,OACE,6BACE,uBAAY5E,MAAO2E,EAAQ3E,MAAO6E,OAAQ,kBAAML,EAAQM,YACxD,uBAAcC,UAAQ,EAACC,KAAK,SAC1B,sBAAcpH,KAAd,CAAmBqH,MAAM,SAASN,EAAQ3E,OAC1C,sBAAcpC,KAAd,CAAmBqH,MAAM,UACvB,2BACE,uBAAQC,IAAKP,EAAQQ,OAAOC,WACzBT,EAAQQ,OAAOjG,KAAK,IAEtByF,EAAQQ,OAAOjG,OAGpB,sBAActB,KAAd,CAAmBqH,MAAM,SAASN,EAAQU,OAC1C,sBAAczH,KAAd,CAAmBqH,MAAM,SAASN,EAAQW,OAC1C,sBAAc1H,KAAd,CAAmBqH,MAAM,eACtBN,EAAQY,aAEX,sBAAc3H,KAAd,CAAmBqH,MAAM,WAAWN,EAAQa,SAC5C,sBAAc5H,KAAd,CAAmBqH,MAAM,YACtBN,EAAQc,eAEX,sBAAc7H,KAAd,CAAmBqH,MAAM,aACtBN,EAAQe,YAGb,uBAAMC,iBAAiB,UACrB,sBAAMC,QAAN,CAAcC,IAAI,SAASrD,IAAI,UAC7B,kBAAC,UAAD,CAAiBsD,OAAQnB,EAAQ9B,GAAIkD,SAAS,aAEhD,sBAAMH,QAAN,CAAcC,IAAI,WAAWrD,IAAI,YAC/B,kBAAC,UAAD,CACEwD,cAAerB,EAAQ9B,GACvBoD,gBAAgB,aAGpB,sBAAML,QAAN,CAAcC,IAAI,YAAYrD,IAAI,aAChC,kBAAC,UAAD,CAAoBsD,OAAQnB,EAAQ9B,GAAIkD,SAAS,aAEnD,sBAAMH,QAAN,CAAcC,IAAI,iBAAiBrD,IAAI,kBACpCmC,EAAQuB,SACP,kBAAC,UAAD,CAAwBC,OAAQxB,EAAQuB,WAExC,6BAGJ,sBAAMN,QAAN,CAAcC,IAAI,mBAAmBrD,IAAI,oBACtCmC,EAAQuB,SACP,kBAAC,UAAD,CAAgCC,OAAQxB,EAAQuB,WAEhD,iC,qLCpEG,SAASE,EAAgBC,GAGpC,IACMP,EAAqBO,EAArBP,OAAQC,EAAaM,EAAbN,SADf,EAEoCO,YAA6B,CAChEvH,UAAW,CAAE+G,SAAQC,cADfrG,EAFP,EAEOA,QAASpB,EAFhB,EAEgBA,KAAM+B,EAFtB,EAEsBA,UAIvB,GAAIX,EACF,OAAO,kBAAC,UAAD,MAPR,MAeGpB,EAJFiI,qBACSC,EAZV,EAYGtE,MAZH,IAaGC,SAAYC,EAbf,EAaeA,YAAaC,EAb5B,EAa4BA,UAGvBC,EAAqC,CACzC,CACEC,UAAW,UACXC,IAAK,UACLxC,MAAO,WAET,CACEuC,UAAW,YACXC,IAAK,YACLxC,MAAO,aAET,CACEuC,UAAW,QACXC,IAAK,QACLC,OAAQ,SAACrE,EAAGqI,GAAJ,OACN,2BACE,uBAAQvB,IAAKuB,EAAMC,MAAMtB,YACxBqB,EAAMC,MAAMxH,OAGjBc,MAAO,SAET,CACEuC,UAAW,QACXC,IAAK,QACLxC,MAAO,SAET,CACEuC,UAAW,QACXC,IAAK,QACLxC,MAAO,SAET,CACEuC,UAAW,YACXC,IAAK,YACLxC,MAAO,cAIX,OACE,6BACE,uBACE8D,OAAQ,CAAEC,GAAG,GACbzB,QAASA,EACT0B,WAAYwC,EACZvC,OAAO,UACPC,YAAY,IAEd,yBAAK3G,MAAO,CAAEE,OAAQ,OAAQE,UAAW,WACvC,uBACE8B,KAAK,OACLC,QAASA,EACTyE,UAAW/B,EACXU,QAAS,WACPzC,EAAU,CACRtB,UAAW,CACTqF,MAAO/B,OAKZD,EAAc,YAAc,e,uwCC5DxB,SAASuE,IAAgB,IAAD,IACXpG,mBAAS,IADE,GAC9BqG,EAD8B,KACvBC,EADuB,SAEXtG,mBAAS,aAFE,GAE9B8E,EAF8B,KAEvByB,EAFuB,KAG/BC,EAAiBC,YAAYJ,EAAO,CAAEK,KAAM,MAClD,OACE,6BACE,uBAAYjH,MAAM,aAClB,uBAAKkH,OAAQ,GAAI3J,MAAO,CAAEwF,aAAc,SACtC,2BACE,uBACExF,MAAO,CAAE0B,MAAO,KAChBoE,MAAOgC,EACP/B,SAAU,SAACD,GAAD,OAAWyD,EAASzD,KAE9B,sBAAQ8D,OAAR,CAAe9D,MAAM,aAArB,aACA,sBAAQ8D,OAAR,CAAe9D,MAAM,UAArB,UACA,sBAAQ8D,OAAR,CAAe9D,MAAM,WAArB,WACA,sBAAQ8D,OAAR,CAAe9D,MAAM,OAArB,SAGJ,2BACE,uBACEA,MAAOuD,EACPpH,YAAY,gBACZ8D,SAAU,SAACC,GAAD,OAAOsD,EAAStD,EAAEC,cAAcH,YAIhD,kBAAC+D,EAAD,CAAmBR,MAAOG,EAAgB1B,MAAOA,KAKvD,SAAS+B,EAAkBf,GAA4C,IAC7DO,EAAiBP,EAAjBO,MAAOvB,EAAUgB,EAAVhB,MADqD,EAMzBgC,YAA+B,CACxEtI,UAAW,CAAE6H,QAAOvB,WAJpB/G,EAHkE,EAGlEA,KACAoB,EAJkE,EAIlEA,QACAW,EALkE,EAKlEA,UALkE,IAS7BiH,cAT6B,GAS7DC,EAT6D,KAS3CC,EAT2C,KASpD9H,QAToD,IAUzB+H,cAVyB,GAU7DC,EAV6D,KAUzCC,EAVyC,KAUlDjI,QAElB,GAAIA,EACF,OAAO,kBAAC,UAAD,MAb2D,MAqBhEpB,EAJFsJ,uBACSC,EAlByD,EAkBhE3F,MAlBgE,IAmBhEC,SAAYC,EAnBoD,EAmBpDA,YAAaC,EAnBuC,EAmBvCA,UAIvBC,EAAwC,CAC5C,CACEC,UAAW,OACXC,IAAK,OACLxC,MAAO,QAET,CACEuC,UAAW,SACXC,IAAK,SACLC,OAAQ,SAACrE,EAAGuG,GAAJ,OACN,2BACE,uBAAQO,IAAKP,EAAQQ,OAAOC,YAC3BT,EAAQQ,OAAOjG,OAGpBc,MAAO,UAET,CACEuC,UAAW,QACXC,IAAK,QACLxC,MAAO,SAET,CACEuC,UAAW,QACXC,IAAK,QACLxC,MAAO,SAET,CACEuC,UAAW,UACXC,IAAK,UACLxC,MAAO,WAET,CACEuC,UAAW,gBACXC,IAAK,gBACLxC,MAAO,YAET,CACEuC,UAAW,YACXC,IAAK,YACLxC,MAAO,aAET,CACEuC,UAAW,UACXC,IAAK,UACLC,OAAQ,SAACrE,EAAGuG,GAAJ,OACN,8BACqB,YAAlBA,EAAQU,MACP,uBACErF,MAAM,wCACN4C,UAAW,kBACT8E,EAAQ,CAAE3I,UAAW,CAAEC,MAAO,CAAEsF,KAAMK,EAAQL,WAGhD,uBAAQ7E,KAAK,OAAO0E,SAAUwD,GAA9B,YAKF,uBACE3H,MAAM,sCACN4C,UAAW,kBACT2E,EAAM,CAAExI,UAAW,CAAEC,MAAO,CAAEsF,KAAMK,EAAQL,WAG9C,uBAAQ7E,KAAK,OAAO0E,SAAUqD,GAA9B,UAKJ,uBAAS/H,KAAK,aACd,kBAAC,IAAD,CAAM5B,GAAE,oBAAe8G,EAAQL,OAA/B,UACA,uBAAS7E,KAAK,aACd,uBAAG3B,KAAI,oBAAe6G,EAAQL,MAAQT,OAAO,UAA7C,UAKJ7D,MAAO,YAIX,OACE,6BACE,uBACE8D,OAAQ,CAAEC,GAAG,GACbzB,QAASA,EACT0B,WAAY6D,EACZ5D,OAAO,OACPC,YAAY,IAEd,yBAAK3G,MAAO,CAAEE,OAAQ,OAAQE,UAAW,WACvC,uBACE8B,KAAK,OACLC,QAASA,EACTyE,UAAW/B,EACXU,QAAS,WACPzC,EAAU,CACRtB,UAAW,CACTqF,MAAO/B,EACPuE,QACAvB,aAKLjD,EAAc,YAAc,e,4HCxLxB,SAAS0F,IACtB,OACE,6BACE,uBAAY9H,MAAM,YAClB,kBAAC,UAAD,S,6sCCYS,SAAS+H,IAAe,IAAD,IACIxH,oBAAS,GADb,GAC7BO,EAD6B,KACfC,EADe,SAENR,mBAAS,MAFH,GAE7BK,EAF6B,KAEpBC,EAFoB,OAIUmH,cAAtC1J,EAJ4B,EAI5BA,KAAMoB,EAJsB,EAItBA,QAASW,EAJa,EAIbA,UAAWC,EAJE,EAIFA,QAC3B2H,EAL6B,EAKbC,YAA6B,CAClD/J,OADkD,SAEhDC,EAFgD,GASlC,YADd,EAJEE,KACE6J,kBAAqB9C,OAKvB,IAAQlE,QAAQ,iBAfc,MAoBpC,GAAIzB,EACF,OAAO,kBAAC,UAAD,MArB2B,MA6BhCpB,EAJF8J,qBACSC,EA1ByB,EA0BhCnG,MA1BgC,IA2BhCC,SAAYC,EA3BoB,EA2BpBA,YAAaC,EA3BO,EA2BPA,UAIvBC,EAAqC,CACzC,CAAEC,UAAW,KAAMC,IAAK,KAAMxC,MAAO,MACrC,CACEuC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAACrE,EAAGkK,GAAJ,OACN,2BACE,uBAAQpD,IAAKoD,EAAMC,KAAKnD,YACxB,8BAAOkD,EAAMC,KAAKrJ,QAGtBc,MAAO,QAET,CAAEuC,UAAW,QAASC,IAAK,QAASxC,MAAO,SAC3C,CACEuC,UAAW,cACXC,IAAK,cACLC,OAAQ,SAAC+F,GAAD,OAAiB,6BAAMA,GAAe,MAC9CxI,MAAO,eAET,CAAEuC,UAAW,SAAUC,IAAK,SAAUxC,MAAO,UAC7C,CAAEuC,UAAW,QAASC,IAAK,QAASxC,MAAO,SAC3C,CAAEuC,UAAW,YAAaC,IAAK,YAAaxC,MAAO,aACnD,CACEuC,UAAW,aACXC,IAAK,aACLC,OAAQ,SAACrE,EAAGkK,GAAJ,OACNA,EAAMG,UAAYH,EAAMG,SAASC,WAC/B,uBACE5K,KAAI,sCAAiCwK,EAAMG,SAASC,YACpD7E,OAAO,UAFT,cAOA,KAEJ7D,MAAO,cAET,CACEuC,UAAW,UACXC,IAAK,UACLC,OAAQ,SAACrE,EAAGkK,GAAJ,OACN,8BACE,uBACEnE,SAA0B,YAAhBmE,EAAMjD,MAChBrF,MAAM,yCACN4C,UAAW,kBACTqF,EAAa,CAAElJ,UAAW,CAAEC,MAAO,CAAE6D,GAAIyF,EAAMzF,SAGjD,uBACEpD,KAAK,OACL0E,SAA0B,YAAhBmE,EAAMjD,MAChBL,KAAK,SAHP,YAQF,uBAASvF,KAAK,aACd,uBACE0E,SAA0B,YAAhBmE,EAAMjD,MAChBvC,QAAS,WACPjC,EAAWyH,GACXvH,GAAgB,IAElBtB,KAAK,OACLuF,KAAK,SAPP,UAaJhF,MAAO,YAGX,OACE,6BACE,uBAAYA,MAAM,YAClB,yBAAKzC,MAAO,CAAEwF,aAAc,SAC1B,uBACEtD,KAAK,UACLqD,QAAS,WACPjC,EAAW,MACXE,GAAgB,KAJpB,OASA,kBAAC,UAAD,CACEkC,QAASnC,EACT6H,aAAc/H,EACdsC,SAAU,kBAAMnC,GAAgB,IAChC6H,eAAgBtI,KAGpB,uBACEwD,OAAQ,CAAEC,GAAG,GACbzB,QAASA,EACT0B,WAAYqE,EACZpE,OAAO,KACPC,YAAY,IAEd,yBAAK3G,MAAO,CAAEE,OAAQ,OAAQE,UAAW,WACvC,uBACE8B,KAAK,OACLC,QAASA,EACTyE,UAAW/B,EACXU,QAAS,WACPzC,EAAU,CACRtB,UAAW,CACTqF,MAAO/B,OAKZD,EAAc,YAAc,e,+3DCnJxB,SAASyG,EAA0BxC,GAK9C,IACMpD,EAAoDoD,EAApDpD,QAASC,EAA2CmD,EAA3CnD,SAAUyF,EAAiCtC,EAAjCsC,aAAcC,EAAmBvC,EAAnBuC,eADxC,IAEyBrI,mBAAS,MAFlC,GAEMqG,EAFN,KAEaC,EAFb,KAGMiC,EAHN,EAGmB,IAAKC,UAHxB,MAIKhC,EAAiBC,YAAYJ,EAAO,CAAEK,KAAM,MAJjD,EAKyB+B,YAA4B,CACpDC,6BAA6B,EAC7BlK,UAAW,CAAE6H,MAAOG,KAFdzI,EALP,EAKOA,KAAMoB,EALb,EAKaA,QAIPwJ,EATN,EASqBC,YAA4B,CAChDhL,OADgD,SAE9CC,EAF8C,GAQ7C,IAHuBC,EAGxB,EAJEC,KACE8K,iBAAoB/K,MAIpBA,EACF,IAAQA,MAAMA,IAEd,IAAQ8C,QAAQ,WAChB2H,EAAUO,cACVT,IACA1F,QAxBL,MA4BMoG,EA5BN,EA4BqBC,YAA4B,CAChDpL,OADgD,SAE9CC,EAF8C,GAQ7C,IAHuBC,EAGxB,EAJEC,KACEkL,iBAAoBnL,MAIpBA,EACF,IAAQA,MAAMA,IAEd,IAAQ8C,QAAQ,WAChB2H,EAAUO,cACVT,IACA1F,QA3CL,MA+CDuG,qBAAU,WACJd,EACFG,EAAUY,eAAe,CACvBvD,OAAQwC,EAAaJ,KAAK1F,GAC1B7C,MAAO2I,EAAa3I,MACpBwI,YAAaG,EAAaH,YAC1BmB,OAAQhB,EAAagB,SAGvBb,EAAUO,gBAEX,CAACV,IAEJ,IAAMiB,EAAStL,GAAQA,EAAKuL,oBAAoB3H,OAAU,GAE1D,OACE,uBACElC,MAAO2I,EAAe,OAAS,MAC/B1F,QAASA,EACTC,SAAUA,EACVC,KAAM,kBAAM2F,EAAUgB,WAEtB,uBACEC,SAAU,CAAEC,KAAM,GAClBC,KAAMnB,EACNjK,SAAU,SAACC,GACL6J,EACFW,EAAY,CACVvK,UAAW,CAAEC,MAAM,EAAD,KAAOF,GAAP,IAAe+D,GAAI8F,EAAa9F,QAGpDqG,EAAY,CAAEnK,UAAW,CAAEC,MAAOF,OAItC,sBAAMlB,KAAN,CAAWsB,KAAK,SAAS+F,MAAM,OAAO9F,MAAO,CAAC,CAAEC,UAAU,KACxD,uBACE8K,YAAU,EACV1K,YAAY,2BACZ2K,cAAc,EACdC,gBAAiB1K,EAAU,uBAAMsF,KAAK,UAAa,KACnDqF,SAAU,SAAChH,GAAD,OAAWwD,EAASxD,KAE7BuG,EAAMU,KAAI,SAAC/B,GAAD,OACT,sBAAQpB,OAAR,CAAe3E,IAAK+F,EAAK1F,GAAIQ,MAAOkF,EAAK1F,IACvC,2BACE,8BAAO0F,EAAKrJ,MACZ,8BAAOqJ,EAAKgC,gBAMtB,sBAAM3M,KAAN,CAAWsB,KAAK,SAAS+F,MAAM,SAAS9F,MAAO,CAAC,CAAEC,UAAU,KAC1D,uBAAaoL,IAAK,EAAGC,UAAW,EAAGjL,YAAY,SAEjD,sBAAM5B,KAAN,CAAWsB,KAAK,QAAQ+F,MAAM,QAAQ9F,MAAO,CAAC,CAAEC,UAAU,KACxD,6BAEF,sBAAMxB,KAAN,CAAWsB,KAAK,cAAc+F,MAAM,eAClC,sBAAO7B,SAAP,W,4HChIK,SAASsH,IACtB,OACE,6BACE,uBAAY1K,MAAM,aAClB,kBAAC,UAAD,S,qMCFS,SAAS2K,IAAqB,IAAD,EACLC,cAA7BtM,EADkC,EAClCA,KAAMoB,EAD4B,EAC5BA,QAASW,EADmB,EACnBA,UAEvB,GAAIX,EACF,OAAO,kBAAC,UAAD,MAJiC,MAYtCpB,EAJFuM,4BACSC,EAT+B,EAStC5I,MATsC,IAUtCC,SAAYC,EAV0B,EAU1BA,YAAaC,EAVa,EAUbA,UAIvBC,EAA4C,CAChD,CACEC,UAAW,SACXC,IAAK,SACLxC,MAAO,UAET,CACEuC,UAAW,WACXC,IAAK,WACLxC,MAAO,YAET,CACEuC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAACrE,EAAGiB,GAAJ,OACNA,EAAQkJ,KACN,2BACE,uBAAQrD,IAAK7F,EAAQkJ,KAAKnD,YACzB/F,EAAQkJ,KAAKrJ,KACbG,EAAQkJ,KAAKgC,SAGhBlL,EAAQ8G,QAEZnG,MAAO,QAET,CACEuC,UAAW,UACXC,IAAK,UACLC,OAAQ,SAACjC,GAAD,OAAa,yBAAKjD,MAAO,CAAEwN,SAAU,SAAWvK,IACxDR,MAAO,WAET,CACEuC,UAAW,cACXC,IAAK,cACLxC,MAAO,eAET,CACEuC,UAAW,YACXC,IAAK,YACLxC,MAAO,cAIX,OACE,6BACE,uBAAYA,MAAM,mBAClB,uBACE8D,OAAQ,CAAEC,GAAG,GACbzB,QAASA,EACT0B,WAAY8G,EACZ7G,OAAO,KACPC,YAAY,IAEd,yBAAK3G,MAAO,CAAEE,OAAQ,OAAQE,UAAW,WACvC,uBACE8B,KAAK,OACLC,QAASA,EACTyE,UAAW/B,EACXU,QAAS,WACPzC,EAAU,CACRtB,UAAW,CACTqF,MAAO/B,OAKZD,EAAc,YAAc,e,unCCnFxB,SAAS4I,IAA6B,IAAD,IACtBzK,mBAC1B,SAFgD,GAC3C0K,EAD2C,KACnCC,EADmC,KAIlD,OACE,6BACE,uBAAYlL,MAAM,2BAClB,uBAAKkH,OAAQ,GAAI3J,MAAO,CAAEwF,aAAc,SACtC,2BACE,uBACExF,MAAO,CAAE0B,MAAO,KAChBoE,MAAO4H,EACP3H,SAAU,SAACD,GAAD,OAAW6H,EAAU7H,KAE/B,sBAAQ8D,OAAR,CAAe9D,MAAM,SAArB,SACA,sBAAQ8D,OAAR,CAAe9D,MAAM,UAArB,UACA,sBAAQ8D,OAAR,CAAe9D,MAAM,WAArB,WACA,sBAAQ8D,OAAR,CAAe9D,MAAM,SAArB,SACA,sBAAQ8D,OAAR,CAAe9D,MAAM,OAArB,UAIN,kBAAC,UAAD,CAAgC4H,OAAQA,O,8LCP/B,SAASE,IAAgB,IAAD,EACXC,cAAlB9M,EAD6B,EAC7BA,KAER,GAHqC,EACvBoB,QAGZ,OAAO,kBAAC,UAAD,MAJ4B,MAcjCpB,EANF+M,WACEC,EATiC,EASjCA,WACAC,EAViC,EAUjCA,cACAC,EAXiC,EAWjCA,oBACAC,EAZiC,EAYjCA,oBAIJ,OACE,6BACE,uBAAYzL,MAAM,cAClB,uBACEzC,MAAO,CAAEmO,QAAS,GAAI/N,UAAW,UACjCuJ,OAAQ,GACRyE,QAAQ,gBAER,uBAAK3B,KAAM,IACT,uBAAWhK,MAAM,2BAAOqD,MAAOiI,KAEjC,uBAAKtB,KAAM,IACT,uBAAWhK,MAAM,2BAAOqD,MAAOkI,KAEjC,uBAAKvB,KAAM,IACT,uBAAWhK,MAAM,2BAAOqD,MAAOmI,KAEjC,uBAAKxB,KAAM,IACT,uBAAWhK,MAAM,2BAAOqD,MAAOoI,MAGnC,kBAACG,EAAD,MACA,kBAACC,EAAD,MACA,kBAACC,EAAD,OAKN,SAASF,IAAa,IAAD,EACOG,eAAlBrM,EADW,EACXA,QAASpB,EADE,EACFA,KACjB,GAAIoB,EACF,OAAO,kBAAC,UAAD,MAHU,IAMbsM,EAAc1N,EAAd0N,UACN,IACEA,EAAYC,KAAKC,MAAMF,GACvB,SACAA,EAAY,GAGd,OACE,6BACE,0CACA,kBAACG,EAAD,CAAoB7N,KAAM0N,KAKhC,SAASH,IAAgB,IAAD,EACIO,cAAlB1M,EADc,EACdA,QAASpB,EADK,EACLA,KACjB,GAAIoB,EACF,OAAO,kBAAC,UAAD,MAHa,IAMhB2M,EAAiB/N,EAAjB+N,aACN,IACEA,EAAeJ,KAAKC,MAAMG,GAC1B,SACAA,EAAe,GAGjB,OACE,6BACE,6CACA,kBAACF,EAAD,CAAoB7N,KAAM+N,KAKhC,SAASP,IAAgB,IAAD,EACIQ,cAAlB5M,EADc,EACdA,QAASpB,EADK,EACLA,KACjB,GAAIoB,EACF,OAAO,kBAAC,UAAD,MAHa,IAMhB6M,EAAiBjO,EAAjBiO,aACN,IACEA,EAAeN,KAAKC,MAAMK,GAC1B,SACAA,EAAe,GAGjB,OACE,6BACE,6CACA,kBAACJ,EAAD,CAAoB7N,KAAMiO,KAKhC,SAASJ,EAAmB9F,GAC1B,OACE,kBAAC,IAAD,CAAqB7I,OAAQ,KAC3B,kBAAC,IAAD,CACEc,KAAM+H,EAAM/H,KACZb,OAAQ,CAAE+O,IAAK,GAAIC,MAAO,GAAIC,KAAM,EAAGC,OAAQ,IAE/C,8BACE,oCAAgB9J,GAAG,YAAY+J,GAAG,IAAIC,GAAG,IAAIC,GAAG,IAAIC,GAAG,KACrD,0BAAMC,OAAO,KAAKC,UAAU,UAAUC,YAAa,KACnD,0BAAMF,OAAO,MAAMC,UAAU,UAAUC,YAAa,MAGxD,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,MACA,kBAAC,IAAD,CACE3N,KAAK,WACL0N,QAAQ,QACRE,OAAO,UACPC,YAAa,EACbC,KAAK,wB,6MC7IA,SAASC,IAAgB,IAAD,EACAC,cAA7BnP,EAD6B,EAC7BA,KAAMoB,EADuB,EACvBA,QAASW,EADc,EACdA,UAEvB,GAAIX,EACF,OAAO,kBAAC,UAAD,MAJ4B,MAYjCpB,EAJFoP,uBACSC,EAT0B,EASjCzL,MATiC,IAUjCC,SAAYC,EAVqB,EAUrBA,YAAaC,EAVQ,EAURA,UAGvBC,EAAwC,CAC5C,CACEC,UAAW,UACXC,IAAK,UACLxC,MAAO,YAET,CACEuC,UAAW,QACXC,IAAK,QACLC,OAAQ,SAACrE,EAAGwP,GAAJ,OACN,2BACE,uBAAQ1I,IAAK0I,EAAQC,MAAMzI,YAC3B,8BACGwI,EAAQC,MAAM3O,KADjB,IACwB0O,EAAQC,MAAMtD,QADtC,OAKJvK,MAAO,UAET,CACEuC,UAAW,SACXC,IAAK,SACLC,OAAQ,SAACkH,EAAQiE,GAAT,aACN,2BACE,uBACE1I,IAAG,UACD4I,IAAiBC,MACf,SAACC,GAAD,OAAWA,EAAMC,UAAYL,EAAQK,kBAFtC,aACD,EAEGC,UAGP,8BAAOvE,KAGX3J,MAAO,UAET,CACEuC,UAAW,QACXC,IAAK,QACLxC,MAAO,SAET,CACEuC,UAAW,YACXC,IAAK,YACLC,OAAQ,SAACrE,EAAGwP,GAAJ,OACN,8BAAOA,EAAQnH,MAAQmH,EAAQnH,MAAM0H,UAAY,MAEnDnO,MAAO,aAET,CACEuC,UAAW,YACXC,IAAK,YACLxC,MAAO,cAET,CACEuC,UAAW,aACXC,IAAK,aACLC,OAAQ,SAACiG,GAAD,OACN,uBAAG5K,KAAI,sCAAiC4K,GAAc7E,OAAO,UAA7D,SAIF7D,MAAO,aAIX,OACE,6BACE,uBAAYA,MAAM,aAClB,uBACE8D,OAAQ,CAAEC,GAAG,GACbzB,QAASA,EACT0B,WAAY2J,EACZ1J,OAAO,UACPC,YAAY,IAEd,yBAAK3G,MAAO,CAAEE,OAAQ,OAAQE,UAAW,WACvC,uBACE8B,KAAK,OACLC,QAASA,EACTyE,UAAW/B,EACXU,QAAS,WACPzC,EAAU,CACRtB,UAAW,CACTqF,MAAO/B,OAKZD,EAAc,YAAc,e,6MCtGxB,SAASgM,IAAkB,IAAD,EACFC,cAA7B/P,EAD+B,EAC/BA,KAAMoB,EADyB,EACzBA,QAASW,EADgB,EAChBA,UACvB,GAAIX,EACF,OAAO,kBAAC,UAAD,MAH8B,MAWnCpB,EAJFgQ,yBACSC,EAR4B,EAQnCrM,MARmC,IASnCC,SAAYC,EATuB,EASvBA,YAAaC,EATU,EASVA,UAIvBC,EAAyC,CAC7C,CAAEC,UAAW,UAAWC,IAAK,UAAWxC,MAAO,YAC/C,CACEuC,UAAW,QACXC,IAAK,QACLC,OAAQ,SAACrE,EAAGoQ,GAAJ,OACN,2BACE,uBAAQtJ,IAAKsJ,EAAUX,MAAMzI,YAC7B,8BAAOoJ,EAAUX,MAAM3O,MACvB,kCAAQsP,EAAUX,MAAMtD,QAAxB,OAGJvK,MAAO,SAET,CAAEuC,UAAW,QAASC,IAAK,QAASxC,MAAO,SAC3C,CACEuC,UAAW,QACXC,IAAK,QACLC,OAAQ,SAACgM,EAAOD,GAAR,aACN,2BACE,uBACEtJ,IAAG,UACD4I,IAAiBC,MACf,SAACC,GAAD,OAAWA,EAAMC,UAAYO,EAAUE,qBAFxC,aACD,EAEGR,UAGP,8BAAOO,KAGXzO,MAAO,SAET,CACEuC,UAAW,SACXC,IAAK,SACLC,OAAQ,SAACkH,EAAQ6E,GAAT,aACN,2BACE,uBACEtJ,IAAG,UACD4I,IAAiBC,MACf,SAACC,GAAD,OAAWA,EAAMC,UAAYO,EAAUG,sBAFxC,aACD,EAEGT,UAGP,8BAAOvE,GAAU,OAGrB3J,MAAO,UAET,CACEuC,UAAW,YACXC,IAAK,YACLC,OAAQ,SAACmM,GAAD,OAAeA,GAAa,KACpC5O,MAAO,aAET,CAAEuC,UAAW,YAAaC,IAAK,YAAaxC,MAAO,cAGrD,OACE,6BACE,uBAAYA,MAAM,gBAClB,uBACE8D,OAAQ,CAAEC,GAAG,GACbC,WAAYuK,EACZjM,QAASA,EACT2B,OAAO,UACPC,YAAY,IAEd,yBAAK3G,MAAO,CAAEE,OAAQ,OAAQE,UAAW,WACvC,uBACE8B,KAAK,OACLC,QAASA,EACTyE,UAAW/B,EACXU,QAAS,WACPzC,EAAU,CACRtB,UAAW,CACTqF,MAAO/B,OAKZD,EAAc,YAAc,e,4HCjGxB,SAASyM,IACtB,OACE,6BACE,uBAAY7O,MAAM,cAClB,kBAAC,UAAD,S,8yCCgBS,SAAS8O,IAAa,IAAD,IACRvO,mBAAS,IADD,GAC3BqG,EAD2B,KACpBC,EADoB,SAEJtG,mBAAS,WAFL,GAE3BwO,EAF2B,KAElBC,EAFkB,SAGNzO,mBAAS,kBAHH,GAG3B0K,EAH2B,KAGnBC,EAHmB,KAI5BnE,EAAiBC,YAAYJ,EAAO,CAAEK,KAAM,MAClD,OACE,6BACE,uBAAYjH,MAAM,UAClB,uBAAKkH,OAAQ,GAAI3J,MAAO,CAAEwF,aAAc,SACtC,2BACE,uBACExF,MAAO,CAAE0B,MAAO,KAChBoE,MAAO0L,EACPzL,SAAU,SAACD,GAAD,OAAW2L,EAAW3L,KAEhC,sBAAQ8D,OAAR,CAAe9D,MAAM,WAArB,iBACA,sBAAQ8D,OAAR,CAAe9D,MAAM,iBAArB,sBAGA,sBAAQ8D,OAAR,CAAe9D,MAAM,iBAArB,sBAGA,sBAAQ8D,OAAR,CAAe9D,MAAM,kBAArB,uBAGA,sBAAQ8D,OAAR,CAAe9D,MAAM,kBAArB,yBAKJ,2BACE,uBACE9F,MAAO,CAAE0B,MAAO,KAChBoE,MAAO4H,EACP3H,SAAU,SAACD,GAAD,OAAW6H,EAAU7H,KAE/B,sBAAQ8D,OAAR,CAAe9D,MAAM,kBAArB,kBACA,sBAAQ8D,OAAR,CAAe9D,MAAM,eAArB,eACA,sBAAQ8D,OAAR,CAAe9D,MAAM,OAArB,SAGJ,2BACE,uBACEA,MAAOuD,EACPpH,YAAY,0BACZ8D,SAAU,SAACC,GAAD,OAAOsD,EAAStD,EAAEC,cAAcH,YAIhD,kBAAC4L,EAAD,CACEF,QAASA,EACTnI,MAAOG,EACPkE,OAAQA,KAMT,SAASgE,EAAe5I,GAI3B,IACMO,EAA2BP,EAA3BO,MAAOmI,EAAoB1I,EAApB0I,QAAS9D,EAAW5E,EAAX4E,OADvB,EAMuCjC,YAA4B,CAClEjK,UAAW,CAAE6H,QAAOmI,UAAS9D,YAJ7B3M,EAHD,EAGCA,KACAoB,EAJD,EAICA,QACAW,EALD,EAKCA,UAIK6O,EATN,EASsBC,cATtB,MAUMC,EAVN,EAUwBC,cAVxB,MAYD,GAAI3P,EACF,OAAO,kBAAC,UAAD,MAbR,MAqBGpB,EAJFuL,oBACSD,EAlBV,EAkBG1H,MAlBH,IAmBGC,SAAYC,EAnBf,EAmBeA,YAAaC,EAnB5B,EAmB4BA,UAIvBC,EAAqC,CACzC,CACEC,UAAW,UACXC,IAAK,UACLC,OAAQ,SAAC8H,EAAShC,GAAV,OACN,uBAASvI,MAAM,aAAaQ,QAAS+H,EAAK+G,WACvC/E,IAGLvK,MAAO,YAET,CACEuC,UAAW,OACXC,IAAK,OACLC,OAAQ,SAACvD,EAAMqJ,GAAP,OACN,2BACE,uBAAQrD,IAAKqD,EAAKnD,YACjBlG,IAGLc,MAAO,QAET,CACEuC,UAAW,gBACXC,IAAK,gBACLC,OAAQ,SAACrE,EAAGmK,GAAJ,OAAaA,EAAK8C,WAAWE,eACrCvL,MAAO,YAET,CACEuC,UAAW,gBACXC,IAAK,gBACLC,OAAQ,SAACrE,EAAGmK,GAAJ,OAAaA,EAAK8C,WAAW5F,eACrCzF,MAAO,YAET,CACEuC,UAAW,eACXC,IAAK,eACLC,OAAQ,SAACrE,EAAGmK,GAAJ,OAAaA,EAAK8C,WAAWkE,cACrCvP,MAAO,iBAET,CACEuC,UAAW,eACXC,IAAK,eACLC,OAAQ,SAACrE,EAAGmK,GAAJ,OAAaA,EAAK8C,WAAWmE,cACrCxP,MAAO,iBAET,CACEuC,UAAW,WACXC,IAAK,WACLC,OAAQ,SAACgN,GAAD,OAAcA,GAAY,KAClCzP,MAAO,aAET,CACEuC,UAAW,YACXC,IAAK,YACLxC,MAAO,cAET,CACEuC,UAAW,UACXC,IAAK,UACLC,OAAQ,SAACrE,EAAGmK,GAAJ,OACN,8BACGA,EAAKkH,SACJ,uBACEzP,MAAM,mCACN4C,UAAW,kBACTwM,EAAe,CACbrQ,UAAW,CAAEC,MAAO,CAAE6D,GAAI0F,EAAK1F,SAInC,uBAAQpD,KAAK,QAAb,UAGF,uBACEO,MAAM,iCACN4C,UAAW,kBACTsM,EAAa,CACXnQ,UAAW,CAAEC,MAAO,CAAE6D,GAAI0F,EAAK1F,SAInC,uBAAQpD,KAAK,QAAb,YAQZ,OACE,6BACE,kBAAC,IAAD,CACEqE,OAAQ,CAAEC,GAAG,GACbzB,QAASA,EACT0B,WAAY4F,EACZ3F,OAAO,UACPC,YAAY,IAEd,yBAAK3G,MAAO,CAAEE,OAAQ,OAAQE,UAAW,WACvC,uBACE8B,KAAK,OACLC,QAASA,EACTyE,UAAW/B,EACXU,QAAS,WACPzC,EAAU,CACRtB,UAAW,CACTkM,SACArE,QACAmI,UACA3K,MAAO/B,OAKZD,EAAc,YAAc,e,qBChOvC,IAAIkI,EAAM,CACT,eAAgB,CACf,IACA,GAED,kBAAmB,CAClB,IACA,GAED,mBAAoB,CACnB,IACA,GAED,sBAAuB,CACtB,IACA,GAED,eAAgB,CACf,IACA,GAED,kBAAmB,CAClB,IACA,GAED,mBAAoB,CACnB,IACA,GAED,sBAAuB,CACtB,IACA,GAED,uBAAwB,CACvB,IACA,GAED,0BAA2B,CAC1B,IACA,GAED,2BAA4B,CAC3B,IACA,GAED,8BAA+B,CAC9B,IACA,GAED,cAAe,CACd,IACA,GAED,iBAAkB,CACjB,IACA,GAED,kBAAmB,CAClB,IACA,GAED,qBAAsB,CACrB,IACA,GAED,eAAgB,CACf,IACA,IAED,kBAAmB,CAClB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,aAAc,CACb,IACA,IAED,gBAAiB,CAChB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,oBAAqB,CACpB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,oBAAqB,CACpB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,cAAe,CACd,IACA,IAED,iBAAkB,CACjB,IACA,IAED,kBAAmB,CAClB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,6BAA8B,CAC7B,IACA,IAED,cAAe,CACd,IACA,IAED,iBAAkB,CACjB,IACA,IAED,kBAAmB,CAClB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,kBAAmB,CAClB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,eAAgB,CACf,IACA,IAED,kBAAmB,CAClB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,kBAAmB,CAClB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,oBAAqB,CACpB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,iBAAkB,CACjB,IACA,IAED,oBAAqB,CACpB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,eAAgB,CACf,IACA,IAED,kBAAmB,CAClB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,gBAAiB,CAChB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,oBAAqB,CACpB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,gBAAiB,CAChB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,oBAAqB,CACpB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,oBAAqB,CACpB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,eAAgB,CACf,IACA,IAED,kBAAmB,CAClB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,gBAAiB,CAChB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,oBAAqB,CACpB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,cAAe,CACd,IACA,IAED,iBAAkB,CACjB,IACA,IAED,kBAAmB,CAClB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,oBAAqB,CACpB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,uBAAwB,CACvB,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,8BAA+B,CAC9B,IACA,IAED,cAAe,CACd,IACA,IAED,iBAAkB,CACjB,IACA,IAED,kBAAmB,CAClB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,cAAe,CACd,IACA,IAED,iBAAkB,CACjB,IACA,IAED,kBAAmB,CAClB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,YAAa,CACZ,IACA,IAED,eAAgB,CACf,IACA,IAED,gBAAiB,CAChB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,cAAe,CACd,IACA,IAED,iBAAkB,CACjB,IACA,IAED,kBAAmB,CAClB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,gBAAiB,CAChB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,oBAAqB,CACpB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,kBAAmB,CAClB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,gBAAiB,CAChB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,oBAAqB,CACpB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,0BAA2B,CAC1B,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,8BAA+B,CAC9B,IACA,IAED,oBAAqB,CACpB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,2BAA4B,CAC3B,IACA,IAED,eAAgB,CACf,IACA,IAED,kBAAmB,CAClB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,cAAe,CACd,IACA,IAED,iBAAkB,CACjB,IACA,IAED,kBAAmB,CAClB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,kBAAmB,CAClB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,oBAAqB,CACpB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,cAAe,CACd,IACA,IAED,iBAAkB,CACjB,IACA,IAED,kBAAmB,CAClB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,cAAe,CACd,IACA,IAED,qBAAsB,CACrB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,yBAA0B,CACzB,IACA,IAED,4BAA6B,CAC5B,IACA,IAED,iBAAkB,CACjB,IACA,IAED,kBAAmB,CAClB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,iBAAkB,CACjB,IACA,IAED,oBAAqB,CACpB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,wBAAyB,CACxB,IACA,IAED,YAAa,CACZ,IACA,IAED,eAAgB,CACf,IACA,IAED,gBAAiB,CAChB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,eAAgB,CACf,IACA,IAED,kBAAmB,CAClB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,cAAe,CACd,IACA,IAED,iBAAkB,CACjB,IACA,IAED,kBAAmB,CAClB,IACA,IAED,qBAAsB,CACrB,IACA,IAED,gBAAiB,CAChB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,oBAAqB,CACpB,IACA,IAED,uBAAwB,CACvB,IACA,IAED,eAAgB,CACf,IACA,IAED,kBAAmB,CAClB,IACA,IAED,mBAAoB,CACnB,IACA,IAED,sBAAuB,CACtB,IACA,IAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,2BAA4B,CAC3B,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,+BAAgC,CAC/B,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,0BAA2B,CAC1B,IACA,KAED,2BAA4B,CAC3B,IACA,KAED,8BAA+B,CAC9B,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,2BAA4B,CAC3B,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,+BAAgC,CAC/B,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,mCAAoC,CACnC,IACA,KAED,sCAAuC,CACtC,IACA,KAED,uCAAwC,CACvC,IACA,KAED,0CAA2C,CAC1C,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,0BAA2B,CAC1B,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,aAAc,CACb,IACA,KAED,gBAAiB,CAChB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,2BAA4B,CAC3B,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,aAAc,CACb,IACA,KAED,gBAAiB,CAChB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,YAAa,CACZ,IACA,KAED,eAAgB,CACf,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,0BAA2B,CAC1B,IACA,KAED,6BAA8B,CAC7B,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,6BAA8B,CAC7B,IACA,KAED,gCAAiC,CAChC,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,aAAc,CACb,IACA,KAED,gBAAiB,CAChB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,2BAA4B,CAC3B,IACA,KAED,uBAAwB,CACvB,IACA,KAED,0BAA2B,CAC1B,IACA,KAED,2BAA4B,CAC3B,IACA,KAED,8BAA+B,CAC9B,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,0BAA2B,CAC1B,IACA,KAED,2BAA4B,CAC3B,IACA,KAED,8BAA+B,CAC9B,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,0BAA2B,CAC1B,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,0BAA2B,CAC1B,IACA,KAED,mBAAoB,CACnB,KAED,sBAAuB,CACtB,KAED,uBAAwB,CACvB,IACA,KAED,0BAA2B,CAC1B,IACA,KAED,iBAAkB,CACjB,KAED,4BAA6B,CAC5B,IACA,KAED,+BAAgC,CAC/B,IACA,KAED,gCAAiC,CAChC,IACA,KAED,mCAAoC,CACnC,IACA,KAED,oBAAqB,CACpB,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,0BAA2B,CAC1B,IACA,KAED,6BAA8B,CAC7B,IACA,KAED,8BAA+B,CAC9B,IACA,KAED,iCAAkC,CACjC,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,aAAc,CACb,IACA,KAED,gBAAiB,CAChB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,2BAA4B,CAC3B,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,cAAe,CACd,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,0BAA2B,CAC1B,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,2BAA4B,CAC3B,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,YAAa,CACZ,IACA,KAED,eAAgB,CACf,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,YAAa,CACZ,IACA,KAED,eAAgB,CACf,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,0BAA2B,CAC1B,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,6BAA8B,CAC7B,IACA,KAED,gCAAiC,CAChC,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,2BAA4B,CAC3B,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,+BAAgC,CAC/B,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,2BAA4B,CAC3B,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,0BAA2B,CAC1B,IACA,KAED,wBAAyB,CACxB,IACA,KAED,2BAA4B,CAC3B,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,+BAAgC,CAC/B,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,2BAA4B,CAC3B,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,+BAAgC,CAC/B,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,iBAAkB,CACjB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,uBAAwB,CACvB,IACA,KAED,0BAA2B,CAC1B,IACA,KAED,2BAA4B,CAC3B,IACA,KAED,8BAA+B,CAC9B,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,gBAAiB,CAChB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,oBAAqB,CACpB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,0BAA2B,CAC1B,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,KAED,cAAe,CACd,IACA,KAED,iBAAkB,CACjB,IACA,KAED,kBAAmB,CAClB,IACA,KAED,qBAAsB,CACrB,IACA,KAED,uBAAwB,CACvB,IACA,KAED,0BAA2B,CAC1B,IACA,KAED,2BAA4B,CAC3B,IACA,KAED,8BAA+B,CAC9B,IACA,KAED,qBAAsB,CACrB,IACA,KAED,wBAAyB,CACxB,IACA,KAED,yBAA0B,CACzB,IACA,KAED,4BAA6B,CAC5B,IACA,KAED,eAAgB,CACf,IACA,KAED,kBAAmB,CAClB,IACA,KAED,mBAAoB,CACnB,IACA,KAED,sBAAuB,CACtB,IACA,K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","file":"js/admin-f060e69e8ff6095d589c.chunk.js","sourcesContent":["import {\n  CommentOutlined,\n  DashboardOutlined,\n  FileTextOutlined,\n  LogoutOutlined,\n  MessageOutlined,\n  NotificationOutlined,\n  PayCircleOutlined,\n  SwapOutlined,\n  TableOutlined,\n  TransactionOutlined,\n  TrophyOutlined,\n  UserOutlined,\n  WalletOutlined,\n} from '@ant-design/icons';\nimport { Menu } from 'antd';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function Menus() {\n  return (\n    <Menu theme='dark'>\n      <div\n        style={{\n          height: '2rem',\n          margin: '1rem',\n          lineHeight: '2rem',\n          textAlign: 'center',\n        }}\n      >\n        Admin\n      </div>\n      <Menu.Item>\n        <Link to='/'>\n          <DashboardOutlined />\n          <span>Dashboard</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/users'>\n          <UserOutlined />\n          <span>Users</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/articles'>\n          <FileTextOutlined />\n          <span>Articles</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/comments'>\n          <CommentOutlined />\n          <span>Comments</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/payments'>\n          <PayCircleOutlined />\n          <span>Payments</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/swap_orders'>\n          <SwapOutlined />\n          <span>Swap Orders</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/transfers'>\n          <TransactionOutlined />\n          <span>Transfers</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/announcements'>\n          <NotificationOutlined />\n          <span>Announcements</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/mixin_messages'>\n          <MessageOutlined />\n          <span>Messages</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/mixin_network_snapshots'>\n          <TableOutlined />\n          <span>Snapshots</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/bonuses'>\n          <TrophyOutlined />\n          <span>Bonuses</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <Link to='/balance'>\n          <WalletOutlined />\n          <span>Balance</span>\n        </Link>\n      </Menu.Item>\n      <Menu.Item>\n        <a href='/admin/logout'>\n          <LogoutOutlined />\n          <span>Logout</span>\n        </a>\n      </Menu.Item>\n    </Menu>\n  );\n}\n","import { useAdminLoginMutation } from '@/graphql';\nimport { ClockCircleOutlined, UserOutlined } from '@ant-design/icons';\nimport { Button, Form, Input, Layout, message } from 'antd';\nimport React from 'react';\n\nconst { Content } = Layout;\n\nexport default function LoginPage() {\n  const [login] = useAdminLoginMutation({\n    update(\n      _,\n      {\n        data: {\n          adminLogin: { error },\n        },\n      },\n    ) {\n      if (error) {\n        message.error(error);\n      } else {\n        location.replace('/admin');\n      }\n    },\n  });\n\n  return (\n    <Layout className='layout'>\n      <Content style={{ display: 'flex', minHeight: '100vh' }}>\n        <Form\n          onFinish={(values: any) => {\n            login({ variables: { input: values } });\n          }}\n          style={{ width: 300, margin: 'auto' }}\n        >\n          <Form.Item\n            name='name'\n            rules={[{ required: true, message: 'Username' }]}\n          >\n            <Input\n              prefix={<UserOutlined style={{ color: 'rgba(0,0,0,.25)' }} />}\n              placeholder='Username'\n            />\n          </Form.Item>\n          <Form.Item\n            name='password'\n            rules={[{ required: true, message: 'Password' }]}\n          >\n            <Input\n              prefix={\n                <ClockCircleOutlined style={{ color: 'rgba(0,0,0,.25)' }} />\n              }\n              type='password'\n              placeholder='Password'\n            />\n          </Form.Item>\n          <Form.Item>\n            <Button\n              loading={false}\n              type='primary'\n              htmlType='submit'\n              className='login-form-button'\n            >\n              Log in\n            </Button>\n          </Form.Item>\n        </Form>\n      </Content>\n    </Layout>\n  );\n}\n","import { Button, Result } from 'antd';\nimport React from 'react';\nimport { Link, Route, Switch } from 'react-router-dom';\nimport AnnouncementsPage from './pages/AnnouncementsPage/AnnouncementsPage';\nimport ArticlePage from './pages/ArticlePage/ArticlePage';\nimport ArticlesPage from './pages/ArticlesPage/ArticlesPage';\nimport BalancePage from './pages/BalancePage/BalancePage';\nimport BonusesPage from './pages/BonusesPage/BonusesPage';\nimport CommentsPage from './pages/CommentsPage/CommentsPage';\nimport MixinMessagesPage from './pages/MixinMessagesPage/MixinMessagesPage';\nimport MixinNetworkSnapshotsPage from './pages/MixinNetworkSnapshotsPage/MixinNetworkSnapshotsPage';\nimport OverviewPage from './pages/OverviewPage/OverviewPage';\nimport PaymentsPage from './pages/PaymentsPage/PaymentsPage';\nimport SwapOrdersPage from './pages/SwapOrdersPage/SwapOrdersPage';\nimport TransfersPage from './pages/TransfersPage/TransfersPage';\nimport UsersPage from './pages/UsersPage/UsersPage';\n\nexport default function Routes() {\n  return (\n    <Switch>\n      <Route path='/' exact>\n        <OverviewPage />\n      </Route>\n      <Route path='/users' exact>\n        <UsersPage />\n      </Route>\n      <Route path='/articles' exact>\n        <ArticlesPage />\n      </Route>\n      <Route path='/articles/:uuid' exact>\n        <ArticlePage />\n      </Route>\n      <Route path='/comments' exact>\n        <CommentsPage />\n      </Route>\n      <Route path='/payments' exact>\n        <PaymentsPage />\n      </Route>\n      <Route path='/swap_orders' exact>\n        <SwapOrdersPage />\n      </Route>\n      <Route path='/transfers' exact>\n        <TransfersPage />\n      </Route>\n      <Route path='/mixin_messages' exact>\n        <MixinMessagesPage />\n      </Route>\n      <Route path='/mixin_network_snapshots' exact>\n        <MixinNetworkSnapshotsPage />\n      </Route>\n      <Route path='/announcements' exact>\n        <AnnouncementsPage />\n      </Route>\n      <Route path='/bonuses' exact>\n        <BonusesPage />\n      </Route>\n      <Route path='/balance' exact>\n        <BalancePage />\n      </Route>\n      <Route>\n        <Result\n          status='404'\n          title='404'\n          subTitle='Sorry, the page you visited does not exist.'\n          extra={\n            <Link to='/'>\n              <Button type='primary'>Back Home</Button>\n            </Link>\n          }\n        />\n      </Route>\n    </Switch>\n  );\n}\n","import LoadingComponent from '@admin/components/LoadingComponent/LoadingComponent';\nimport {\n  Announcement,\n  useAdminAnnouncementConnectionQuery,\n  useAdminCreateAnouncementMutation,\n  useAdminDeleteAnouncementMutation,\n  useAdminDeliverAnouncementMutation,\n  useAdminPreviewAnouncementMutation,\n  useAdminUpdateAnouncementMutation,\n} from '@graphql';\nimport {\n  Button,\n  Divider,\n  Input,\n  message,\n  Modal,\n  PageHeader,\n  Popconfirm,\n  Radio,\n  Table,\n} from 'antd';\nimport { ColumnProps } from 'antd/es/table';\nimport React, { useState } from 'react';\n\nexport default function AnnouncementsPage() {\n  const {\n    data,\n    loading,\n    fetchMore,\n    refetch,\n  } = useAdminAnnouncementConnectionQuery();\n  const [content, setContent] = useState('');\n  const [messageType, setMessageType] = useState<\n    'PLAIN_TEXT' | 'PLAIN_POST' | string\n  >('PLAIN_TEXT');\n  const [editing, setEditing] = useState(null);\n  const [modalVisible, setModalVisible] = useState(false);\n  const [createAnnouncement] = useAdminCreateAnouncementMutation({\n    update(\n      _,\n      {\n        data: {\n          adminCreateAnnouncement: { error },\n        },\n      },\n    ) {\n      if (error) {\n        message.error(error);\n      } else {\n        setModalVisible(false);\n        message.success('Created!');\n        refetch();\n      }\n    },\n  });\n  const [updateAnnouncement] = useAdminUpdateAnouncementMutation({\n    update(\n      _,\n      {\n        data: {\n          adminUpdateAnnouncement: { error },\n        },\n      },\n    ) {\n      if (error) {\n        message.error(error);\n      } else {\n        setModalVisible(false);\n        message.success('updated!');\n        refetch();\n      }\n    },\n  });\n  const [deleteAnnouncement] = useAdminDeleteAnouncementMutation({\n    update(\n      _,\n      {\n        data: {\n          adminDeleteAnnouncement: { error },\n        },\n      },\n    ) {\n      if (error) {\n        message.error(error);\n      } else {\n        message.success('deleted!');\n        refetch();\n      }\n    },\n  });\n  const [deliverAnnouncement] = useAdminDeliverAnouncementMutation({\n    update(\n      _,\n      {\n        data: {\n          adminDeliverAnnouncement: { error },\n        },\n      },\n    ) {\n      if (error) {\n        message.error(error);\n      } else {\n        message.success('delivered!');\n        refetch();\n      }\n    },\n  });\n  const [previewAnnouncement] = useAdminPreviewAnouncementMutation({\n    update(\n      _,\n      {\n        data: {\n          adminPreviewAnnouncement: { error },\n        },\n      },\n    ) {\n      if (error) {\n        message.error(error);\n      } else {\n        message.success('Check it in admin group!');\n        refetch();\n      }\n    },\n  });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n  const {\n    adminAnnouncementConnection: {\n      nodes: announcements,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  const columns: Array<ColumnProps<Announcement>> = [\n    {\n      dataIndex: 'id',\n      key: 'id',\n      title: 'ID',\n    },\n    {\n      dataIndex: 'messageType',\n      key: 'messageType',\n      title: 'messageType',\n    },\n    {\n      dataIndex: 'content',\n      key: 'content',\n      render: (content) => <div>{content}</div>,\n      title: 'content',\n    },\n    {\n      dataIndex: 'state',\n      key: 'state',\n      title: 'state',\n    },\n    {\n      dataIndex: 'deliveredAt',\n      key: 'deliveredAt',\n      render: (deliveredAt) => deliveredAt || '-',\n      title: 'deliveredAt',\n    },\n    {\n      dataIndex: 'actions',\n      key: 'actions',\n      render: (_, announcement) => (\n        <span>\n          <Popconfirm\n            title='Are you sure to deliver message to all users?'\n            onConfirm={() =>\n              deliverAnnouncement({\n                variables: { input: { id: announcement.id } },\n              })\n            }\n          >\n            <a>Deliver</a>\n          </Popconfirm>\n          <Divider type='vertical' />\n          <Popconfirm\n            title='Are you sure to deliver message to admin group for preview?'\n            onConfirm={() =>\n              previewAnnouncement({\n                variables: { input: { id: announcement.id } },\n              })\n            }\n          >\n            <a>Preview</a>\n          </Popconfirm>\n          <Divider type='vertical' />\n          <Popconfirm\n            title='Are you sure to delete?'\n            onConfirm={() =>\n              deleteAnnouncement({\n                variables: { input: { id: announcement.id } },\n              })\n            }\n          >\n            <a>Delete</a>\n          </Popconfirm>\n          <Divider type='vertical' />\n          <a\n            onClick={() => {\n              setEditing(announcement);\n              setContent(announcement.content);\n              setMessageType(announcement.messageType);\n              setModalVisible(true);\n            }}\n          >\n            Edit\n          </a>\n        </span>\n      ),\n      title: 'Actions',\n    },\n  ];\n\n  return (\n    <div>\n      <PageHeader title='Announcements' />\n      <div style={{ marginBottom: '1rem' }}>\n        <Button\n          type='primary'\n          onClick={() => {\n            setContent('');\n            setMessageType('PLAIN_TEXT');\n            setEditing(null);\n            setModalVisible(true);\n          }}\n        >\n          New\n        </Button>\n        <Modal\n          title={editing ? 'Edit' : 'New'}\n          closable={false}\n          visible={modalVisible}\n          onCancel={() => setModalVisible(false)}\n          onOk={() => {\n            if (editing) {\n              updateAnnouncement({\n                variables: {\n                  input: {\n                    id: editing.id,\n                    content,\n                    messageType,\n                  },\n                },\n              });\n            } else {\n              createAnnouncement({\n                variables: {\n                  input: {\n                    content,\n                    messageType,\n                  },\n                },\n              });\n            }\n          }}\n        >\n          <div>\n            <Input.TextArea\n              value={content}\n              onChange={(e) => setContent(e.currentTarget.value)}\n              autoSize={{ minRows: 3, maxRows: 10 }}\n            />\n          </div>\n          <div>\n            <Radio.Group\n              value={messageType}\n              onChange={(e) => setMessageType(e.target.value)}\n            >\n              <Radio value='PLAIN_TEXT'>Text</Radio>\n              <Radio value='PLAIN_POST'>Post</Radio>\n            </Radio.Group>\n          </div>\n        </Modal>\n      </div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={announcements}\n        rowKey='id'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import CommentsComponent from '@admin/components/CommentsComponent/CommentsComponent';\nimport LoadingComponent from '@admin/components/LoadingComponent/LoadingComponent';\nimport MixinNetworkSnapshotsComponent from '@admin/components/MixinNetworkSnapshotsComponent/MixinNetworkSnapshotComponent';\nimport OrdersComponent from '@admin/components/OrdersComponent/OrdersComponent';\nimport TransfersComponent from '@admin/components/TransfersComponent/TransfersComponent';\nimport WalletBalanceComponent from '@admin/components/WalletBalanceComponent/WalletBalanceComponent';\nimport { useAdminArticleQuery } from '@graphql';\nimport { Avatar, Descriptions, Empty, PageHeader, Space, Tabs } from 'antd';\nimport React from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\n\nexport default function ArticlePage() {\n  const { uuid } = useParams<{ uuid: string }>();\n  const history = useHistory();\n  const { loading, data } = useAdminArticleQuery({\n    variables: { uuid },\n  });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const { adminArticle: article } = data;\n\n  return (\n    <div>\n      <PageHeader title={article.title} onBack={() => history.goBack()} />\n      <Descriptions bordered size='small'>\n        <Descriptions.Item label='Title'>{article.title}</Descriptions.Item>\n        <Descriptions.Item label='Author'>\n          <Space>\n            <Avatar src={article.author.avatarUrl}>\n              {article.author.name[0]}\n            </Avatar>\n            {article.author.name}\n          </Space>\n        </Descriptions.Item>\n        <Descriptions.Item label='State'>{article.state}</Descriptions.Item>\n        <Descriptions.Item label='Price'>{article.price}</Descriptions.Item>\n        <Descriptions.Item label='OrdersCount'>\n          {article.ordersCount}\n        </Descriptions.Item>\n        <Descriptions.Item label='Revenue'>{article.revenue}</Descriptions.Item>\n        <Descriptions.Item label='Comments'>\n          {article.commentsCount}\n        </Descriptions.Item>\n        <Descriptions.Item label='createdAt'>\n          {article.createdAt}\n        </Descriptions.Item>\n      </Descriptions>\n      <Tabs defaultActiveKey='orders'>\n        <Tabs.TabPane tab='Orders' key='orders'>\n          <OrdersComponent itemId={article.id} itemType='Article' />\n        </Tabs.TabPane>\n        <Tabs.TabPane tab='Comments' key='comments'>\n          <CommentsComponent\n            commentableId={article.id}\n            commentableType='Article'\n          />\n        </Tabs.TabPane>\n        <Tabs.TabPane tab='Transfers' key='transfers'>\n          <TransfersComponent itemId={article.id} itemType='Article' />\n        </Tabs.TabPane>\n        <Tabs.TabPane tab='Wallet Balance' key='wallet_balance'>\n          {article.walletId ? (\n            <WalletBalanceComponent userId={article.walletId} />\n          ) : (\n            <Empty />\n          )}\n        </Tabs.TabPane>\n        <Tabs.TabPane tab='Wallet Snapshots' key='wallet_snapshots'>\n          {article.walletId ? (\n            <MixinNetworkSnapshotsComponent userId={article.walletId} />\n          ) : (\n            <Empty />\n          )}\n        </Tabs.TabPane>\n      </Tabs>\n    </div>\n  );\n}\n","import LoadingComponent from '@admin/components/LoadingComponent/LoadingComponent';\nimport { Order, useAdminOrderConnectionQuery } from '@graphql';\nimport { Avatar, Button, Space, Table } from 'antd';\nimport { ColumnProps } from 'antd/es/table';\nimport React from 'react';\n\nexport default function OrdersComponent(props: {\n  itemId?: string;\n  itemType?: string;\n}) {\n  const { itemId, itemType } = props;\n  const { loading, data, fetchMore } = useAdminOrderConnectionQuery({\n    variables: { itemId, itemType },\n  });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminOrderConnection: {\n      nodes: orders,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n  const columns: Array<ColumnProps<Order>> = [\n    {\n      dataIndex: 'traceId',\n      key: 'traceId',\n      title: 'traceId',\n    },\n    {\n      dataIndex: 'orderType',\n      key: 'orderType',\n      title: 'orderType',\n    },\n    {\n      dataIndex: 'buyer',\n      key: 'buyer',\n      render: (_, order) => (\n        <Space>\n          <Avatar src={order.buyer.avatarUrl} />\n          {order.buyer.name}\n        </Space>\n      ),\n      title: 'Buyer',\n    },\n    {\n      dataIndex: 'total',\n      key: 'total',\n      title: 'Total',\n    },\n    {\n      dataIndex: 'state',\n      key: 'state',\n      title: 'state',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'CreatedAt',\n    },\n  ];\n\n  return (\n    <div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={orders}\n        rowKey='traceId'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import LoadingComponent from '@admin/components/LoadingComponent/LoadingComponent';\nimport {\n  AdminArticleConnectionQueryHookResult,\n  Article as IArticle,\n  useAdminArticleConnectionQuery,\n  useAdminBlockArticleMutation,\n  useAdminUnblockArticleMutation,\n} from '@graphql';\nimport { useDebounce } from 'ahooks';\nimport {\n  Avatar,\n  Button,\n  Col,\n  Divider,\n  Input,\n  PageHeader,\n  Popconfirm,\n  Row,\n  Select,\n  Space,\n  Table,\n} from 'antd';\nimport { ColumnProps } from 'antd/es/table';\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default function ArticlesPage() {\n  const [query, setQuery] = useState('');\n  const [state, setState] = useState('published');\n  const debouncedQuery = useDebounce(query, { wait: 500 });\n  return (\n    <div>\n      <PageHeader title='Articles' />\n      <Row gutter={16} style={{ marginBottom: '1rem' }}>\n        <Col>\n          <Select\n            style={{ width: 200 }}\n            value={state}\n            onChange={(value) => setState(value)}\n          >\n            <Select.Option value='published'>Published</Select.Option>\n            <Select.Option value='hidden'>Hidden</Select.Option>\n            <Select.Option value='blocked'>Blocked</Select.Option>\n            <Select.Option value='all'>All</Select.Option>\n          </Select>\n        </Col>\n        <Col>\n          <Input\n            value={query}\n            placeholder='Query article'\n            onChange={(e) => setQuery(e.currentTarget.value)}\n          />\n        </Col>\n      </Row>\n      <ArticlesComponent query={debouncedQuery} state={state} />\n    </div>\n  );\n}\n\nfunction ArticlesComponent(props: { query?: string; state?: string }) {\n  const { query, state } = props;\n  const {\n    data,\n    loading,\n    fetchMore,\n  }: AdminArticleConnectionQueryHookResult = useAdminArticleConnectionQuery({\n    variables: { query, state },\n  });\n  const [block, { loading: blocking }] = useAdminBlockArticleMutation();\n  const [unblock, { loading: unblocking }] = useAdminUnblockArticleMutation();\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminArticleConnection: {\n      nodes: articles,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  const columns: Array<ColumnProps<IArticle>> = [\n    {\n      dataIndex: 'uuid',\n      key: 'uuid',\n      title: 'UUID',\n    },\n    {\n      dataIndex: 'author',\n      key: 'author',\n      render: (_, article) => (\n        <Space>\n          <Avatar src={article.author.avatarUrl} />\n          {article.author.name}\n        </Space>\n      ),\n      title: 'Author',\n    },\n    {\n      dataIndex: 'title',\n      key: 'title',\n      title: 'Title',\n    },\n    {\n      dataIndex: 'state',\n      key: 'state',\n      title: 'State',\n    },\n    {\n      dataIndex: 'revenue',\n      key: 'revenue',\n      title: 'Revenue',\n    },\n    {\n      dataIndex: 'commentsCount',\n      key: 'commentsCount',\n      title: 'Comments',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'CreatedAt',\n    },\n    {\n      dataIndex: 'actions',\n      key: 'actions',\n      render: (_, article) => (\n        <span>\n          {article.state === 'blocked' ? (\n            <Popconfirm\n              title='Are you sure to unblock this article?'\n              onConfirm={() =>\n                unblock({ variables: { input: { uuid: article.uuid } } })\n              }\n            >\n              <Button type='link' disabled={unblocking}>\n                UnBlock\n              </Button>\n            </Popconfirm>\n          ) : (\n            <Popconfirm\n              title='Are you sure to block this article?'\n              onConfirm={() =>\n                block({ variables: { input: { uuid: article.uuid } } })\n              }\n            >\n              <Button type='link' disabled={blocking}>\n                Block\n              </Button>\n            </Popconfirm>\n          )}\n          <Divider type='vertical' />\n          <Link to={`/articles/${article.uuid}`}>Detail</Link>\n          <Divider type='vertical' />\n          <a href={`/articles/${article.uuid}`} target='_blank'>\n            View\n          </a>\n        </span>\n      ),\n      title: 'Actions',\n    },\n  ];\n\n  return (\n    <div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={articles}\n        rowKey='uuid'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n                query,\n                state,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import WalletBalanceComponent from '@admin/components/WalletBalanceComponent/WalletBalanceComponent';\nimport { PageHeader } from 'antd';\nimport React from 'react';\n\nexport default function BalancePage() {\n  return (\n    <div>\n      <PageHeader title='Balance' />\n      <WalletBalanceComponent />\n    </div>\n  );\n}\n","import LoadingComponent from '@admin/components/LoadingComponent/LoadingComponent';\nimport {\n  Bonus,\n  useAdminBonusConnectionQuery,\n  useAdminDeliverBonusMutation,\n} from '@graphql';\nimport {\n  Avatar,\n  Button,\n  Divider,\n  message,\n  PageHeader,\n  Popconfirm,\n  Space,\n  Table,\n} from 'antd';\nimport { ColumnProps } from 'antd/es/table';\nimport React, { useState } from 'react';\nimport BonusesFormModalComponent from './components/BonusFormModalComponent';\n\nexport default function BonusesPage() {\n  const [modalVisible, setModalVisible] = useState(false);\n  const [editing, setEditing] = useState(null);\n\n  const { data, loading, fetchMore, refetch } = useAdminBonusConnectionQuery();\n  const [deliverBonus] = useAdminDeliverBonusMutation({\n    update(\n      _,\n      {\n        data: {\n          adminDeliverBonus: { state },\n        },\n      },\n    ) {\n      if (state !== 'drafted') {\n        message.success('Delivered!');\n      }\n    },\n  });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminBonusConnection: {\n      nodes: bonuses,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  const columns: Array<ColumnProps<Bonus>> = [\n    { dataIndex: 'id', key: 'id', title: 'ID' },\n    {\n      dataIndex: 'user',\n      key: 'user',\n      render: (_, bonus) => (\n        <Space>\n          <Avatar src={bonus.user.avatarUrl} />\n          <span>{bonus.user.name}</span>\n        </Space>\n      ),\n      title: 'User',\n    },\n    { dataIndex: 'title', key: 'title', title: 'Title' },\n    {\n      dataIndex: 'description',\n      key: 'description',\n      render: (description) => <div>{description || '-'}</div>,\n      title: 'Description',\n    },\n    { dataIndex: 'amount', key: 'amount', title: 'Amount' },\n    { dataIndex: 'state', key: 'state', title: 'state' },\n    { dataIndex: 'createdAt', key: 'createdAt', title: 'createdAt' },\n    {\n      dataIndex: 'snapshotId',\n      key: 'snapshotId',\n      render: (_, bonus) =>\n        bonus.transfer && bonus.transfer.snapshotId ? (\n          <a\n            href={`https://mixin/one/snapshots/${bonus.transfer.snapshotId}`}\n            target='_blank'\n          >\n            SnapshotId\n          </a>\n        ) : (\n          '-'\n        ),\n      title: 'snapshotId',\n    },\n    {\n      dataIndex: 'actions',\n      key: 'actions',\n      render: (_, bonus) => (\n        <span>\n          <Popconfirm\n            disabled={bonus.state !== 'drafted'}\n            title='Are you sure to deliver bonus to user?'\n            onConfirm={() =>\n              deliverBonus({ variables: { input: { id: bonus.id } } })\n            }\n          >\n            <Button\n              type='link'\n              disabled={bonus.state !== 'drafted'}\n              size='small'\n            >\n              Deliver\n            </Button>\n          </Popconfirm>\n          <Divider type='vertical' />\n          <Button\n            disabled={bonus.state !== 'drafted'}\n            onClick={() => {\n              setEditing(bonus);\n              setModalVisible(true);\n            }}\n            type='link'\n            size='small'\n          >\n            Edit\n          </Button>\n        </span>\n      ),\n      title: 'Actions',\n    },\n  ];\n  return (\n    <div>\n      <PageHeader title='Bonuses' />\n      <div style={{ marginBottom: '1rem' }}>\n        <Button\n          type='primary'\n          onClick={() => {\n            setEditing(null);\n            setModalVisible(true);\n          }}\n        >\n          New\n        </Button>\n        <BonusesFormModalComponent\n          visible={modalVisible}\n          editingBonus={editing}\n          onCancel={() => setModalVisible(false)}\n          refetchBonuses={refetch}\n        />\n      </div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={bonuses}\n        rowKey='id'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import {\n  Bonus,\n  useAdminCreateBonusMutation,\n  useAdminUpdateBonusMutation,\n  useAdminUserConnectionQuery,\n  User,\n} from '@graphql';\nimport { useDebounce } from 'ahooks';\nimport {\n  Form,\n  Input,\n  InputNumber,\n  message,\n  Modal,\n  Select,\n  Space,\n  Spin,\n} from 'antd';\nimport React, { useEffect, useState } from 'react';\n\nexport default function BonusesFormModalComponent(props: {\n  visible: boolean;\n  onCancel: () => any;\n  editingBonus?: Partial<Bonus>;\n  refetchBonuses?: () => any;\n}) {\n  const { visible, onCancel, editingBonus, refetchBonuses } = props;\n  const [query, setQuery] = useState(null);\n  const [bonusForm] = Form.useForm();\n  const debouncedQuery = useDebounce(query, { wait: 500 });\n  const { data, loading } = useAdminUserConnectionQuery({\n    notifyOnNetworkStatusChange: true,\n    variables: { query: debouncedQuery },\n  });\n  const [createBonus] = useAdminCreateBonusMutation({\n    update(\n      _,\n      {\n        data: {\n          adminCreateBonus: { error },\n        },\n      },\n    ) {\n      if (error) {\n        message.error(error);\n      } else {\n        message.success('success');\n        bonusForm.resetFields();\n        refetchBonuses();\n        onCancel();\n      }\n    },\n  });\n  const [updateBonus] = useAdminUpdateBonusMutation({\n    update(\n      _,\n      {\n        data: {\n          adminUpdateBonus: { error },\n        },\n      },\n    ) {\n      if (error) {\n        message.error(error);\n      } else {\n        message.success('success');\n        bonusForm.resetFields();\n        refetchBonuses();\n        onCancel();\n      }\n    },\n  });\n  useEffect(() => {\n    if (editingBonus) {\n      bonusForm.setFieldsValue({\n        userId: editingBonus.user.id,\n        title: editingBonus.title,\n        description: editingBonus.description,\n        amount: editingBonus.amount,\n      });\n    } else {\n      bonusForm.resetFields();\n    }\n  }, [editingBonus]);\n\n  const users = (data && data.adminUserConnection.nodes) || [];\n\n  return (\n    <Modal\n      title={editingBonus ? 'Edit' : 'New'}\n      visible={visible}\n      onCancel={onCancel}\n      onOk={() => bonusForm.submit()}\n    >\n      <Form\n        labelCol={{ span: 6 }}\n        form={bonusForm}\n        onFinish={(values) => {\n          if (editingBonus) {\n            updateBonus({\n              variables: { input: { ...values, id: editingBonus.id } },\n            });\n          } else {\n            createBonus({ variables: { input: values } });\n          }\n        }}\n      >\n        <Form.Item name='userId' label='User' rules={[{ required: true }]}>\n          <Select\n            showSearch\n            placeholder='Search user name/mixinId'\n            filterOption={false}\n            notFoundContent={loading ? <Spin size='small' /> : null}\n            onSearch={(value) => setQuery(value)}\n          >\n            {users.map((user: Partial<User>) => (\n              <Select.Option key={user.id} value={user.id}>\n                <Space>\n                  <span>{user.name}</span>\n                  <span>{user.mixinId}</span>\n                </Space>\n              </Select.Option>\n            ))}\n          </Select>\n        </Form.Item>\n        <Form.Item name='amount' label='Amount' rules={[{ required: true }]}>\n          <InputNumber min={1} precision={4} placeholder='0.0' />\n        </Form.Item>\n        <Form.Item name='title' label='Title' rules={[{ required: true }]}>\n          <Input />\n        </Form.Item>\n        <Form.Item name='description' label='Description'>\n          <Input.TextArea />\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n}\n","import CommentsComponent from '@admin/components/CommentsComponent/CommentsComponent';\nimport { PageHeader } from 'antd';\nimport React from 'react';\n\nexport default function CommentsPage() {\n  return (\n    <div>\n      <PageHeader title='Comments' />\n      <CommentsComponent />\n    </div>\n  );\n}\n","import LoadingComponent from '@admin/components/LoadingComponent/LoadingComponent';\nimport { MixinMessage, useAdminMixinMessageConnectionQuery } from '@graphql';\nimport { Avatar, Button, PageHeader, Space, Table } from 'antd';\nimport { ColumnProps } from 'antd/es/table';\nimport React from 'react';\n\nexport default function MixinMessagesPage() {\n  const { data, loading, fetchMore } = useAdminMixinMessageConnectionQuery();\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminMixinMessageConnection: {\n      nodes: messages,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  const columns: Array<ColumnProps<MixinMessage>> = [\n    {\n      dataIndex: 'action',\n      key: 'action',\n      title: 'Action',\n    },\n    {\n      dataIndex: 'category',\n      key: 'category',\n      title: 'category',\n    },\n    {\n      dataIndex: 'user',\n      key: 'user',\n      render: (_, message) =>\n        message.user ? (\n          <Space>\n            <Avatar src={message.user.avatarUrl} />\n            {message.user.name}\n            {message.user.mixinId}\n          </Space>\n        ) : (\n          message.userId\n        ),\n      title: 'User',\n    },\n    {\n      dataIndex: 'content',\n      key: 'content',\n      render: (content) => <div style={{ maxWidth: '100%' }}>{content}</div>,\n      title: 'content',\n    },\n    {\n      dataIndex: 'processedAt',\n      key: 'processedAt',\n      title: 'processedAt',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'createdAt',\n    },\n  ];\n\n  return (\n    <div>\n      <PageHeader title='Mixin Messages' />\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={messages}\n        rowKey='id'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import MixinNetworkSnapshotsComponent from '@admin/components/MixinNetworkSnapshotsComponent/MixinNetworkSnapshotComponent';\nimport { Col, PageHeader, Row, Select } from 'antd';\nimport React, { useState } from 'react';\n\nexport default function MixinNetworkSnapshotsPage() {\n  const [filter, setFilter] = useState<'input' | 'output' | 'prsdigg' | 'all'>(\n    'input',\n  );\n  return (\n    <div>\n      <PageHeader title='Mixin Network Snapshot' />\n      <Row gutter={16} style={{ marginBottom: '1rem' }}>\n        <Col>\n          <Select\n            style={{ width: 200 }}\n            value={filter}\n            onChange={(value) => setFilter(value)}\n          >\n            <Select.Option value='input'>Input</Select.Option>\n            <Select.Option value='output'>Output</Select.Option>\n            <Select.Option value='prsdigg'>PRSDigg</Select.Option>\n            <Select.Option value='4swap'>4swap</Select.Option>\n            <Select.Option value='all'>All</Select.Option>\n          </Select>\n        </Col>\n      </Row>\n      <MixinNetworkSnapshotsComponent filter={filter} />\n    </div>\n  );\n}\n","import {\n  useArticleChartQuery,\n  useRevenueChartQuery,\n  useStatisticsQuery,\n  useUserChartQuery,\n} from '@/graphql';\nimport LoadingComponent from '@admin/components/LoadingComponent/LoadingComponent';\nimport { Col, PageHeader, Row, Statistic } from 'antd';\nimport React from 'react';\nimport {\n  Area,\n  AreaChart,\n  CartesianGrid,\n  ResponsiveContainer,\n  Tooltip,\n  XAxis,\n  YAxis,\n} from 'recharts';\n\nexport default function OverviewPage() {\n  const { data, loading } = useStatisticsQuery();\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    statistics: {\n      usersCount,\n      articlesCount,\n      authorRevenueAmount,\n      readerRevenueAmount,\n    },\n  } = data;\n\n  return (\n    <div>\n      <PageHeader title='Dashboard' />\n      <Row\n        style={{ padding: 20, textAlign: 'center' }}\n        gutter={16}\n        justify='space-around'\n      >\n        <Col span={12}>\n          <Statistic title='用户总量' value={usersCount} />\n        </Col>\n        <Col span={12}>\n          <Statistic title='文章总数' value={articlesCount} />\n        </Col>\n        <Col span={12}>\n          <Statistic title='作者收益' value={authorRevenueAmount} />\n        </Col>\n        <Col span={12}>\n          <Statistic title='读者收益' value={readerRevenueAmount} />\n        </Col>\n      </Row>\n      <UserChart />\n      <ArticleChart />\n      <RevenueChart />\n    </div>\n  );\n}\n\nfunction UserChart() {\n  const { loading, data } = useUserChartQuery();\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  let { userChart } = data;\n  try {\n    userChart = JSON.parse(userChart);\n  } catch {\n    userChart = [];\n  }\n\n  return (\n    <div>\n      <h3>User Chart</h3>\n      <AreaChartComponent data={userChart} />\n    </div>\n  );\n}\n\nfunction ArticleChart() {\n  const { loading, data } = useArticleChartQuery();\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  let { articleChart } = data;\n  try {\n    articleChart = JSON.parse(articleChart);\n  } catch {\n    articleChart = [];\n  }\n\n  return (\n    <div>\n      <h3>Article Chart</h3>\n      <AreaChartComponent data={articleChart} />\n    </div>\n  );\n}\n\nfunction RevenueChart() {\n  const { loading, data } = useRevenueChartQuery();\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  let { revenueChart } = data;\n  try {\n    revenueChart = JSON.parse(revenueChart);\n  } catch {\n    revenueChart = [];\n  }\n\n  return (\n    <div>\n      <h3>Revenue Chart</h3>\n      <AreaChartComponent data={revenueChart} />\n    </div>\n  );\n}\n\nfunction AreaChartComponent(props: { data: any }) {\n  return (\n    <ResponsiveContainer height={250}>\n      <AreaChart\n        data={props.data}\n        margin={{ top: 10, right: 30, left: 0, bottom: 0 }}\n      >\n        <defs>\n          <linearGradient id='colorUser' x1='0' y1='0' x2='0' y2='1'>\n            <stop offset='5%' stopColor='#8884d8' stopOpacity={0.8} />\n            <stop offset='95%' stopColor='#8884d8' stopOpacity={0} />\n          </linearGradient>\n        </defs>\n        <XAxis dataKey='name' />\n        <YAxis />\n        <CartesianGrid strokeDasharray='3 3' />\n        <Tooltip />\n        <Area\n          type='monotone'\n          dataKey='value'\n          stroke='#8884d8'\n          fillOpacity={1}\n          fill='url(#colorUser)'\n        />\n      </AreaChart>\n    </ResponsiveContainer>\n  );\n}\n","import { SUPPORTED_TOKENS } from '@/shared';\nimport LoadingComponent from '@admin/components/LoadingComponent/LoadingComponent';\nimport { Payment as IPayment, useAdminPaymentConnectionQuery } from '@graphql';\nimport { Avatar, Button, PageHeader, Space, Table } from 'antd';\nimport { ColumnProps } from 'antd/es/table';\nimport React from 'react';\n\nexport default function PaymentsPage() {\n  const { data, loading, fetchMore } = useAdminPaymentConnectionQuery();\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminPaymentConnection: {\n      nodes: payments,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n  const columns: Array<ColumnProps<IPayment>> = [\n    {\n      dataIndex: 'traceId',\n      key: 'traceId',\n      title: 'Trace ID',\n    },\n    {\n      dataIndex: 'payer',\n      key: 'payer',\n      render: (_, payment) => (\n        <Space>\n          <Avatar src={payment.payer.avatarUrl} />\n          <span>\n            {payment.payer.name}({payment.payer.mixinId})\n          </span>\n        </Space>\n      ),\n      title: 'Author',\n    },\n    {\n      dataIndex: 'amount',\n      key: 'amount',\n      render: (amount, payment) => (\n        <Space>\n          <Avatar\n            src={\n              SUPPORTED_TOKENS.find(\n                (token) => token.assetId === payment.assetId,\n              )?.iconUrl\n            }\n          />\n          <span>{amount}</span>\n        </Space>\n      ),\n      title: 'Amount',\n    },\n    {\n      dataIndex: 'state',\n      key: 'state',\n      title: 'state',\n    },\n    {\n      dataIndex: 'orderType',\n      key: 'orderType',\n      render: (_, payment) => (\n        <span>{payment.order ? payment.order.orderType : '-'}</span>\n      ),\n      title: 'orderType',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'Created At',\n    },\n    {\n      dataIndex: 'snapshotId',\n      key: 'snapshotId',\n      render: (snapshotId) => (\n        <a href={`https://mixin.one/snapshots/${snapshotId}`} target='_blank'>\n          View\n        </a>\n      ),\n      title: 'Snapshot',\n    },\n  ];\n\n  return (\n    <div>\n      <PageHeader title='Payments' />\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={payments}\n        rowKey='traceId'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { SUPPORTED_TOKENS } from '@/shared';\nimport LoadingComponent from '@admin/components/LoadingComponent/LoadingComponent';\nimport { SwapOrder, useAdminSwapOrderConnectionQuery } from '@graphql';\nimport { Avatar, Button, PageHeader, Space, Table } from 'antd';\nimport { ColumnProps } from 'antd/es/table';\nimport React from 'react';\n\nexport default function SwapOrdersPage() {\n  const { data, loading, fetchMore } = useAdminSwapOrderConnectionQuery();\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminSwapOrderConnection: {\n      nodes: swapOrders,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  const columns: Array<ColumnProps<SwapOrder>> = [\n    { dataIndex: 'traceId', key: 'traceId', title: 'Trace ID' },\n    {\n      dataIndex: 'payer',\n      key: 'payer',\n      render: (_, swapOrder) => (\n        <Space>\n          <Avatar src={swapOrder.payer.avatarUrl} />\n          <span>{swapOrder.payer.name}</span>\n          <span>({swapOrder.payer.mixinId})</span>\n        </Space>\n      ),\n      title: 'Payer',\n    },\n    { dataIndex: 'state', key: 'state', title: 'State' },\n    {\n      dataIndex: 'funds',\n      key: 'funds',\n      render: (funds, swapOrder) => (\n        <Space>\n          <Avatar\n            src={\n              SUPPORTED_TOKENS.find(\n                (token) => token.assetId === swapOrder.payAssetId,\n              )?.iconUrl\n            }\n          />\n          <span>{funds}</span>\n        </Space>\n      ),\n      title: 'funds',\n    },\n    {\n      dataIndex: 'amount',\n      key: 'amount',\n      render: (amount, swapOrder) => (\n        <Space>\n          <Avatar\n            src={\n              SUPPORTED_TOKENS.find(\n                (token) => token.assetId === swapOrder.fillAssetId,\n              )?.iconUrl\n            }\n          />\n          <span>{amount || '-'}</span>\n        </Space>\n      ),\n      title: 'amount',\n    },\n    {\n      dataIndex: 'minAmount',\n      key: 'minAmount',\n      render: (minAmount) => minAmount || '-',\n      title: 'minAmount',\n    },\n    { dataIndex: 'createdAt', key: 'createdAt', title: 'createdAt' },\n  ];\n\n  return (\n    <div>\n      <PageHeader title='Swap Orders' />\n      <Table\n        scroll={{ x: true }}\n        dataSource={swapOrders}\n        columns={columns}\n        rowKey='traceId'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import TransfersComponent from '@admin/components/TransfersComponent/TransfersComponent';\nimport { PageHeader } from 'antd';\nimport React from 'react';\n\nexport default function TransfersPage() {\n  return (\n    <div>\n      <PageHeader title='Transfers' />\n      <TransfersComponent />\n    </div>\n  );\n}\n","import LoadingComponent from '@admin/components/LoadingComponent/LoadingComponent';\nimport {\n  AdminUserConnectionQueryHookResult,\n  useAdminBanUserMutation,\n  useAdminUnbanUserMutation,\n  useAdminUserConnectionQuery,\n  User as IUser,\n} from '@graphql';\nimport { useDebounce } from 'ahooks';\nimport {\n  Avatar,\n  Button,\n  Col,\n  Input,\n  PageHeader,\n  Popconfirm,\n  Popover,\n  Row,\n  Select,\n  Space,\n} from 'antd';\nimport Table, { ColumnProps } from 'antd/lib/table';\nimport React, { useState } from 'react';\n\nexport default function UsersPage() {\n  const [query, setQuery] = useState('');\n  const [orderBy, setOrderBy] = useState('default');\n  const [filter, setFilter] = useState('without_banned');\n  const debouncedQuery = useDebounce(query, { wait: 500 });\n  return (\n    <div>\n      <PageHeader title='Users' />\n      <Row gutter={16} style={{ marginBottom: '1rem' }}>\n        <Col>\n          <Select\n            style={{ width: 200 }}\n            value={orderBy}\n            onChange={(value) => setOrderBy(value)}\n          >\n            <Select.Option value='default'>Default Order</Select.Option>\n            <Select.Option value='revenue_total'>\n              Revenue Total DESC\n            </Select.Option>\n            <Select.Option value='payment_total'>\n              Payment Total DESC\n            </Select.Option>\n            <Select.Option value='articles_count'>\n              Articles Count DESC\n            </Select.Option>\n            <Select.Option value='comments_count'>\n              Comments Count DESC\n            </Select.Option>\n          </Select>\n        </Col>\n        <Col>\n          <Select\n            style={{ width: 200 }}\n            value={filter}\n            onChange={(value) => setFilter(value)}\n          >\n            <Select.Option value='without_banned'>Without Banned</Select.Option>\n            <Select.Option value='only_banned'>Only Banned</Select.Option>\n            <Select.Option value='all'>All</Select.Option>\n          </Select>\n        </Col>\n        <Col>\n          <Input\n            value={query}\n            placeholder='Query user name/mixinId'\n            onChange={(e) => setQuery(e.currentTarget.value)}\n          />\n        </Col>\n      </Row>\n      <UsersComponent\n        orderBy={orderBy}\n        query={debouncedQuery}\n        filter={filter}\n      />\n    </div>\n  );\n}\n\nexport function UsersComponent(props: {\n  query?: string;\n  orderBy?: string;\n  filter?: string;\n}) {\n  const { query, orderBy, filter } = props;\n  const {\n    data,\n    loading,\n    fetchMore,\n  }: AdminUserConnectionQueryHookResult = useAdminUserConnectionQuery({\n    variables: { query, orderBy, filter },\n  });\n  const [adminBanUser] = useAdminBanUserMutation();\n  const [adminUnbanUser] = useAdminUnbanUserMutation();\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminUserConnection: {\n      nodes: users,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  const columns: Array<ColumnProps<IUser>> = [\n    {\n      dataIndex: 'mixinId',\n      key: 'mixinId',\n      render: (mixinId, user) => (\n        <Popover title='mixin UUID' content={user.mixinUuid}>\n          {mixinId}\n        </Popover>\n      ),\n      title: 'Mixin ID',\n    },\n    {\n      dataIndex: 'name',\n      key: 'name',\n      render: (name, user) => (\n        <Space>\n          <Avatar src={user.avatarUrl} />\n          {name}\n        </Space>\n      ),\n      title: 'Name',\n    },\n    {\n      dataIndex: 'articlesCount',\n      key: 'articlesCount',\n      render: (_, user) => user.statistics.articlesCount,\n      title: 'Articles',\n    },\n    {\n      dataIndex: 'commentsCount',\n      key: 'commentsCount',\n      render: (_, user) => user.statistics.commentsCount,\n      title: 'Comments',\n    },\n    {\n      dataIndex: 'revenueTotal',\n      key: 'revenueTotal',\n      render: (_, user) => user.statistics.revenueTotal,\n      title: 'Revenue Total',\n    },\n    {\n      dataIndex: 'paymentTotal',\n      key: 'paymentTotal',\n      render: (_, user) => user.statistics.paymentTotal,\n      title: 'Payment Total',\n    },\n    {\n      dataIndex: 'bannedAt',\n      key: 'bannedAt',\n      render: (bannedAt) => bannedAt || '-',\n      title: 'Banned At',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'Created At',\n    },\n    {\n      dataIndex: 'Actions',\n      key: 'actions',\n      render: (_, user) => (\n        <span>\n          {user.bannedAt ? (\n            <Popconfirm\n              title='Are you sure to unBan this user?'\n              onConfirm={() =>\n                adminUnbanUser({\n                  variables: { input: { id: user.id } },\n                })\n              }\n            >\n              <Button type='link'>unBan</Button>\n            </Popconfirm>\n          ) : (\n            <Popconfirm\n              title='Are you sure to BAN this user?'\n              onConfirm={() =>\n                adminBanUser({\n                  variables: { input: { id: user.id } },\n                })\n              }\n            >\n              <Button type='link'>Ban</Button>\n            </Popconfirm>\n          )}\n        </span>\n      ),\n    },\n  ];\n\n  return (\n    <div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={users}\n        rowKey='mixinId'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                filter,\n                query,\n                orderBy,\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","var map = {\n\t\"./prism-abap\": [\n\t\t280,\n\t\t2\n\t],\n\t\"./prism-abap.js\": [\n\t\t280,\n\t\t2\n\t],\n\t\"./prism-abap.min\": [\n\t\t281,\n\t\t3\n\t],\n\t\"./prism-abap.min.js\": [\n\t\t281,\n\t\t3\n\t],\n\t\"./prism-abnf\": [\n\t\t282,\n\t\t4\n\t],\n\t\"./prism-abnf.js\": [\n\t\t282,\n\t\t4\n\t],\n\t\"./prism-abnf.min\": [\n\t\t283,\n\t\t5\n\t],\n\t\"./prism-abnf.min.js\": [\n\t\t283,\n\t\t5\n\t],\n\t\"./prism-actionscript\": [\n\t\t284,\n\t\t6\n\t],\n\t\"./prism-actionscript.js\": [\n\t\t284,\n\t\t6\n\t],\n\t\"./prism-actionscript.min\": [\n\t\t285,\n\t\t7\n\t],\n\t\"./prism-actionscript.min.js\": [\n\t\t285,\n\t\t7\n\t],\n\t\"./prism-ada\": [\n\t\t286,\n\t\t8\n\t],\n\t\"./prism-ada.js\": [\n\t\t286,\n\t\t8\n\t],\n\t\"./prism-ada.min\": [\n\t\t287,\n\t\t9\n\t],\n\t\"./prism-ada.min.js\": [\n\t\t287,\n\t\t9\n\t],\n\t\"./prism-agda\": [\n\t\t288,\n\t\t10\n\t],\n\t\"./prism-agda.js\": [\n\t\t288,\n\t\t10\n\t],\n\t\"./prism-agda.min\": [\n\t\t289,\n\t\t11\n\t],\n\t\"./prism-agda.min.js\": [\n\t\t289,\n\t\t11\n\t],\n\t\"./prism-al\": [\n\t\t290,\n\t\t12\n\t],\n\t\"./prism-al.js\": [\n\t\t290,\n\t\t12\n\t],\n\t\"./prism-al.min\": [\n\t\t291,\n\t\t13\n\t],\n\t\"./prism-al.min.js\": [\n\t\t291,\n\t\t13\n\t],\n\t\"./prism-antlr4\": [\n\t\t292,\n\t\t14\n\t],\n\t\"./prism-antlr4.js\": [\n\t\t292,\n\t\t14\n\t],\n\t\"./prism-antlr4.min\": [\n\t\t293,\n\t\t15\n\t],\n\t\"./prism-antlr4.min.js\": [\n\t\t293,\n\t\t15\n\t],\n\t\"./prism-apacheconf\": [\n\t\t294,\n\t\t16\n\t],\n\t\"./prism-apacheconf.js\": [\n\t\t294,\n\t\t16\n\t],\n\t\"./prism-apacheconf.min\": [\n\t\t295,\n\t\t17\n\t],\n\t\"./prism-apacheconf.min.js\": [\n\t\t295,\n\t\t17\n\t],\n\t\"./prism-apl\": [\n\t\t296,\n\t\t18\n\t],\n\t\"./prism-apl.js\": [\n\t\t296,\n\t\t18\n\t],\n\t\"./prism-apl.min\": [\n\t\t297,\n\t\t19\n\t],\n\t\"./prism-apl.min.js\": [\n\t\t297,\n\t\t19\n\t],\n\t\"./prism-applescript\": [\n\t\t298,\n\t\t20\n\t],\n\t\"./prism-applescript.js\": [\n\t\t298,\n\t\t20\n\t],\n\t\"./prism-applescript.min\": [\n\t\t299,\n\t\t21\n\t],\n\t\"./prism-applescript.min.js\": [\n\t\t299,\n\t\t21\n\t],\n\t\"./prism-aql\": [\n\t\t300,\n\t\t22\n\t],\n\t\"./prism-aql.js\": [\n\t\t300,\n\t\t22\n\t],\n\t\"./prism-aql.min\": [\n\t\t301,\n\t\t23\n\t],\n\t\"./prism-aql.min.js\": [\n\t\t301,\n\t\t23\n\t],\n\t\"./prism-arduino\": [\n\t\t302,\n\t\t24\n\t],\n\t\"./prism-arduino.js\": [\n\t\t302,\n\t\t24\n\t],\n\t\"./prism-arduino.min\": [\n\t\t303,\n\t\t25\n\t],\n\t\"./prism-arduino.min.js\": [\n\t\t303,\n\t\t25\n\t],\n\t\"./prism-arff\": [\n\t\t304,\n\t\t26\n\t],\n\t\"./prism-arff.js\": [\n\t\t304,\n\t\t26\n\t],\n\t\"./prism-arff.min\": [\n\t\t305,\n\t\t27\n\t],\n\t\"./prism-arff.min.js\": [\n\t\t305,\n\t\t27\n\t],\n\t\"./prism-asciidoc\": [\n\t\t306,\n\t\t28\n\t],\n\t\"./prism-asciidoc.js\": [\n\t\t306,\n\t\t28\n\t],\n\t\"./prism-asciidoc.min\": [\n\t\t307,\n\t\t29\n\t],\n\t\"./prism-asciidoc.min.js\": [\n\t\t307,\n\t\t29\n\t],\n\t\"./prism-asm6502\": [\n\t\t308,\n\t\t30\n\t],\n\t\"./prism-asm6502.js\": [\n\t\t308,\n\t\t30\n\t],\n\t\"./prism-asm6502.min\": [\n\t\t309,\n\t\t31\n\t],\n\t\"./prism-asm6502.min.js\": [\n\t\t309,\n\t\t31\n\t],\n\t\"./prism-aspnet\": [\n\t\t310,\n\t\t32\n\t],\n\t\"./prism-aspnet.js\": [\n\t\t310,\n\t\t32\n\t],\n\t\"./prism-aspnet.min\": [\n\t\t311,\n\t\t33\n\t],\n\t\"./prism-aspnet.min.js\": [\n\t\t311,\n\t\t33\n\t],\n\t\"./prism-autohotkey\": [\n\t\t312,\n\t\t34\n\t],\n\t\"./prism-autohotkey.js\": [\n\t\t312,\n\t\t34\n\t],\n\t\"./prism-autohotkey.min\": [\n\t\t313,\n\t\t35\n\t],\n\t\"./prism-autohotkey.min.js\": [\n\t\t313,\n\t\t35\n\t],\n\t\"./prism-autoit\": [\n\t\t314,\n\t\t36\n\t],\n\t\"./prism-autoit.js\": [\n\t\t314,\n\t\t36\n\t],\n\t\"./prism-autoit.min\": [\n\t\t315,\n\t\t37\n\t],\n\t\"./prism-autoit.min.js\": [\n\t\t315,\n\t\t37\n\t],\n\t\"./prism-bash\": [\n\t\t316,\n\t\t38\n\t],\n\t\"./prism-bash.js\": [\n\t\t316,\n\t\t38\n\t],\n\t\"./prism-bash.min\": [\n\t\t317,\n\t\t39\n\t],\n\t\"./prism-bash.min.js\": [\n\t\t317,\n\t\t39\n\t],\n\t\"./prism-basic\": [\n\t\t318,\n\t\t40\n\t],\n\t\"./prism-basic.js\": [\n\t\t318,\n\t\t40\n\t],\n\t\"./prism-basic.min\": [\n\t\t319,\n\t\t41\n\t],\n\t\"./prism-basic.min.js\": [\n\t\t319,\n\t\t41\n\t],\n\t\"./prism-batch\": [\n\t\t320,\n\t\t42\n\t],\n\t\"./prism-batch.js\": [\n\t\t320,\n\t\t42\n\t],\n\t\"./prism-batch.min\": [\n\t\t321,\n\t\t43\n\t],\n\t\"./prism-batch.min.js\": [\n\t\t321,\n\t\t43\n\t],\n\t\"./prism-bbcode\": [\n\t\t322,\n\t\t44\n\t],\n\t\"./prism-bbcode.js\": [\n\t\t322,\n\t\t44\n\t],\n\t\"./prism-bbcode.min\": [\n\t\t323,\n\t\t45\n\t],\n\t\"./prism-bbcode.min.js\": [\n\t\t323,\n\t\t45\n\t],\n\t\"./prism-birb\": [\n\t\t324,\n\t\t46\n\t],\n\t\"./prism-birb.js\": [\n\t\t324,\n\t\t46\n\t],\n\t\"./prism-birb.min\": [\n\t\t325,\n\t\t47\n\t],\n\t\"./prism-birb.min.js\": [\n\t\t325,\n\t\t47\n\t],\n\t\"./prism-bison\": [\n\t\t326,\n\t\t48\n\t],\n\t\"./prism-bison.js\": [\n\t\t326,\n\t\t48\n\t],\n\t\"./prism-bison.min\": [\n\t\t327,\n\t\t49\n\t],\n\t\"./prism-bison.min.js\": [\n\t\t327,\n\t\t49\n\t],\n\t\"./prism-bnf\": [\n\t\t328,\n\t\t50\n\t],\n\t\"./prism-bnf.js\": [\n\t\t328,\n\t\t50\n\t],\n\t\"./prism-bnf.min\": [\n\t\t329,\n\t\t51\n\t],\n\t\"./prism-bnf.min.js\": [\n\t\t329,\n\t\t51\n\t],\n\t\"./prism-brainfuck\": [\n\t\t330,\n\t\t52\n\t],\n\t\"./prism-brainfuck.js\": [\n\t\t330,\n\t\t52\n\t],\n\t\"./prism-brainfuck.min\": [\n\t\t331,\n\t\t53\n\t],\n\t\"./prism-brainfuck.min.js\": [\n\t\t331,\n\t\t53\n\t],\n\t\"./prism-brightscript\": [\n\t\t332,\n\t\t54\n\t],\n\t\"./prism-brightscript.js\": [\n\t\t332,\n\t\t54\n\t],\n\t\"./prism-brightscript.min\": [\n\t\t333,\n\t\t55\n\t],\n\t\"./prism-brightscript.min.js\": [\n\t\t333,\n\t\t55\n\t],\n\t\"./prism-bro\": [\n\t\t334,\n\t\t56\n\t],\n\t\"./prism-bro.js\": [\n\t\t334,\n\t\t56\n\t],\n\t\"./prism-bro.min\": [\n\t\t335,\n\t\t57\n\t],\n\t\"./prism-bro.min.js\": [\n\t\t335,\n\t\t57\n\t],\n\t\"./prism-bsl\": [\n\t\t336,\n\t\t58\n\t],\n\t\"./prism-bsl.js\": [\n\t\t336,\n\t\t58\n\t],\n\t\"./prism-bsl.min\": [\n\t\t337,\n\t\t59\n\t],\n\t\"./prism-bsl.min.js\": [\n\t\t337,\n\t\t59\n\t],\n\t\"./prism-c\": [\n\t\t338,\n\t\t60\n\t],\n\t\"./prism-c.js\": [\n\t\t338,\n\t\t60\n\t],\n\t\"./prism-c.min\": [\n\t\t339,\n\t\t61\n\t],\n\t\"./prism-c.min.js\": [\n\t\t339,\n\t\t61\n\t],\n\t\"./prism-cil\": [\n\t\t340,\n\t\t62\n\t],\n\t\"./prism-cil.js\": [\n\t\t340,\n\t\t62\n\t],\n\t\"./prism-cil.min\": [\n\t\t341,\n\t\t63\n\t],\n\t\"./prism-cil.min.js\": [\n\t\t341,\n\t\t63\n\t],\n\t\"./prism-clike\": [\n\t\t342,\n\t\t64\n\t],\n\t\"./prism-clike.js\": [\n\t\t342,\n\t\t64\n\t],\n\t\"./prism-clike.min\": [\n\t\t343,\n\t\t65\n\t],\n\t\"./prism-clike.min.js\": [\n\t\t343,\n\t\t65\n\t],\n\t\"./prism-clojure\": [\n\t\t344,\n\t\t66\n\t],\n\t\"./prism-clojure.js\": [\n\t\t344,\n\t\t66\n\t],\n\t\"./prism-clojure.min\": [\n\t\t345,\n\t\t67\n\t],\n\t\"./prism-clojure.min.js\": [\n\t\t345,\n\t\t67\n\t],\n\t\"./prism-cmake\": [\n\t\t346,\n\t\t68\n\t],\n\t\"./prism-cmake.js\": [\n\t\t346,\n\t\t68\n\t],\n\t\"./prism-cmake.min\": [\n\t\t347,\n\t\t69\n\t],\n\t\"./prism-cmake.min.js\": [\n\t\t347,\n\t\t69\n\t],\n\t\"./prism-coffeescript\": [\n\t\t348,\n\t\t70\n\t],\n\t\"./prism-coffeescript.js\": [\n\t\t348,\n\t\t70\n\t],\n\t\"./prism-coffeescript.min\": [\n\t\t349,\n\t\t71\n\t],\n\t\"./prism-coffeescript.min.js\": [\n\t\t349,\n\t\t71\n\t],\n\t\"./prism-concurnas\": [\n\t\t350,\n\t\t72\n\t],\n\t\"./prism-concurnas.js\": [\n\t\t350,\n\t\t72\n\t],\n\t\"./prism-concurnas.min\": [\n\t\t351,\n\t\t73\n\t],\n\t\"./prism-concurnas.min.js\": [\n\t\t351,\n\t\t73\n\t],\n\t\"./prism-core\": [\n\t\t352,\n\t\t74\n\t],\n\t\"./prism-core.js\": [\n\t\t352,\n\t\t74\n\t],\n\t\"./prism-core.min\": [\n\t\t353,\n\t\t75\n\t],\n\t\"./prism-core.min.js\": [\n\t\t353,\n\t\t75\n\t],\n\t\"./prism-cpp\": [\n\t\t354,\n\t\t76\n\t],\n\t\"./prism-cpp.js\": [\n\t\t354,\n\t\t76\n\t],\n\t\"./prism-cpp.min\": [\n\t\t355,\n\t\t77\n\t],\n\t\"./prism-cpp.min.js\": [\n\t\t355,\n\t\t77\n\t],\n\t\"./prism-crystal\": [\n\t\t356,\n\t\t78\n\t],\n\t\"./prism-crystal.js\": [\n\t\t356,\n\t\t78\n\t],\n\t\"./prism-crystal.min\": [\n\t\t357,\n\t\t79\n\t],\n\t\"./prism-crystal.min.js\": [\n\t\t357,\n\t\t79\n\t],\n\t\"./prism-csharp\": [\n\t\t358,\n\t\t80\n\t],\n\t\"./prism-csharp.js\": [\n\t\t358,\n\t\t80\n\t],\n\t\"./prism-csharp.min\": [\n\t\t359,\n\t\t81\n\t],\n\t\"./prism-csharp.min.js\": [\n\t\t359,\n\t\t81\n\t],\n\t\"./prism-csp\": [\n\t\t360,\n\t\t82\n\t],\n\t\"./prism-csp.js\": [\n\t\t360,\n\t\t82\n\t],\n\t\"./prism-csp.min\": [\n\t\t361,\n\t\t83\n\t],\n\t\"./prism-csp.min.js\": [\n\t\t361,\n\t\t83\n\t],\n\t\"./prism-css\": [\n\t\t364,\n\t\t86\n\t],\n\t\"./prism-css-extras\": [\n\t\t362,\n\t\t84\n\t],\n\t\"./prism-css-extras.js\": [\n\t\t362,\n\t\t84\n\t],\n\t\"./prism-css-extras.min\": [\n\t\t363,\n\t\t85\n\t],\n\t\"./prism-css-extras.min.js\": [\n\t\t363,\n\t\t85\n\t],\n\t\"./prism-css.js\": [\n\t\t364,\n\t\t86\n\t],\n\t\"./prism-css.min\": [\n\t\t365,\n\t\t87\n\t],\n\t\"./prism-css.min.js\": [\n\t\t365,\n\t\t87\n\t],\n\t\"./prism-cypher\": [\n\t\t366,\n\t\t88\n\t],\n\t\"./prism-cypher.js\": [\n\t\t366,\n\t\t88\n\t],\n\t\"./prism-cypher.min\": [\n\t\t367,\n\t\t89\n\t],\n\t\"./prism-cypher.min.js\": [\n\t\t367,\n\t\t89\n\t],\n\t\"./prism-d\": [\n\t\t368,\n\t\t90\n\t],\n\t\"./prism-d.js\": [\n\t\t368,\n\t\t90\n\t],\n\t\"./prism-d.min\": [\n\t\t369,\n\t\t91\n\t],\n\t\"./prism-d.min.js\": [\n\t\t369,\n\t\t91\n\t],\n\t\"./prism-dart\": [\n\t\t370,\n\t\t92\n\t],\n\t\"./prism-dart.js\": [\n\t\t370,\n\t\t92\n\t],\n\t\"./prism-dart.min\": [\n\t\t371,\n\t\t93\n\t],\n\t\"./prism-dart.min.js\": [\n\t\t371,\n\t\t93\n\t],\n\t\"./prism-dax\": [\n\t\t372,\n\t\t94\n\t],\n\t\"./prism-dax.js\": [\n\t\t372,\n\t\t94\n\t],\n\t\"./prism-dax.min\": [\n\t\t373,\n\t\t95\n\t],\n\t\"./prism-dax.min.js\": [\n\t\t373,\n\t\t95\n\t],\n\t\"./prism-dhall\": [\n\t\t374,\n\t\t96\n\t],\n\t\"./prism-dhall.js\": [\n\t\t374,\n\t\t96\n\t],\n\t\"./prism-dhall.min\": [\n\t\t375,\n\t\t97\n\t],\n\t\"./prism-dhall.min.js\": [\n\t\t375,\n\t\t97\n\t],\n\t\"./prism-diff\": [\n\t\t376,\n\t\t98\n\t],\n\t\"./prism-diff.js\": [\n\t\t376,\n\t\t98\n\t],\n\t\"./prism-diff.min\": [\n\t\t377,\n\t\t99\n\t],\n\t\"./prism-diff.min.js\": [\n\t\t377,\n\t\t99\n\t],\n\t\"./prism-django\": [\n\t\t378,\n\t\t100\n\t],\n\t\"./prism-django.js\": [\n\t\t378,\n\t\t100\n\t],\n\t\"./prism-django.min\": [\n\t\t379,\n\t\t101\n\t],\n\t\"./prism-django.min.js\": [\n\t\t379,\n\t\t101\n\t],\n\t\"./prism-dns-zone-file\": [\n\t\t380,\n\t\t102\n\t],\n\t\"./prism-dns-zone-file.js\": [\n\t\t380,\n\t\t102\n\t],\n\t\"./prism-dns-zone-file.min\": [\n\t\t381,\n\t\t103\n\t],\n\t\"./prism-dns-zone-file.min.js\": [\n\t\t381,\n\t\t103\n\t],\n\t\"./prism-docker\": [\n\t\t382,\n\t\t104\n\t],\n\t\"./prism-docker.js\": [\n\t\t382,\n\t\t104\n\t],\n\t\"./prism-docker.min\": [\n\t\t383,\n\t\t105\n\t],\n\t\"./prism-docker.min.js\": [\n\t\t383,\n\t\t105\n\t],\n\t\"./prism-ebnf\": [\n\t\t384,\n\t\t106\n\t],\n\t\"./prism-ebnf.js\": [\n\t\t384,\n\t\t106\n\t],\n\t\"./prism-ebnf.min\": [\n\t\t385,\n\t\t107\n\t],\n\t\"./prism-ebnf.min.js\": [\n\t\t385,\n\t\t107\n\t],\n\t\"./prism-editorconfig\": [\n\t\t386,\n\t\t108\n\t],\n\t\"./prism-editorconfig.js\": [\n\t\t386,\n\t\t108\n\t],\n\t\"./prism-editorconfig.min\": [\n\t\t387,\n\t\t109\n\t],\n\t\"./prism-editorconfig.min.js\": [\n\t\t387,\n\t\t109\n\t],\n\t\"./prism-eiffel\": [\n\t\t388,\n\t\t110\n\t],\n\t\"./prism-eiffel.js\": [\n\t\t388,\n\t\t110\n\t],\n\t\"./prism-eiffel.min\": [\n\t\t389,\n\t\t111\n\t],\n\t\"./prism-eiffel.min.js\": [\n\t\t389,\n\t\t111\n\t],\n\t\"./prism-ejs\": [\n\t\t390,\n\t\t112\n\t],\n\t\"./prism-ejs.js\": [\n\t\t390,\n\t\t112\n\t],\n\t\"./prism-ejs.min\": [\n\t\t391,\n\t\t113\n\t],\n\t\"./prism-ejs.min.js\": [\n\t\t391,\n\t\t113\n\t],\n\t\"./prism-elixir\": [\n\t\t392,\n\t\t114\n\t],\n\t\"./prism-elixir.js\": [\n\t\t392,\n\t\t114\n\t],\n\t\"./prism-elixir.min\": [\n\t\t393,\n\t\t115\n\t],\n\t\"./prism-elixir.min.js\": [\n\t\t393,\n\t\t115\n\t],\n\t\"./prism-elm\": [\n\t\t394,\n\t\t116\n\t],\n\t\"./prism-elm.js\": [\n\t\t394,\n\t\t116\n\t],\n\t\"./prism-elm.min\": [\n\t\t395,\n\t\t117\n\t],\n\t\"./prism-elm.min.js\": [\n\t\t395,\n\t\t117\n\t],\n\t\"./prism-erb\": [\n\t\t396,\n\t\t118\n\t],\n\t\"./prism-erb.js\": [\n\t\t396,\n\t\t118\n\t],\n\t\"./prism-erb.min\": [\n\t\t397,\n\t\t119\n\t],\n\t\"./prism-erb.min.js\": [\n\t\t397,\n\t\t119\n\t],\n\t\"./prism-erlang\": [\n\t\t398,\n\t\t120\n\t],\n\t\"./prism-erlang.js\": [\n\t\t398,\n\t\t120\n\t],\n\t\"./prism-erlang.min\": [\n\t\t399,\n\t\t121\n\t],\n\t\"./prism-erlang.min.js\": [\n\t\t399,\n\t\t121\n\t],\n\t\"./prism-etlua\": [\n\t\t400,\n\t\t122\n\t],\n\t\"./prism-etlua.js\": [\n\t\t400,\n\t\t122\n\t],\n\t\"./prism-etlua.min\": [\n\t\t401,\n\t\t123\n\t],\n\t\"./prism-etlua.min.js\": [\n\t\t401,\n\t\t123\n\t],\n\t\"./prism-excel-formula\": [\n\t\t402,\n\t\t124\n\t],\n\t\"./prism-excel-formula.js\": [\n\t\t402,\n\t\t124\n\t],\n\t\"./prism-excel-formula.min\": [\n\t\t403,\n\t\t125\n\t],\n\t\"./prism-excel-formula.min.js\": [\n\t\t403,\n\t\t125\n\t],\n\t\"./prism-factor\": [\n\t\t404,\n\t\t126\n\t],\n\t\"./prism-factor.js\": [\n\t\t404,\n\t\t126\n\t],\n\t\"./prism-factor.min\": [\n\t\t405,\n\t\t127\n\t],\n\t\"./prism-factor.min.js\": [\n\t\t405,\n\t\t127\n\t],\n\t\"./prism-firestore-security-rules\": [\n\t\t406,\n\t\t128\n\t],\n\t\"./prism-firestore-security-rules.js\": [\n\t\t406,\n\t\t128\n\t],\n\t\"./prism-firestore-security-rules.min\": [\n\t\t407,\n\t\t129\n\t],\n\t\"./prism-firestore-security-rules.min.js\": [\n\t\t407,\n\t\t129\n\t],\n\t\"./prism-flow\": [\n\t\t408,\n\t\t130\n\t],\n\t\"./prism-flow.js\": [\n\t\t408,\n\t\t130\n\t],\n\t\"./prism-flow.min\": [\n\t\t409,\n\t\t131\n\t],\n\t\"./prism-flow.min.js\": [\n\t\t409,\n\t\t131\n\t],\n\t\"./prism-fortran\": [\n\t\t410,\n\t\t132\n\t],\n\t\"./prism-fortran.js\": [\n\t\t410,\n\t\t132\n\t],\n\t\"./prism-fortran.min\": [\n\t\t411,\n\t\t133\n\t],\n\t\"./prism-fortran.min.js\": [\n\t\t411,\n\t\t133\n\t],\n\t\"./prism-fsharp\": [\n\t\t412,\n\t\t134\n\t],\n\t\"./prism-fsharp.js\": [\n\t\t412,\n\t\t134\n\t],\n\t\"./prism-fsharp.min\": [\n\t\t413,\n\t\t135\n\t],\n\t\"./prism-fsharp.min.js\": [\n\t\t413,\n\t\t135\n\t],\n\t\"./prism-ftl\": [\n\t\t414,\n\t\t136\n\t],\n\t\"./prism-ftl.js\": [\n\t\t414,\n\t\t136\n\t],\n\t\"./prism-ftl.min\": [\n\t\t415,\n\t\t137\n\t],\n\t\"./prism-ftl.min.js\": [\n\t\t415,\n\t\t137\n\t],\n\t\"./prism-gcode\": [\n\t\t416,\n\t\t138\n\t],\n\t\"./prism-gcode.js\": [\n\t\t416,\n\t\t138\n\t],\n\t\"./prism-gcode.min\": [\n\t\t417,\n\t\t139\n\t],\n\t\"./prism-gcode.min.js\": [\n\t\t417,\n\t\t139\n\t],\n\t\"./prism-gdscript\": [\n\t\t418,\n\t\t140\n\t],\n\t\"./prism-gdscript.js\": [\n\t\t418,\n\t\t140\n\t],\n\t\"./prism-gdscript.min\": [\n\t\t419,\n\t\t141\n\t],\n\t\"./prism-gdscript.min.js\": [\n\t\t419,\n\t\t141\n\t],\n\t\"./prism-gedcom\": [\n\t\t420,\n\t\t142\n\t],\n\t\"./prism-gedcom.js\": [\n\t\t420,\n\t\t142\n\t],\n\t\"./prism-gedcom.min\": [\n\t\t421,\n\t\t143\n\t],\n\t\"./prism-gedcom.min.js\": [\n\t\t421,\n\t\t143\n\t],\n\t\"./prism-gherkin\": [\n\t\t422,\n\t\t144\n\t],\n\t\"./prism-gherkin.js\": [\n\t\t422,\n\t\t144\n\t],\n\t\"./prism-gherkin.min\": [\n\t\t423,\n\t\t145\n\t],\n\t\"./prism-gherkin.min.js\": [\n\t\t423,\n\t\t145\n\t],\n\t\"./prism-git\": [\n\t\t424,\n\t\t146\n\t],\n\t\"./prism-git.js\": [\n\t\t424,\n\t\t146\n\t],\n\t\"./prism-git.min\": [\n\t\t425,\n\t\t147\n\t],\n\t\"./prism-git.min.js\": [\n\t\t425,\n\t\t147\n\t],\n\t\"./prism-glsl\": [\n\t\t426,\n\t\t148\n\t],\n\t\"./prism-glsl.js\": [\n\t\t426,\n\t\t148\n\t],\n\t\"./prism-glsl.min\": [\n\t\t427,\n\t\t149\n\t],\n\t\"./prism-glsl.min.js\": [\n\t\t427,\n\t\t149\n\t],\n\t\"./prism-gml\": [\n\t\t428,\n\t\t150\n\t],\n\t\"./prism-gml.js\": [\n\t\t428,\n\t\t150\n\t],\n\t\"./prism-gml.min\": [\n\t\t429,\n\t\t151\n\t],\n\t\"./prism-gml.min.js\": [\n\t\t429,\n\t\t151\n\t],\n\t\"./prism-go\": [\n\t\t430,\n\t\t152\n\t],\n\t\"./prism-go.js\": [\n\t\t430,\n\t\t152\n\t],\n\t\"./prism-go.min\": [\n\t\t431,\n\t\t153\n\t],\n\t\"./prism-go.min.js\": [\n\t\t431,\n\t\t153\n\t],\n\t\"./prism-graphql\": [\n\t\t432,\n\t\t154\n\t],\n\t\"./prism-graphql.js\": [\n\t\t432,\n\t\t154\n\t],\n\t\"./prism-graphql.min\": [\n\t\t433,\n\t\t155\n\t],\n\t\"./prism-graphql.min.js\": [\n\t\t433,\n\t\t155\n\t],\n\t\"./prism-groovy\": [\n\t\t434,\n\t\t156\n\t],\n\t\"./prism-groovy.js\": [\n\t\t434,\n\t\t156\n\t],\n\t\"./prism-groovy.min\": [\n\t\t435,\n\t\t157\n\t],\n\t\"./prism-groovy.min.js\": [\n\t\t435,\n\t\t157\n\t],\n\t\"./prism-haml\": [\n\t\t436,\n\t\t158\n\t],\n\t\"./prism-haml.js\": [\n\t\t436,\n\t\t158\n\t],\n\t\"./prism-haml.min\": [\n\t\t437,\n\t\t159\n\t],\n\t\"./prism-haml.min.js\": [\n\t\t437,\n\t\t159\n\t],\n\t\"./prism-handlebars\": [\n\t\t438,\n\t\t160\n\t],\n\t\"./prism-handlebars.js\": [\n\t\t438,\n\t\t160\n\t],\n\t\"./prism-handlebars.min\": [\n\t\t439,\n\t\t161\n\t],\n\t\"./prism-handlebars.min.js\": [\n\t\t439,\n\t\t161\n\t],\n\t\"./prism-haskell\": [\n\t\t440,\n\t\t162\n\t],\n\t\"./prism-haskell.js\": [\n\t\t440,\n\t\t162\n\t],\n\t\"./prism-haskell.min\": [\n\t\t441,\n\t\t163\n\t],\n\t\"./prism-haskell.min.js\": [\n\t\t441,\n\t\t163\n\t],\n\t\"./prism-haxe\": [\n\t\t442,\n\t\t164\n\t],\n\t\"./prism-haxe.js\": [\n\t\t442,\n\t\t164\n\t],\n\t\"./prism-haxe.min\": [\n\t\t443,\n\t\t165\n\t],\n\t\"./prism-haxe.min.js\": [\n\t\t443,\n\t\t165\n\t],\n\t\"./prism-hcl\": [\n\t\t444,\n\t\t166\n\t],\n\t\"./prism-hcl.js\": [\n\t\t444,\n\t\t166\n\t],\n\t\"./prism-hcl.min\": [\n\t\t445,\n\t\t167\n\t],\n\t\"./prism-hcl.min.js\": [\n\t\t445,\n\t\t167\n\t],\n\t\"./prism-hlsl\": [\n\t\t446,\n\t\t168\n\t],\n\t\"./prism-hlsl.js\": [\n\t\t446,\n\t\t168\n\t],\n\t\"./prism-hlsl.min\": [\n\t\t447,\n\t\t169\n\t],\n\t\"./prism-hlsl.min.js\": [\n\t\t447,\n\t\t169\n\t],\n\t\"./prism-hpkp\": [\n\t\t448,\n\t\t170\n\t],\n\t\"./prism-hpkp.js\": [\n\t\t448,\n\t\t170\n\t],\n\t\"./prism-hpkp.min\": [\n\t\t449,\n\t\t171\n\t],\n\t\"./prism-hpkp.min.js\": [\n\t\t449,\n\t\t171\n\t],\n\t\"./prism-hsts\": [\n\t\t450,\n\t\t172\n\t],\n\t\"./prism-hsts.js\": [\n\t\t450,\n\t\t172\n\t],\n\t\"./prism-hsts.min\": [\n\t\t451,\n\t\t173\n\t],\n\t\"./prism-hsts.min.js\": [\n\t\t451,\n\t\t173\n\t],\n\t\"./prism-http\": [\n\t\t452,\n\t\t174\n\t],\n\t\"./prism-http.js\": [\n\t\t452,\n\t\t174\n\t],\n\t\"./prism-http.min\": [\n\t\t453,\n\t\t175\n\t],\n\t\"./prism-http.min.js\": [\n\t\t453,\n\t\t175\n\t],\n\t\"./prism-ichigojam\": [\n\t\t454,\n\t\t176\n\t],\n\t\"./prism-ichigojam.js\": [\n\t\t454,\n\t\t176\n\t],\n\t\"./prism-ichigojam.min\": [\n\t\t455,\n\t\t177\n\t],\n\t\"./prism-ichigojam.min.js\": [\n\t\t455,\n\t\t177\n\t],\n\t\"./prism-icon\": [\n\t\t456,\n\t\t178\n\t],\n\t\"./prism-icon.js\": [\n\t\t456,\n\t\t178\n\t],\n\t\"./prism-icon.min\": [\n\t\t457,\n\t\t179\n\t],\n\t\"./prism-icon.min.js\": [\n\t\t457,\n\t\t179\n\t],\n\t\"./prism-iecst\": [\n\t\t458,\n\t\t180\n\t],\n\t\"./prism-iecst.js\": [\n\t\t458,\n\t\t180\n\t],\n\t\"./prism-iecst.min\": [\n\t\t459,\n\t\t181\n\t],\n\t\"./prism-iecst.min.js\": [\n\t\t459,\n\t\t181\n\t],\n\t\"./prism-ignore\": [\n\t\t460,\n\t\t182\n\t],\n\t\"./prism-ignore.js\": [\n\t\t460,\n\t\t182\n\t],\n\t\"./prism-ignore.min\": [\n\t\t461,\n\t\t183\n\t],\n\t\"./prism-ignore.min.js\": [\n\t\t461,\n\t\t183\n\t],\n\t\"./prism-inform7\": [\n\t\t462,\n\t\t184\n\t],\n\t\"./prism-inform7.js\": [\n\t\t462,\n\t\t184\n\t],\n\t\"./prism-inform7.min\": [\n\t\t463,\n\t\t185\n\t],\n\t\"./prism-inform7.min.js\": [\n\t\t463,\n\t\t185\n\t],\n\t\"./prism-ini\": [\n\t\t464,\n\t\t186\n\t],\n\t\"./prism-ini.js\": [\n\t\t464,\n\t\t186\n\t],\n\t\"./prism-ini.min\": [\n\t\t465,\n\t\t187\n\t],\n\t\"./prism-ini.min.js\": [\n\t\t465,\n\t\t187\n\t],\n\t\"./prism-io\": [\n\t\t466,\n\t\t188\n\t],\n\t\"./prism-io.js\": [\n\t\t466,\n\t\t188\n\t],\n\t\"./prism-io.min\": [\n\t\t467,\n\t\t189\n\t],\n\t\"./prism-io.min.js\": [\n\t\t467,\n\t\t189\n\t],\n\t\"./prism-j\": [\n\t\t468,\n\t\t190\n\t],\n\t\"./prism-j.js\": [\n\t\t468,\n\t\t190\n\t],\n\t\"./prism-j.min\": [\n\t\t469,\n\t\t191\n\t],\n\t\"./prism-j.min.js\": [\n\t\t469,\n\t\t191\n\t],\n\t\"./prism-java\": [\n\t\t470,\n\t\t192\n\t],\n\t\"./prism-java.js\": [\n\t\t470,\n\t\t192\n\t],\n\t\"./prism-java.min\": [\n\t\t471,\n\t\t193\n\t],\n\t\"./prism-java.min.js\": [\n\t\t471,\n\t\t193\n\t],\n\t\"./prism-javadoc\": [\n\t\t472,\n\t\t194\n\t],\n\t\"./prism-javadoc.js\": [\n\t\t472,\n\t\t194\n\t],\n\t\"./prism-javadoc.min\": [\n\t\t473,\n\t\t195\n\t],\n\t\"./prism-javadoc.min.js\": [\n\t\t473,\n\t\t195\n\t],\n\t\"./prism-javadoclike\": [\n\t\t474,\n\t\t196\n\t],\n\t\"./prism-javadoclike.js\": [\n\t\t474,\n\t\t196\n\t],\n\t\"./prism-javadoclike.min\": [\n\t\t475,\n\t\t197\n\t],\n\t\"./prism-javadoclike.min.js\": [\n\t\t475,\n\t\t197\n\t],\n\t\"./prism-javascript\": [\n\t\t476,\n\t\t198\n\t],\n\t\"./prism-javascript.js\": [\n\t\t476,\n\t\t198\n\t],\n\t\"./prism-javascript.min\": [\n\t\t477,\n\t\t199\n\t],\n\t\"./prism-javascript.min.js\": [\n\t\t477,\n\t\t199\n\t],\n\t\"./prism-javastacktrace\": [\n\t\t478,\n\t\t200\n\t],\n\t\"./prism-javastacktrace.js\": [\n\t\t478,\n\t\t200\n\t],\n\t\"./prism-javastacktrace.min\": [\n\t\t479,\n\t\t201\n\t],\n\t\"./prism-javastacktrace.min.js\": [\n\t\t479,\n\t\t201\n\t],\n\t\"./prism-jolie\": [\n\t\t480,\n\t\t202\n\t],\n\t\"./prism-jolie.js\": [\n\t\t480,\n\t\t202\n\t],\n\t\"./prism-jolie.min\": [\n\t\t481,\n\t\t203\n\t],\n\t\"./prism-jolie.min.js\": [\n\t\t481,\n\t\t203\n\t],\n\t\"./prism-jq\": [\n\t\t482,\n\t\t204\n\t],\n\t\"./prism-jq.js\": [\n\t\t482,\n\t\t204\n\t],\n\t\"./prism-jq.min\": [\n\t\t483,\n\t\t205\n\t],\n\t\"./prism-jq.min.js\": [\n\t\t483,\n\t\t205\n\t],\n\t\"./prism-js-extras\": [\n\t\t484,\n\t\t206\n\t],\n\t\"./prism-js-extras.js\": [\n\t\t484,\n\t\t206\n\t],\n\t\"./prism-js-extras.min\": [\n\t\t485,\n\t\t207\n\t],\n\t\"./prism-js-extras.min.js\": [\n\t\t485,\n\t\t207\n\t],\n\t\"./prism-js-templates\": [\n\t\t486,\n\t\t208\n\t],\n\t\"./prism-js-templates.js\": [\n\t\t486,\n\t\t208\n\t],\n\t\"./prism-js-templates.min\": [\n\t\t487,\n\t\t209\n\t],\n\t\"./prism-js-templates.min.js\": [\n\t\t487,\n\t\t209\n\t],\n\t\"./prism-jsdoc\": [\n\t\t488,\n\t\t210\n\t],\n\t\"./prism-jsdoc.js\": [\n\t\t488,\n\t\t210\n\t],\n\t\"./prism-jsdoc.min\": [\n\t\t489,\n\t\t211\n\t],\n\t\"./prism-jsdoc.min.js\": [\n\t\t489,\n\t\t211\n\t],\n\t\"./prism-json\": [\n\t\t490,\n\t\t212\n\t],\n\t\"./prism-json.js\": [\n\t\t490,\n\t\t212\n\t],\n\t\"./prism-json.min\": [\n\t\t491,\n\t\t213\n\t],\n\t\"./prism-json.min.js\": [\n\t\t491,\n\t\t213\n\t],\n\t\"./prism-json5\": [\n\t\t492,\n\t\t214\n\t],\n\t\"./prism-json5.js\": [\n\t\t492,\n\t\t214\n\t],\n\t\"./prism-json5.min\": [\n\t\t493,\n\t\t215\n\t],\n\t\"./prism-json5.min.js\": [\n\t\t493,\n\t\t215\n\t],\n\t\"./prism-jsonp\": [\n\t\t494,\n\t\t216\n\t],\n\t\"./prism-jsonp.js\": [\n\t\t494,\n\t\t216\n\t],\n\t\"./prism-jsonp.min\": [\n\t\t495,\n\t\t217\n\t],\n\t\"./prism-jsonp.min.js\": [\n\t\t495,\n\t\t217\n\t],\n\t\"./prism-jsstacktrace\": [\n\t\t496,\n\t\t218\n\t],\n\t\"./prism-jsstacktrace.js\": [\n\t\t496,\n\t\t218\n\t],\n\t\"./prism-jsstacktrace.min\": [\n\t\t497,\n\t\t219\n\t],\n\t\"./prism-jsstacktrace.min.js\": [\n\t\t497,\n\t\t219\n\t],\n\t\"./prism-jsx\": [\n\t\t498,\n\t\t220\n\t],\n\t\"./prism-jsx.js\": [\n\t\t498,\n\t\t220\n\t],\n\t\"./prism-jsx.min\": [\n\t\t499,\n\t\t221\n\t],\n\t\"./prism-jsx.min.js\": [\n\t\t499,\n\t\t221\n\t],\n\t\"./prism-julia\": [\n\t\t500,\n\t\t222\n\t],\n\t\"./prism-julia.js\": [\n\t\t500,\n\t\t222\n\t],\n\t\"./prism-julia.min\": [\n\t\t501,\n\t\t223\n\t],\n\t\"./prism-julia.min.js\": [\n\t\t501,\n\t\t223\n\t],\n\t\"./prism-keyman\": [\n\t\t502,\n\t\t224\n\t],\n\t\"./prism-keyman.js\": [\n\t\t502,\n\t\t224\n\t],\n\t\"./prism-keyman.min\": [\n\t\t503,\n\t\t225\n\t],\n\t\"./prism-keyman.min.js\": [\n\t\t503,\n\t\t225\n\t],\n\t\"./prism-kotlin\": [\n\t\t504,\n\t\t226\n\t],\n\t\"./prism-kotlin.js\": [\n\t\t504,\n\t\t226\n\t],\n\t\"./prism-kotlin.min\": [\n\t\t505,\n\t\t227\n\t],\n\t\"./prism-kotlin.min.js\": [\n\t\t505,\n\t\t227\n\t],\n\t\"./prism-latex\": [\n\t\t506,\n\t\t228\n\t],\n\t\"./prism-latex.js\": [\n\t\t506,\n\t\t228\n\t],\n\t\"./prism-latex.min\": [\n\t\t507,\n\t\t229\n\t],\n\t\"./prism-latex.min.js\": [\n\t\t507,\n\t\t229\n\t],\n\t\"./prism-latte\": [\n\t\t508,\n\t\t230\n\t],\n\t\"./prism-latte.js\": [\n\t\t508,\n\t\t230\n\t],\n\t\"./prism-latte.min\": [\n\t\t509,\n\t\t231\n\t],\n\t\"./prism-latte.min.js\": [\n\t\t509,\n\t\t231\n\t],\n\t\"./prism-less\": [\n\t\t510,\n\t\t232\n\t],\n\t\"./prism-less.js\": [\n\t\t510,\n\t\t232\n\t],\n\t\"./prism-less.min\": [\n\t\t511,\n\t\t233\n\t],\n\t\"./prism-less.min.js\": [\n\t\t511,\n\t\t233\n\t],\n\t\"./prism-lilypond\": [\n\t\t512,\n\t\t234\n\t],\n\t\"./prism-lilypond.js\": [\n\t\t512,\n\t\t234\n\t],\n\t\"./prism-lilypond.min\": [\n\t\t513,\n\t\t235\n\t],\n\t\"./prism-lilypond.min.js\": [\n\t\t513,\n\t\t235\n\t],\n\t\"./prism-liquid\": [\n\t\t514,\n\t\t236\n\t],\n\t\"./prism-liquid.js\": [\n\t\t514,\n\t\t236\n\t],\n\t\"./prism-liquid.min\": [\n\t\t515,\n\t\t237\n\t],\n\t\"./prism-liquid.min.js\": [\n\t\t515,\n\t\t237\n\t],\n\t\"./prism-lisp\": [\n\t\t516,\n\t\t238\n\t],\n\t\"./prism-lisp.js\": [\n\t\t516,\n\t\t238\n\t],\n\t\"./prism-lisp.min\": [\n\t\t517,\n\t\t239\n\t],\n\t\"./prism-lisp.min.js\": [\n\t\t517,\n\t\t239\n\t],\n\t\"./prism-livescript\": [\n\t\t518,\n\t\t240\n\t],\n\t\"./prism-livescript.js\": [\n\t\t518,\n\t\t240\n\t],\n\t\"./prism-livescript.min\": [\n\t\t519,\n\t\t241\n\t],\n\t\"./prism-livescript.min.js\": [\n\t\t519,\n\t\t241\n\t],\n\t\"./prism-llvm\": [\n\t\t520,\n\t\t242\n\t],\n\t\"./prism-llvm.js\": [\n\t\t520,\n\t\t242\n\t],\n\t\"./prism-llvm.min\": [\n\t\t521,\n\t\t243\n\t],\n\t\"./prism-llvm.min.js\": [\n\t\t521,\n\t\t243\n\t],\n\t\"./prism-lolcode\": [\n\t\t522,\n\t\t244\n\t],\n\t\"./prism-lolcode.js\": [\n\t\t522,\n\t\t244\n\t],\n\t\"./prism-lolcode.min\": [\n\t\t523,\n\t\t245\n\t],\n\t\"./prism-lolcode.min.js\": [\n\t\t523,\n\t\t245\n\t],\n\t\"./prism-lua\": [\n\t\t524,\n\t\t246\n\t],\n\t\"./prism-lua.js\": [\n\t\t524,\n\t\t246\n\t],\n\t\"./prism-lua.min\": [\n\t\t525,\n\t\t247\n\t],\n\t\"./prism-lua.min.js\": [\n\t\t525,\n\t\t247\n\t],\n\t\"./prism-makefile\": [\n\t\t526,\n\t\t248\n\t],\n\t\"./prism-makefile.js\": [\n\t\t526,\n\t\t248\n\t],\n\t\"./prism-makefile.min\": [\n\t\t527,\n\t\t249\n\t],\n\t\"./prism-makefile.min.js\": [\n\t\t527,\n\t\t249\n\t],\n\t\"./prism-markdown\": [\n\t\t223\n\t],\n\t\"./prism-markdown.js\": [\n\t\t223\n\t],\n\t\"./prism-markdown.min\": [\n\t\t528,\n\t\t250\n\t],\n\t\"./prism-markdown.min.js\": [\n\t\t528,\n\t\t250\n\t],\n\t\"./prism-markup\": [\n\t\t222\n\t],\n\t\"./prism-markup-templating\": [\n\t\t529,\n\t\t251\n\t],\n\t\"./prism-markup-templating.js\": [\n\t\t529,\n\t\t251\n\t],\n\t\"./prism-markup-templating.min\": [\n\t\t530,\n\t\t252\n\t],\n\t\"./prism-markup-templating.min.js\": [\n\t\t530,\n\t\t252\n\t],\n\t\"./prism-markup.js\": [\n\t\t222\n\t],\n\t\"./prism-markup.min\": [\n\t\t531,\n\t\t253\n\t],\n\t\"./prism-markup.min.js\": [\n\t\t531,\n\t\t253\n\t],\n\t\"./prism-matlab\": [\n\t\t532,\n\t\t254\n\t],\n\t\"./prism-matlab.js\": [\n\t\t532,\n\t\t254\n\t],\n\t\"./prism-matlab.min\": [\n\t\t533,\n\t\t255\n\t],\n\t\"./prism-matlab.min.js\": [\n\t\t533,\n\t\t255\n\t],\n\t\"./prism-mel\": [\n\t\t534,\n\t\t256\n\t],\n\t\"./prism-mel.js\": [\n\t\t534,\n\t\t256\n\t],\n\t\"./prism-mel.min\": [\n\t\t535,\n\t\t257\n\t],\n\t\"./prism-mel.min.js\": [\n\t\t535,\n\t\t257\n\t],\n\t\"./prism-mizar\": [\n\t\t536,\n\t\t258\n\t],\n\t\"./prism-mizar.js\": [\n\t\t536,\n\t\t258\n\t],\n\t\"./prism-mizar.min\": [\n\t\t537,\n\t\t259\n\t],\n\t\"./prism-mizar.min.js\": [\n\t\t537,\n\t\t259\n\t],\n\t\"./prism-mongodb\": [\n\t\t538,\n\t\t260\n\t],\n\t\"./prism-mongodb.js\": [\n\t\t538,\n\t\t260\n\t],\n\t\"./prism-mongodb.min\": [\n\t\t539,\n\t\t261\n\t],\n\t\"./prism-mongodb.min.js\": [\n\t\t539,\n\t\t261\n\t],\n\t\"./prism-monkey\": [\n\t\t540,\n\t\t262\n\t],\n\t\"./prism-monkey.js\": [\n\t\t540,\n\t\t262\n\t],\n\t\"./prism-monkey.min\": [\n\t\t541,\n\t\t263\n\t],\n\t\"./prism-monkey.min.js\": [\n\t\t541,\n\t\t263\n\t],\n\t\"./prism-moonscript\": [\n\t\t542,\n\t\t264\n\t],\n\t\"./prism-moonscript.js\": [\n\t\t542,\n\t\t264\n\t],\n\t\"./prism-moonscript.min\": [\n\t\t543,\n\t\t265\n\t],\n\t\"./prism-moonscript.min.js\": [\n\t\t543,\n\t\t265\n\t],\n\t\"./prism-n1ql\": [\n\t\t544,\n\t\t266\n\t],\n\t\"./prism-n1ql.js\": [\n\t\t544,\n\t\t266\n\t],\n\t\"./prism-n1ql.min\": [\n\t\t545,\n\t\t267\n\t],\n\t\"./prism-n1ql.min.js\": [\n\t\t545,\n\t\t267\n\t],\n\t\"./prism-n4js\": [\n\t\t546,\n\t\t268\n\t],\n\t\"./prism-n4js.js\": [\n\t\t546,\n\t\t268\n\t],\n\t\"./prism-n4js.min\": [\n\t\t547,\n\t\t269\n\t],\n\t\"./prism-n4js.min.js\": [\n\t\t547,\n\t\t269\n\t],\n\t\"./prism-nand2tetris-hdl\": [\n\t\t548,\n\t\t270\n\t],\n\t\"./prism-nand2tetris-hdl.js\": [\n\t\t548,\n\t\t270\n\t],\n\t\"./prism-nand2tetris-hdl.min\": [\n\t\t549,\n\t\t271\n\t],\n\t\"./prism-nand2tetris-hdl.min.js\": [\n\t\t549,\n\t\t271\n\t],\n\t\"./prism-naniscript\": [\n\t\t550,\n\t\t272\n\t],\n\t\"./prism-naniscript.js\": [\n\t\t550,\n\t\t272\n\t],\n\t\"./prism-naniscript.min\": [\n\t\t551,\n\t\t273\n\t],\n\t\"./prism-naniscript.min.js\": [\n\t\t551,\n\t\t273\n\t],\n\t\"./prism-nasm\": [\n\t\t552,\n\t\t274\n\t],\n\t\"./prism-nasm.js\": [\n\t\t552,\n\t\t274\n\t],\n\t\"./prism-nasm.min\": [\n\t\t553,\n\t\t275\n\t],\n\t\"./prism-nasm.min.js\": [\n\t\t553,\n\t\t275\n\t],\n\t\"./prism-neon\": [\n\t\t554,\n\t\t276\n\t],\n\t\"./prism-neon.js\": [\n\t\t554,\n\t\t276\n\t],\n\t\"./prism-neon.min\": [\n\t\t555,\n\t\t277\n\t],\n\t\"./prism-neon.min.js\": [\n\t\t555,\n\t\t277\n\t],\n\t\"./prism-nginx\": [\n\t\t556,\n\t\t278\n\t],\n\t\"./prism-nginx.js\": [\n\t\t556,\n\t\t278\n\t],\n\t\"./prism-nginx.min\": [\n\t\t557,\n\t\t279\n\t],\n\t\"./prism-nginx.min.js\": [\n\t\t557,\n\t\t279\n\t],\n\t\"./prism-nim\": [\n\t\t558,\n\t\t280\n\t],\n\t\"./prism-nim.js\": [\n\t\t558,\n\t\t280\n\t],\n\t\"./prism-nim.min\": [\n\t\t559,\n\t\t281\n\t],\n\t\"./prism-nim.min.js\": [\n\t\t559,\n\t\t281\n\t],\n\t\"./prism-nix\": [\n\t\t560,\n\t\t282\n\t],\n\t\"./prism-nix.js\": [\n\t\t560,\n\t\t282\n\t],\n\t\"./prism-nix.min\": [\n\t\t561,\n\t\t283\n\t],\n\t\"./prism-nix.min.js\": [\n\t\t561,\n\t\t283\n\t],\n\t\"./prism-nsis\": [\n\t\t562,\n\t\t284\n\t],\n\t\"./prism-nsis.js\": [\n\t\t562,\n\t\t284\n\t],\n\t\"./prism-nsis.min\": [\n\t\t563,\n\t\t285\n\t],\n\t\"./prism-nsis.min.js\": [\n\t\t563,\n\t\t285\n\t],\n\t\"./prism-objectivec\": [\n\t\t564,\n\t\t286\n\t],\n\t\"./prism-objectivec.js\": [\n\t\t564,\n\t\t286\n\t],\n\t\"./prism-objectivec.min\": [\n\t\t565,\n\t\t287\n\t],\n\t\"./prism-objectivec.min.js\": [\n\t\t565,\n\t\t287\n\t],\n\t\"./prism-ocaml\": [\n\t\t566,\n\t\t288\n\t],\n\t\"./prism-ocaml.js\": [\n\t\t566,\n\t\t288\n\t],\n\t\"./prism-ocaml.min\": [\n\t\t567,\n\t\t289\n\t],\n\t\"./prism-ocaml.min.js\": [\n\t\t567,\n\t\t289\n\t],\n\t\"./prism-opencl\": [\n\t\t568,\n\t\t290\n\t],\n\t\"./prism-opencl.js\": [\n\t\t568,\n\t\t290\n\t],\n\t\"./prism-opencl.min\": [\n\t\t569,\n\t\t291\n\t],\n\t\"./prism-opencl.min.js\": [\n\t\t569,\n\t\t291\n\t],\n\t\"./prism-oz\": [\n\t\t570,\n\t\t292\n\t],\n\t\"./prism-oz.js\": [\n\t\t570,\n\t\t292\n\t],\n\t\"./prism-oz.min\": [\n\t\t571,\n\t\t293\n\t],\n\t\"./prism-oz.min.js\": [\n\t\t571,\n\t\t293\n\t],\n\t\"./prism-parigp\": [\n\t\t572,\n\t\t294\n\t],\n\t\"./prism-parigp.js\": [\n\t\t572,\n\t\t294\n\t],\n\t\"./prism-parigp.min\": [\n\t\t573,\n\t\t295\n\t],\n\t\"./prism-parigp.min.js\": [\n\t\t573,\n\t\t295\n\t],\n\t\"./prism-parser\": [\n\t\t574,\n\t\t296\n\t],\n\t\"./prism-parser.js\": [\n\t\t574,\n\t\t296\n\t],\n\t\"./prism-parser.min\": [\n\t\t575,\n\t\t297\n\t],\n\t\"./prism-parser.min.js\": [\n\t\t575,\n\t\t297\n\t],\n\t\"./prism-pascal\": [\n\t\t576,\n\t\t298\n\t],\n\t\"./prism-pascal.js\": [\n\t\t576,\n\t\t298\n\t],\n\t\"./prism-pascal.min\": [\n\t\t577,\n\t\t299\n\t],\n\t\"./prism-pascal.min.js\": [\n\t\t577,\n\t\t299\n\t],\n\t\"./prism-pascaligo\": [\n\t\t578,\n\t\t300\n\t],\n\t\"./prism-pascaligo.js\": [\n\t\t578,\n\t\t300\n\t],\n\t\"./prism-pascaligo.min\": [\n\t\t579,\n\t\t301\n\t],\n\t\"./prism-pascaligo.min.js\": [\n\t\t579,\n\t\t301\n\t],\n\t\"./prism-pcaxis\": [\n\t\t580,\n\t\t302\n\t],\n\t\"./prism-pcaxis.js\": [\n\t\t580,\n\t\t302\n\t],\n\t\"./prism-pcaxis.min\": [\n\t\t581,\n\t\t303\n\t],\n\t\"./prism-pcaxis.min.js\": [\n\t\t581,\n\t\t303\n\t],\n\t\"./prism-peoplecode\": [\n\t\t582,\n\t\t304\n\t],\n\t\"./prism-peoplecode.js\": [\n\t\t582,\n\t\t304\n\t],\n\t\"./prism-peoplecode.min\": [\n\t\t583,\n\t\t305\n\t],\n\t\"./prism-peoplecode.min.js\": [\n\t\t583,\n\t\t305\n\t],\n\t\"./prism-perl\": [\n\t\t584,\n\t\t306\n\t],\n\t\"./prism-perl.js\": [\n\t\t584,\n\t\t306\n\t],\n\t\"./prism-perl.min\": [\n\t\t585,\n\t\t307\n\t],\n\t\"./prism-perl.min.js\": [\n\t\t585,\n\t\t307\n\t],\n\t\"./prism-php\": [\n\t\t588,\n\t\t310\n\t],\n\t\"./prism-php-extras\": [\n\t\t586,\n\t\t308\n\t],\n\t\"./prism-php-extras.js\": [\n\t\t586,\n\t\t308\n\t],\n\t\"./prism-php-extras.min\": [\n\t\t587,\n\t\t309\n\t],\n\t\"./prism-php-extras.min.js\": [\n\t\t587,\n\t\t309\n\t],\n\t\"./prism-php.js\": [\n\t\t588,\n\t\t310\n\t],\n\t\"./prism-php.min\": [\n\t\t589,\n\t\t311\n\t],\n\t\"./prism-php.min.js\": [\n\t\t589,\n\t\t311\n\t],\n\t\"./prism-phpdoc\": [\n\t\t590,\n\t\t312\n\t],\n\t\"./prism-phpdoc.js\": [\n\t\t590,\n\t\t312\n\t],\n\t\"./prism-phpdoc.min\": [\n\t\t591,\n\t\t313\n\t],\n\t\"./prism-phpdoc.min.js\": [\n\t\t591,\n\t\t313\n\t],\n\t\"./prism-plsql\": [\n\t\t592,\n\t\t314\n\t],\n\t\"./prism-plsql.js\": [\n\t\t592,\n\t\t314\n\t],\n\t\"./prism-plsql.min\": [\n\t\t593,\n\t\t315\n\t],\n\t\"./prism-plsql.min.js\": [\n\t\t593,\n\t\t315\n\t],\n\t\"./prism-powerquery\": [\n\t\t594,\n\t\t316\n\t],\n\t\"./prism-powerquery.js\": [\n\t\t594,\n\t\t316\n\t],\n\t\"./prism-powerquery.min\": [\n\t\t595,\n\t\t317\n\t],\n\t\"./prism-powerquery.min.js\": [\n\t\t595,\n\t\t317\n\t],\n\t\"./prism-powershell\": [\n\t\t596,\n\t\t318\n\t],\n\t\"./prism-powershell.js\": [\n\t\t596,\n\t\t318\n\t],\n\t\"./prism-powershell.min\": [\n\t\t597,\n\t\t319\n\t],\n\t\"./prism-powershell.min.js\": [\n\t\t597,\n\t\t319\n\t],\n\t\"./prism-processing\": [\n\t\t598,\n\t\t320\n\t],\n\t\"./prism-processing.js\": [\n\t\t598,\n\t\t320\n\t],\n\t\"./prism-processing.min\": [\n\t\t599,\n\t\t321\n\t],\n\t\"./prism-processing.min.js\": [\n\t\t599,\n\t\t321\n\t],\n\t\"./prism-prolog\": [\n\t\t600,\n\t\t322\n\t],\n\t\"./prism-prolog.js\": [\n\t\t600,\n\t\t322\n\t],\n\t\"./prism-prolog.min\": [\n\t\t601,\n\t\t323\n\t],\n\t\"./prism-prolog.min.js\": [\n\t\t601,\n\t\t323\n\t],\n\t\"./prism-properties\": [\n\t\t602,\n\t\t324\n\t],\n\t\"./prism-properties.js\": [\n\t\t602,\n\t\t324\n\t],\n\t\"./prism-properties.min\": [\n\t\t603,\n\t\t325\n\t],\n\t\"./prism-properties.min.js\": [\n\t\t603,\n\t\t325\n\t],\n\t\"./prism-protobuf\": [\n\t\t604,\n\t\t326\n\t],\n\t\"./prism-protobuf.js\": [\n\t\t604,\n\t\t326\n\t],\n\t\"./prism-protobuf.min\": [\n\t\t605,\n\t\t327\n\t],\n\t\"./prism-protobuf.min.js\": [\n\t\t605,\n\t\t327\n\t],\n\t\"./prism-pug\": [\n\t\t606,\n\t\t328\n\t],\n\t\"./prism-pug.js\": [\n\t\t606,\n\t\t328\n\t],\n\t\"./prism-pug.min\": [\n\t\t607,\n\t\t329\n\t],\n\t\"./prism-pug.min.js\": [\n\t\t607,\n\t\t329\n\t],\n\t\"./prism-puppet\": [\n\t\t608,\n\t\t330\n\t],\n\t\"./prism-puppet.js\": [\n\t\t608,\n\t\t330\n\t],\n\t\"./prism-puppet.min\": [\n\t\t609,\n\t\t331\n\t],\n\t\"./prism-puppet.min.js\": [\n\t\t609,\n\t\t331\n\t],\n\t\"./prism-pure\": [\n\t\t610,\n\t\t332\n\t],\n\t\"./prism-pure.js\": [\n\t\t610,\n\t\t332\n\t],\n\t\"./prism-pure.min\": [\n\t\t611,\n\t\t333\n\t],\n\t\"./prism-pure.min.js\": [\n\t\t611,\n\t\t333\n\t],\n\t\"./prism-purebasic\": [\n\t\t612,\n\t\t334\n\t],\n\t\"./prism-purebasic.js\": [\n\t\t612,\n\t\t334\n\t],\n\t\"./prism-purebasic.min\": [\n\t\t613,\n\t\t335\n\t],\n\t\"./prism-purebasic.min.js\": [\n\t\t613,\n\t\t335\n\t],\n\t\"./prism-purescript\": [\n\t\t614,\n\t\t336\n\t],\n\t\"./prism-purescript.js\": [\n\t\t614,\n\t\t336\n\t],\n\t\"./prism-purescript.min\": [\n\t\t615,\n\t\t337\n\t],\n\t\"./prism-purescript.min.js\": [\n\t\t615,\n\t\t337\n\t],\n\t\"./prism-python\": [\n\t\t616,\n\t\t338\n\t],\n\t\"./prism-python.js\": [\n\t\t616,\n\t\t338\n\t],\n\t\"./prism-python.min\": [\n\t\t617,\n\t\t339\n\t],\n\t\"./prism-python.min.js\": [\n\t\t617,\n\t\t339\n\t],\n\t\"./prism-q\": [\n\t\t618,\n\t\t340\n\t],\n\t\"./prism-q.js\": [\n\t\t618,\n\t\t340\n\t],\n\t\"./prism-q.min\": [\n\t\t619,\n\t\t341\n\t],\n\t\"./prism-q.min.js\": [\n\t\t619,\n\t\t341\n\t],\n\t\"./prism-qml\": [\n\t\t620,\n\t\t342\n\t],\n\t\"./prism-qml.js\": [\n\t\t620,\n\t\t342\n\t],\n\t\"./prism-qml.min\": [\n\t\t621,\n\t\t343\n\t],\n\t\"./prism-qml.min.js\": [\n\t\t621,\n\t\t343\n\t],\n\t\"./prism-qore\": [\n\t\t622,\n\t\t344\n\t],\n\t\"./prism-qore.js\": [\n\t\t622,\n\t\t344\n\t],\n\t\"./prism-qore.min\": [\n\t\t623,\n\t\t345\n\t],\n\t\"./prism-qore.min.js\": [\n\t\t623,\n\t\t345\n\t],\n\t\"./prism-r\": [\n\t\t624,\n\t\t346\n\t],\n\t\"./prism-r.js\": [\n\t\t624,\n\t\t346\n\t],\n\t\"./prism-r.min\": [\n\t\t625,\n\t\t347\n\t],\n\t\"./prism-r.min.js\": [\n\t\t625,\n\t\t347\n\t],\n\t\"./prism-racket\": [\n\t\t626,\n\t\t348\n\t],\n\t\"./prism-racket.js\": [\n\t\t626,\n\t\t348\n\t],\n\t\"./prism-racket.min\": [\n\t\t627,\n\t\t349\n\t],\n\t\"./prism-racket.min.js\": [\n\t\t627,\n\t\t349\n\t],\n\t\"./prism-reason\": [\n\t\t628,\n\t\t350\n\t],\n\t\"./prism-reason.js\": [\n\t\t628,\n\t\t350\n\t],\n\t\"./prism-reason.min\": [\n\t\t629,\n\t\t351\n\t],\n\t\"./prism-reason.min.js\": [\n\t\t629,\n\t\t351\n\t],\n\t\"./prism-regex\": [\n\t\t630,\n\t\t352\n\t],\n\t\"./prism-regex.js\": [\n\t\t630,\n\t\t352\n\t],\n\t\"./prism-regex.min\": [\n\t\t631,\n\t\t353\n\t],\n\t\"./prism-regex.min.js\": [\n\t\t631,\n\t\t353\n\t],\n\t\"./prism-renpy\": [\n\t\t632,\n\t\t354\n\t],\n\t\"./prism-renpy.js\": [\n\t\t632,\n\t\t354\n\t],\n\t\"./prism-renpy.min\": [\n\t\t633,\n\t\t355\n\t],\n\t\"./prism-renpy.min.js\": [\n\t\t633,\n\t\t355\n\t],\n\t\"./prism-rest\": [\n\t\t634,\n\t\t356\n\t],\n\t\"./prism-rest.js\": [\n\t\t634,\n\t\t356\n\t],\n\t\"./prism-rest.min\": [\n\t\t635,\n\t\t357\n\t],\n\t\"./prism-rest.min.js\": [\n\t\t635,\n\t\t357\n\t],\n\t\"./prism-rip\": [\n\t\t636,\n\t\t358\n\t],\n\t\"./prism-rip.js\": [\n\t\t636,\n\t\t358\n\t],\n\t\"./prism-rip.min\": [\n\t\t637,\n\t\t359\n\t],\n\t\"./prism-rip.min.js\": [\n\t\t637,\n\t\t359\n\t],\n\t\"./prism-roboconf\": [\n\t\t638,\n\t\t360\n\t],\n\t\"./prism-roboconf.js\": [\n\t\t638,\n\t\t360\n\t],\n\t\"./prism-roboconf.min\": [\n\t\t639,\n\t\t361\n\t],\n\t\"./prism-roboconf.min.js\": [\n\t\t639,\n\t\t361\n\t],\n\t\"./prism-robotframework\": [\n\t\t640,\n\t\t362\n\t],\n\t\"./prism-robotframework.js\": [\n\t\t640,\n\t\t362\n\t],\n\t\"./prism-robotframework.min\": [\n\t\t641,\n\t\t363\n\t],\n\t\"./prism-robotframework.min.js\": [\n\t\t641,\n\t\t363\n\t],\n\t\"./prism-ruby\": [\n\t\t642,\n\t\t364\n\t],\n\t\"./prism-ruby.js\": [\n\t\t642,\n\t\t364\n\t],\n\t\"./prism-ruby.min\": [\n\t\t643,\n\t\t365\n\t],\n\t\"./prism-ruby.min.js\": [\n\t\t643,\n\t\t365\n\t],\n\t\"./prism-rust\": [\n\t\t644,\n\t\t366\n\t],\n\t\"./prism-rust.js\": [\n\t\t644,\n\t\t366\n\t],\n\t\"./prism-rust.min\": [\n\t\t645,\n\t\t367\n\t],\n\t\"./prism-rust.min.js\": [\n\t\t645,\n\t\t367\n\t],\n\t\"./prism-sas\": [\n\t\t646,\n\t\t368\n\t],\n\t\"./prism-sas.js\": [\n\t\t646,\n\t\t368\n\t],\n\t\"./prism-sas.min\": [\n\t\t647,\n\t\t369\n\t],\n\t\"./prism-sas.min.js\": [\n\t\t647,\n\t\t369\n\t],\n\t\"./prism-sass\": [\n\t\t648,\n\t\t370\n\t],\n\t\"./prism-sass.js\": [\n\t\t648,\n\t\t370\n\t],\n\t\"./prism-sass.min\": [\n\t\t649,\n\t\t371\n\t],\n\t\"./prism-sass.min.js\": [\n\t\t649,\n\t\t371\n\t],\n\t\"./prism-scala\": [\n\t\t650,\n\t\t372\n\t],\n\t\"./prism-scala.js\": [\n\t\t650,\n\t\t372\n\t],\n\t\"./prism-scala.min\": [\n\t\t651,\n\t\t373\n\t],\n\t\"./prism-scala.min.js\": [\n\t\t651,\n\t\t373\n\t],\n\t\"./prism-scheme\": [\n\t\t652,\n\t\t374\n\t],\n\t\"./prism-scheme.js\": [\n\t\t652,\n\t\t374\n\t],\n\t\"./prism-scheme.min\": [\n\t\t653,\n\t\t375\n\t],\n\t\"./prism-scheme.min.js\": [\n\t\t653,\n\t\t375\n\t],\n\t\"./prism-scss\": [\n\t\t654,\n\t\t376\n\t],\n\t\"./prism-scss.js\": [\n\t\t654,\n\t\t376\n\t],\n\t\"./prism-scss.min\": [\n\t\t655,\n\t\t377\n\t],\n\t\"./prism-scss.min.js\": [\n\t\t655,\n\t\t377\n\t],\n\t\"./prism-shell-session\": [\n\t\t656,\n\t\t378\n\t],\n\t\"./prism-shell-session.js\": [\n\t\t656,\n\t\t378\n\t],\n\t\"./prism-shell-session.min\": [\n\t\t657,\n\t\t379\n\t],\n\t\"./prism-shell-session.min.js\": [\n\t\t657,\n\t\t379\n\t],\n\t\"./prism-smali\": [\n\t\t658,\n\t\t380\n\t],\n\t\"./prism-smali.js\": [\n\t\t658,\n\t\t380\n\t],\n\t\"./prism-smali.min\": [\n\t\t659,\n\t\t381\n\t],\n\t\"./prism-smali.min.js\": [\n\t\t659,\n\t\t381\n\t],\n\t\"./prism-smalltalk\": [\n\t\t660,\n\t\t382\n\t],\n\t\"./prism-smalltalk.js\": [\n\t\t660,\n\t\t382\n\t],\n\t\"./prism-smalltalk.min\": [\n\t\t661,\n\t\t383\n\t],\n\t\"./prism-smalltalk.min.js\": [\n\t\t661,\n\t\t383\n\t],\n\t\"./prism-smarty\": [\n\t\t662,\n\t\t384\n\t],\n\t\"./prism-smarty.js\": [\n\t\t662,\n\t\t384\n\t],\n\t\"./prism-smarty.min\": [\n\t\t663,\n\t\t385\n\t],\n\t\"./prism-smarty.min.js\": [\n\t\t663,\n\t\t385\n\t],\n\t\"./prism-sml\": [\n\t\t664,\n\t\t386\n\t],\n\t\"./prism-sml.js\": [\n\t\t664,\n\t\t386\n\t],\n\t\"./prism-sml.min\": [\n\t\t665,\n\t\t387\n\t],\n\t\"./prism-sml.min.js\": [\n\t\t665,\n\t\t387\n\t],\n\t\"./prism-solidity\": [\n\t\t666,\n\t\t388\n\t],\n\t\"./prism-solidity.js\": [\n\t\t666,\n\t\t388\n\t],\n\t\"./prism-solidity.min\": [\n\t\t667,\n\t\t389\n\t],\n\t\"./prism-solidity.min.js\": [\n\t\t667,\n\t\t389\n\t],\n\t\"./prism-solution-file\": [\n\t\t668,\n\t\t390\n\t],\n\t\"./prism-solution-file.js\": [\n\t\t668,\n\t\t390\n\t],\n\t\"./prism-solution-file.min\": [\n\t\t669,\n\t\t391\n\t],\n\t\"./prism-solution-file.min.js\": [\n\t\t669,\n\t\t391\n\t],\n\t\"./prism-soy\": [\n\t\t670,\n\t\t392\n\t],\n\t\"./prism-soy.js\": [\n\t\t670,\n\t\t392\n\t],\n\t\"./prism-soy.min\": [\n\t\t671,\n\t\t393\n\t],\n\t\"./prism-soy.min.js\": [\n\t\t671,\n\t\t393\n\t],\n\t\"./prism-sparql\": [\n\t\t672,\n\t\t394\n\t],\n\t\"./prism-sparql.js\": [\n\t\t672,\n\t\t394\n\t],\n\t\"./prism-sparql.min\": [\n\t\t673,\n\t\t395\n\t],\n\t\"./prism-sparql.min.js\": [\n\t\t673,\n\t\t395\n\t],\n\t\"./prism-splunk-spl\": [\n\t\t674,\n\t\t396\n\t],\n\t\"./prism-splunk-spl.js\": [\n\t\t674,\n\t\t396\n\t],\n\t\"./prism-splunk-spl.min\": [\n\t\t675,\n\t\t397\n\t],\n\t\"./prism-splunk-spl.min.js\": [\n\t\t675,\n\t\t397\n\t],\n\t\"./prism-sqf\": [\n\t\t676,\n\t\t398\n\t],\n\t\"./prism-sqf.js\": [\n\t\t676,\n\t\t398\n\t],\n\t\"./prism-sqf.min\": [\n\t\t677,\n\t\t399\n\t],\n\t\"./prism-sqf.min.js\": [\n\t\t677,\n\t\t399\n\t],\n\t\"./prism-sql\": [\n\t\t678,\n\t\t400\n\t],\n\t\"./prism-sql.js\": [\n\t\t678,\n\t\t400\n\t],\n\t\"./prism-sql.min\": [\n\t\t679,\n\t\t401\n\t],\n\t\"./prism-sql.min.js\": [\n\t\t679,\n\t\t401\n\t],\n\t\"./prism-stan\": [\n\t\t680,\n\t\t402\n\t],\n\t\"./prism-stan.js\": [\n\t\t680,\n\t\t402\n\t],\n\t\"./prism-stan.min\": [\n\t\t681,\n\t\t403\n\t],\n\t\"./prism-stan.min.js\": [\n\t\t681,\n\t\t403\n\t],\n\t\"./prism-stylus\": [\n\t\t682,\n\t\t404\n\t],\n\t\"./prism-stylus.js\": [\n\t\t682,\n\t\t404\n\t],\n\t\"./prism-stylus.min\": [\n\t\t683,\n\t\t405\n\t],\n\t\"./prism-stylus.min.js\": [\n\t\t683,\n\t\t405\n\t],\n\t\"./prism-swift\": [\n\t\t684,\n\t\t406\n\t],\n\t\"./prism-swift.js\": [\n\t\t684,\n\t\t406\n\t],\n\t\"./prism-swift.min\": [\n\t\t685,\n\t\t407\n\t],\n\t\"./prism-swift.min.js\": [\n\t\t685,\n\t\t407\n\t],\n\t\"./prism-t4-cs\": [\n\t\t686,\n\t\t408\n\t],\n\t\"./prism-t4-cs.js\": [\n\t\t686,\n\t\t408\n\t],\n\t\"./prism-t4-cs.min\": [\n\t\t687,\n\t\t409\n\t],\n\t\"./prism-t4-cs.min.js\": [\n\t\t687,\n\t\t409\n\t],\n\t\"./prism-t4-templating\": [\n\t\t688,\n\t\t410\n\t],\n\t\"./prism-t4-templating.js\": [\n\t\t688,\n\t\t410\n\t],\n\t\"./prism-t4-templating.min\": [\n\t\t689,\n\t\t411\n\t],\n\t\"./prism-t4-templating.min.js\": [\n\t\t689,\n\t\t411\n\t],\n\t\"./prism-t4-vb\": [\n\t\t690,\n\t\t412\n\t],\n\t\"./prism-t4-vb.js\": [\n\t\t690,\n\t\t412\n\t],\n\t\"./prism-t4-vb.min\": [\n\t\t691,\n\t\t413\n\t],\n\t\"./prism-t4-vb.min.js\": [\n\t\t691,\n\t\t413\n\t],\n\t\"./prism-tap\": [\n\t\t692,\n\t\t414\n\t],\n\t\"./prism-tap.js\": [\n\t\t692,\n\t\t414\n\t],\n\t\"./prism-tap.min\": [\n\t\t693,\n\t\t415\n\t],\n\t\"./prism-tap.min.js\": [\n\t\t693,\n\t\t415\n\t],\n\t\"./prism-tcl\": [\n\t\t694,\n\t\t416\n\t],\n\t\"./prism-tcl.js\": [\n\t\t694,\n\t\t416\n\t],\n\t\"./prism-tcl.min\": [\n\t\t695,\n\t\t417\n\t],\n\t\"./prism-tcl.min.js\": [\n\t\t695,\n\t\t417\n\t],\n\t\"./prism-textile\": [\n\t\t696,\n\t\t418\n\t],\n\t\"./prism-textile.js\": [\n\t\t696,\n\t\t418\n\t],\n\t\"./prism-textile.min\": [\n\t\t697,\n\t\t419\n\t],\n\t\"./prism-textile.min.js\": [\n\t\t697,\n\t\t419\n\t],\n\t\"./prism-toml\": [\n\t\t698,\n\t\t420\n\t],\n\t\"./prism-toml.js\": [\n\t\t698,\n\t\t420\n\t],\n\t\"./prism-toml.min\": [\n\t\t699,\n\t\t421\n\t],\n\t\"./prism-toml.min.js\": [\n\t\t699,\n\t\t421\n\t],\n\t\"./prism-tsx\": [\n\t\t700,\n\t\t422\n\t],\n\t\"./prism-tsx.js\": [\n\t\t700,\n\t\t422\n\t],\n\t\"./prism-tsx.min\": [\n\t\t701,\n\t\t423\n\t],\n\t\"./prism-tsx.min.js\": [\n\t\t701,\n\t\t423\n\t],\n\t\"./prism-tt2\": [\n\t\t702,\n\t\t424\n\t],\n\t\"./prism-tt2.js\": [\n\t\t702,\n\t\t424\n\t],\n\t\"./prism-tt2.min\": [\n\t\t703,\n\t\t425\n\t],\n\t\"./prism-tt2.min.js\": [\n\t\t703,\n\t\t425\n\t],\n\t\"./prism-turtle\": [\n\t\t704,\n\t\t426\n\t],\n\t\"./prism-turtle.js\": [\n\t\t704,\n\t\t426\n\t],\n\t\"./prism-turtle.min\": [\n\t\t705,\n\t\t427\n\t],\n\t\"./prism-turtle.min.js\": [\n\t\t705,\n\t\t427\n\t],\n\t\"./prism-twig\": [\n\t\t706,\n\t\t428\n\t],\n\t\"./prism-twig.js\": [\n\t\t706,\n\t\t428\n\t],\n\t\"./prism-twig.min\": [\n\t\t707,\n\t\t429\n\t],\n\t\"./prism-twig.min.js\": [\n\t\t707,\n\t\t429\n\t],\n\t\"./prism-typescript\": [\n\t\t708,\n\t\t430\n\t],\n\t\"./prism-typescript.js\": [\n\t\t708,\n\t\t430\n\t],\n\t\"./prism-typescript.min\": [\n\t\t709,\n\t\t431\n\t],\n\t\"./prism-typescript.min.js\": [\n\t\t709,\n\t\t431\n\t],\n\t\"./prism-typoscript\": [\n\t\t710,\n\t\t432\n\t],\n\t\"./prism-typoscript.js\": [\n\t\t710,\n\t\t432\n\t],\n\t\"./prism-typoscript.min\": [\n\t\t711,\n\t\t433\n\t],\n\t\"./prism-typoscript.min.js\": [\n\t\t711,\n\t\t433\n\t],\n\t\"./prism-unrealscript\": [\n\t\t712,\n\t\t434\n\t],\n\t\"./prism-unrealscript.js\": [\n\t\t712,\n\t\t434\n\t],\n\t\"./prism-unrealscript.min\": [\n\t\t713,\n\t\t435\n\t],\n\t\"./prism-unrealscript.min.js\": [\n\t\t713,\n\t\t435\n\t],\n\t\"./prism-vala\": [\n\t\t714,\n\t\t436\n\t],\n\t\"./prism-vala.js\": [\n\t\t714,\n\t\t436\n\t],\n\t\"./prism-vala.min\": [\n\t\t715,\n\t\t437\n\t],\n\t\"./prism-vala.min.js\": [\n\t\t715,\n\t\t437\n\t],\n\t\"./prism-vbnet\": [\n\t\t716,\n\t\t438\n\t],\n\t\"./prism-vbnet.js\": [\n\t\t716,\n\t\t438\n\t],\n\t\"./prism-vbnet.min\": [\n\t\t717,\n\t\t439\n\t],\n\t\"./prism-vbnet.min.js\": [\n\t\t717,\n\t\t439\n\t],\n\t\"./prism-velocity\": [\n\t\t718,\n\t\t440\n\t],\n\t\"./prism-velocity.js\": [\n\t\t718,\n\t\t440\n\t],\n\t\"./prism-velocity.min\": [\n\t\t719,\n\t\t441\n\t],\n\t\"./prism-velocity.min.js\": [\n\t\t719,\n\t\t441\n\t],\n\t\"./prism-verilog\": [\n\t\t720,\n\t\t442\n\t],\n\t\"./prism-verilog.js\": [\n\t\t720,\n\t\t442\n\t],\n\t\"./prism-verilog.min\": [\n\t\t721,\n\t\t443\n\t],\n\t\"./prism-verilog.min.js\": [\n\t\t721,\n\t\t443\n\t],\n\t\"./prism-vhdl\": [\n\t\t722,\n\t\t444\n\t],\n\t\"./prism-vhdl.js\": [\n\t\t722,\n\t\t444\n\t],\n\t\"./prism-vhdl.min\": [\n\t\t723,\n\t\t445\n\t],\n\t\"./prism-vhdl.min.js\": [\n\t\t723,\n\t\t445\n\t],\n\t\"./prism-vim\": [\n\t\t724,\n\t\t446\n\t],\n\t\"./prism-vim.js\": [\n\t\t724,\n\t\t446\n\t],\n\t\"./prism-vim.min\": [\n\t\t725,\n\t\t447\n\t],\n\t\"./prism-vim.min.js\": [\n\t\t725,\n\t\t447\n\t],\n\t\"./prism-visual-basic\": [\n\t\t726,\n\t\t448\n\t],\n\t\"./prism-visual-basic.js\": [\n\t\t726,\n\t\t448\n\t],\n\t\"./prism-visual-basic.min\": [\n\t\t727,\n\t\t449\n\t],\n\t\"./prism-visual-basic.min.js\": [\n\t\t727,\n\t\t449\n\t],\n\t\"./prism-warpscript\": [\n\t\t728,\n\t\t450\n\t],\n\t\"./prism-warpscript.js\": [\n\t\t728,\n\t\t450\n\t],\n\t\"./prism-warpscript.min\": [\n\t\t729,\n\t\t451\n\t],\n\t\"./prism-warpscript.min.js\": [\n\t\t729,\n\t\t451\n\t],\n\t\"./prism-wasm\": [\n\t\t730,\n\t\t452\n\t],\n\t\"./prism-wasm.js\": [\n\t\t730,\n\t\t452\n\t],\n\t\"./prism-wasm.min\": [\n\t\t731,\n\t\t453\n\t],\n\t\"./prism-wasm.min.js\": [\n\t\t731,\n\t\t453\n\t],\n\t\"./prism-wiki\": [\n\t\t732,\n\t\t454\n\t],\n\t\"./prism-wiki.js\": [\n\t\t732,\n\t\t454\n\t],\n\t\"./prism-wiki.min\": [\n\t\t733,\n\t\t455\n\t],\n\t\"./prism-wiki.min.js\": [\n\t\t733,\n\t\t455\n\t],\n\t\"./prism-xeora\": [\n\t\t734,\n\t\t456\n\t],\n\t\"./prism-xeora.js\": [\n\t\t734,\n\t\t456\n\t],\n\t\"./prism-xeora.min\": [\n\t\t735,\n\t\t457\n\t],\n\t\"./prism-xeora.min.js\": [\n\t\t735,\n\t\t457\n\t],\n\t\"./prism-xml-doc\": [\n\t\t736,\n\t\t458\n\t],\n\t\"./prism-xml-doc.js\": [\n\t\t736,\n\t\t458\n\t],\n\t\"./prism-xml-doc.min\": [\n\t\t737,\n\t\t459\n\t],\n\t\"./prism-xml-doc.min.js\": [\n\t\t737,\n\t\t459\n\t],\n\t\"./prism-xojo\": [\n\t\t738,\n\t\t460\n\t],\n\t\"./prism-xojo.js\": [\n\t\t738,\n\t\t460\n\t],\n\t\"./prism-xojo.min\": [\n\t\t739,\n\t\t461\n\t],\n\t\"./prism-xojo.min.js\": [\n\t\t739,\n\t\t461\n\t],\n\t\"./prism-xquery\": [\n\t\t740,\n\t\t462\n\t],\n\t\"./prism-xquery.js\": [\n\t\t740,\n\t\t462\n\t],\n\t\"./prism-xquery.min\": [\n\t\t741,\n\t\t463\n\t],\n\t\"./prism-xquery.min.js\": [\n\t\t741,\n\t\t463\n\t],\n\t\"./prism-yaml\": [\n\t\t742,\n\t\t464\n\t],\n\t\"./prism-yaml.js\": [\n\t\t742,\n\t\t464\n\t],\n\t\"./prism-yaml.min\": [\n\t\t743,\n\t\t465\n\t],\n\t\"./prism-yaml.min.js\": [\n\t\t743,\n\t\t465\n\t],\n\t\"./prism-yang\": [\n\t\t744,\n\t\t466\n\t],\n\t\"./prism-yang.js\": [\n\t\t744,\n\t\t466\n\t],\n\t\"./prism-yang.min\": [\n\t\t745,\n\t\t467\n\t],\n\t\"./prism-yang.min.js\": [\n\t\t745,\n\t\t467\n\t],\n\t\"./prism-zig\": [\n\t\t746,\n\t\t468\n\t],\n\t\"./prism-zig.js\": [\n\t\t746,\n\t\t468\n\t],\n\t\"./prism-zig.min\": [\n\t\t747,\n\t\t469\n\t],\n\t\"./prism-zig.min.js\": [\n\t\t747,\n\t\t469\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, 7);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 1109;\nmodule.exports = webpackAsyncContext;","import { ApolloProvider } from '@apollo/client';\nimport { apolloClient } from '@shared';\nimport { Layout } from 'antd';\nimport React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport Menus from './Menus';\nimport LoginPage from './pages/LoginPage/LoginPage';\nimport Routes from './Routes';\nimport { CurrentAdminContext, PrsdiggContext } from './shared';\n\nexport default function App(props: {\n  csrfToken: string;\n  currentAdmin?: { name: String };\n  prsdigg: { appId: String };\n}) {\n  const { csrfToken, currentAdmin, prsdigg } = props;\n  return (\n    <ApolloProvider client={apolloClient('/graphql', csrfToken)}>\n      {currentAdmin ? (\n        <PrsdiggContext.Provider value={prsdigg}>\n          <CurrentAdminContext.Provider value={currentAdmin}>\n            <Router basename='/admin'>\n              <Layout style={{ minHeight: '100vh' }}>\n                <Layout.Sider collapsible>\n                  <Menus />\n                </Layout.Sider>\n                <Layout.Content\n                  style={{ padding: '0 1rem', background: '#fff' }}\n                >\n                  <Routes />\n                </Layout.Content>\n              </Layout>\n            </Router>\n          </CurrentAdminContext.Provider>\n        </PrsdiggContext.Provider>\n      ) : (\n        <LoginPage />\n      )}\n    </ApolloProvider>\n  );\n}\n","require('@rails/ujs').start();\nrequire('@rails/activestorage').start();\nrequire('channels');\n\nvar componentRequireContext = require.context('src/apps/admin', true);\nvar ReactRailsUJS = require('react_ujs');\nReactRailsUJS.useContext(componentRequireContext);\n","var map = {\n\t\"./App\": 1312,\n\t\"./App.tsx\": 1312,\n\t\"./Menus\": 1005,\n\t\"./Menus.tsx\": 1005,\n\t\"./Routes\": 1007,\n\t\"./Routes.tsx\": 1007,\n\t\"./components/CommentsComponent/CommentsComponent\": 264,\n\t\"./components/CommentsComponent/CommentsComponent.tsx\": 264,\n\t\"./components/LoadingComponent/LoadingComponent\": 68,\n\t\"./components/LoadingComponent/LoadingComponent.tsx\": 68,\n\t\"./components/MixinNetworkSnapshotsComponent/MixinNetworkSnapshotComponent\": 265,\n\t\"./components/MixinNetworkSnapshotsComponent/MixinNetworkSnapshotComponent.tsx\": 265,\n\t\"./components/OrdersComponent/OrdersComponent\": 1012,\n\t\"./components/OrdersComponent/OrdersComponent.tsx\": 1012,\n\t\"./components/TransfersComponent/TransfersComponent\": 266,\n\t\"./components/TransfersComponent/TransfersComponent.tsx\": 266,\n\t\"./components/WalletBalanceComponent/WalletBalanceComponent\": 267,\n\t\"./components/WalletBalanceComponent/WalletBalanceComponent.tsx\": 267,\n\t\"./gql/mutations/ban-user.gql\": 1801,\n\t\"./gql/mutations/block-article.gql\": 1802,\n\t\"./gql/mutations/create-annoucement.gql\": 1803,\n\t\"./gql/mutations/create-bonus.gql\": 1804,\n\t\"./gql/mutations/delete-announcement.gql\": 1805,\n\t\"./gql/mutations/delete-comment.gql\": 1806,\n\t\"./gql/mutations/deliver-announcement.gql\": 1807,\n\t\"./gql/mutations/deliver-bonus.gql\": 1808,\n\t\"./gql/mutations/login.gql\": 1809,\n\t\"./gql/mutations/preview-announcement.gql\": 1810,\n\t\"./gql/mutations/recover-comment.gql\": 1811,\n\t\"./gql/mutations/unban-user.gql\": 1812,\n\t\"./gql/mutations/unblock-article.gql\": 1813,\n\t\"./gql/mutations/update-announcement.gql\": 1814,\n\t\"./gql/mutations/update-bonus.gql\": 1815,\n\t\"./gql/queries/announcement-connection.gql\": 1816,\n\t\"./gql/queries/article-chart.gql\": 1817,\n\t\"./gql/queries/article-connection.gql\": 1818,\n\t\"./gql/queries/article.gql\": 1819,\n\t\"./gql/queries/bonus-connection.gql\": 1820,\n\t\"./gql/queries/mixin-message-connection.gql\": 1821,\n\t\"./gql/queries/mixin-network-snapshot-connection.gql\": 1822,\n\t\"./gql/queries/order-connection.gql\": 1823,\n\t\"./gql/queries/payment-connection.gql\": 1824,\n\t\"./gql/queries/revenue-chart.gql\": 1825,\n\t\"./gql/queries/swap-order-connection.gql\": 1826,\n\t\"./gql/queries/transfer-connection.gql\": 1827,\n\t\"./gql/queries/user-chart.gql\": 1828,\n\t\"./gql/queries/user-connection.gql\": 1829,\n\t\"./gql/queries/wallet-balance.gql\": 1830,\n\t\"./pages/AnnouncementsPage/AnnouncementsPage\": 1008,\n\t\"./pages/AnnouncementsPage/AnnouncementsPage.tsx\": 1008,\n\t\"./pages/ArticlePage/ArticlePage\": 1011,\n\t\"./pages/ArticlePage/ArticlePage.tsx\": 1011,\n\t\"./pages/ArticlesPage/ArticlesPage\": 1013,\n\t\"./pages/ArticlesPage/ArticlesPage.tsx\": 1013,\n\t\"./pages/BalancePage/BalancePage\": 1014,\n\t\"./pages/BalancePage/BalancePage.tsx\": 1014,\n\t\"./pages/BonusesPage/BonusesPage\": 1015,\n\t\"./pages/BonusesPage/BonusesPage.tsx\": 1015,\n\t\"./pages/BonusesPage/components/BonusFormModalComponent\": 1016,\n\t\"./pages/BonusesPage/components/BonusFormModalComponent.tsx\": 1016,\n\t\"./pages/CommentsPage/CommentsPage\": 1017,\n\t\"./pages/CommentsPage/CommentsPage.tsx\": 1017,\n\t\"./pages/LoginPage/LoginPage\": 1006,\n\t\"./pages/LoginPage/LoginPage.tsx\": 1006,\n\t\"./pages/MixinMessagesPage/MixinMessagesPage\": 1018,\n\t\"./pages/MixinMessagesPage/MixinMessagesPage.tsx\": 1018,\n\t\"./pages/MixinNetworkSnapshotsPage/MixinNetworkSnapshotsPage\": 1019,\n\t\"./pages/MixinNetworkSnapshotsPage/MixinNetworkSnapshotsPage.tsx\": 1019,\n\t\"./pages/OverviewPage/OverviewPage\": 1020,\n\t\"./pages/OverviewPage/OverviewPage.tsx\": 1020,\n\t\"./pages/PaymentsPage/PaymentsPage\": 1021,\n\t\"./pages/PaymentsPage/PaymentsPage.tsx\": 1021,\n\t\"./pages/SwapOrdersPage/SwapOrdersPage\": 1022,\n\t\"./pages/SwapOrdersPage/SwapOrdersPage.tsx\": 1022,\n\t\"./pages/TransfersPage/TransfersPage\": 1023,\n\t\"./pages/TransfersPage/TransfersPage.tsx\": 1023,\n\t\"./pages/UsersPage/UsersPage\": 1024,\n\t\"./pages/UsersPage/UsersPage.tsx\": 1024,\n\t\"./shared\": 161,\n\t\"./shared/\": 161,\n\t\"./shared/contexts\": 259,\n\t\"./shared/contexts/\": 259,\n\t\"./shared/contexts/CurrentAdminContext\": 861,\n\t\"./shared/contexts/CurrentAdminContext.tsx\": 861,\n\t\"./shared/contexts/PrsdiggContext\": 862,\n\t\"./shared/contexts/PrsdiggContext.tsx\": 862,\n\t\"./shared/contexts/index\": 259,\n\t\"./shared/contexts/index.ts\": 259,\n\t\"./shared/index\": 161,\n\t\"./shared/index.ts\": 161\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1430;","export * from './contexts';\n","import { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  /** An ISO 8601-encoded datetime */\n  ISO8601DateTime: any;\n};\n\n/** Autogenerated input type of AdminBanUserMutation */\nexport type AdminBanUserMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AdminBlockArticleMutation */\nexport type AdminBlockArticleMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AdminCreateAnnouncementMutation */\nexport type AdminCreateAnnouncementMutationInput = {\n  content: Scalars['String'];\n  messageType: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminCreateAnnouncementMutation */\nexport type AdminCreateAnnouncementMutationPayload = {\n  __typename?: 'AdminCreateAnnouncementMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminCreateBonusMutation */\nexport type AdminCreateBonusMutationInput = {\n  userId: Scalars['ID'];\n  amount: Scalars['Float'];\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminCreateBonusMutation */\nexport type AdminCreateBonusMutationPayload = {\n  __typename?: 'AdminCreateBonusMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminDeleteAnnouncementMutation */\nexport type AdminDeleteAnnouncementMutationInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminDeleteAnnouncementMutation */\nexport type AdminDeleteAnnouncementMutationPayload = {\n  __typename?: 'AdminDeleteAnnouncementMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminDeleteCommentMutation */\nexport type AdminDeleteCommentMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminDeleteCommentMutation */\nexport type AdminDeleteCommentMutationPayload = {\n  __typename?: 'AdminDeleteCommentMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminDeliverAnnouncementMutation */\nexport type AdminDeliverAnnouncementMutationInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminDeliverAnnouncementMutation */\nexport type AdminDeliverAnnouncementMutationPayload = {\n  __typename?: 'AdminDeliverAnnouncementMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminDeliverBonusMutation */\nexport type AdminDeliverBonusMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AdminLoginMutation */\nexport type AdminLoginMutationInput = {\n  name: Scalars['String'];\n  password: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminLoginMutation */\nexport type AdminLoginMutationPayload = {\n  __typename?: 'AdminLoginMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminPreviewAnnouncementMutation */\nexport type AdminPreviewAnnouncementMutationInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminPreviewAnnouncementMutation */\nexport type AdminPreviewAnnouncementMutationPayload = {\n  __typename?: 'AdminPreviewAnnouncementMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminRecoverCommentMutation */\nexport type AdminRecoverCommentMutationInput = {\n  id: Scalars['Int'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminRecoverCommentMutation */\nexport type AdminRecoverCommentMutationPayload = {\n  __typename?: 'AdminRecoverCommentMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminUnbanUserMutation */\nexport type AdminUnbanUserMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AdminUnblockArticleMutation */\nexport type AdminUnblockArticleMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of AdminUpdateAnnouncementMutation */\nexport type AdminUpdateAnnouncementMutationInput = {\n  id: Scalars['Int'];\n  content: Scalars['String'];\n  messageType: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminUpdateAnnouncementMutation */\nexport type AdminUpdateAnnouncementMutationPayload = {\n  __typename?: 'AdminUpdateAnnouncementMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of AdminUpdateBonusMutation */\nexport type AdminUpdateBonusMutationInput = {\n  id: Scalars['ID'];\n  userId: Scalars['ID'];\n  amount: Scalars['Float'];\n  title: Scalars['String'];\n  description?: Maybe<Scalars['String']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of AdminUpdateBonusMutation */\nexport type AdminUpdateBonusMutationPayload = {\n  __typename?: 'AdminUpdateBonusMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\nexport type Announcement = {\n  __typename?: 'Announcement';\n  content: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  deliveredAt?: Maybe<Scalars['ISO8601DateTime']>;\n  id: Scalars['Int'];\n  messageType: Scalars['String'];\n  state: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** The connection type for Announcement. */\nexport type AnnouncementConnection = {\n  __typename?: 'AnnouncementConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<AnnouncementEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Announcement>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type AnnouncementEdge = {\n  __typename?: 'AnnouncementEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Announcement>;\n};\n\nexport type Article = {\n  __typename?: 'Article';\n  assetId: Scalars['String'];\n  author: User;\n  authorRevenueAmount: Scalars['Float'];\n  authorized?: Maybe<Scalars['Boolean']>;\n  buyOrders: OrderConnection;\n  buyers: UserConnection;\n  commentingSubscribed?: Maybe<Scalars['Boolean']>;\n  comments: CommentConnection;\n  commentsCount: Scalars['Int'];\n  content?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  downvoted?: Maybe<Scalars['Boolean']>;\n  downvotesCount: Scalars['Int'];\n  id: Scalars['ID'];\n  intro: Scalars['String'];\n  myShare?: Maybe<Scalars['Float']>;\n  ordersCount: Scalars['Int'];\n  partialContent?: Maybe<Scalars['String']>;\n  paymentTraceId?: Maybe<Scalars['String']>;\n  price: Scalars['Float'];\n  readerRevenueAmount: Scalars['Float'];\n  readers: UserConnection;\n  revenue: Scalars['Float'];\n  rewardOrders: OrderConnection;\n  rewarders: UserConnection;\n  state?: Maybe<Scalars['String']>;\n  title: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  upvoteRatio?: Maybe<Scalars['Int']>;\n  upvoted?: Maybe<Scalars['Boolean']>;\n  upvotesCount: Scalars['Int'];\n  uuid: Scalars['ID'];\n  wallet?: Maybe<MixinNetworkUser>;\n  walletId?: Maybe<Scalars['String']>;\n  wordsCount: Scalars['Int'];\n};\n\n\nexport type ArticleBuyOrdersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type ArticleBuyersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type ArticleCommentsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type ArticleReadersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type ArticleRewardOrdersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type ArticleRewardersArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for Article. */\nexport type ArticleConnection = {\n  __typename?: 'ArticleConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<ArticleEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Article>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type ArticleEdge = {\n  __typename?: 'ArticleEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Article>;\n};\n\nexport type Asset = {\n  __typename?: 'Asset';\n  assetId: Scalars['ID'];\n  balance?: Maybe<Scalars['String']>;\n  chainId?: Maybe<Scalars['ID']>;\n  changeBtc?: Maybe<Scalars['String']>;\n  changeUsd?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  iconUrl?: Maybe<Scalars['String']>;\n  name?: Maybe<Scalars['String']>;\n  priceBtc?: Maybe<Scalars['String']>;\n  priceUsd?: Maybe<Scalars['String']>;\n  symbol?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\nexport type Bonus = {\n  __typename?: 'Bonus';\n  amount: Scalars['Float'];\n  assetId: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  description?: Maybe<Scalars['String']>;\n  id: Scalars['ID'];\n  state: Scalars['String'];\n  title: Scalars['String'];\n  traceId: Scalars['String'];\n  transfer?: Maybe<Transfer>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  user: User;\n};\n\n/** The connection type for Bonus. */\nexport type BonusConnection = {\n  __typename?: 'BonusConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<BonusEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Bonus>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type BonusEdge = {\n  __typename?: 'BonusEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Bonus>;\n};\n\nexport type Comment = {\n  __typename?: 'Comment';\n  author?: Maybe<User>;\n  commentable: Article;\n  content?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  deletedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  downvoted?: Maybe<Scalars['Boolean']>;\n  downvotesCount: Scalars['Int'];\n  id: Scalars['ID'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  upvoted?: Maybe<Scalars['Boolean']>;\n  upvotesCount: Scalars['Int'];\n};\n\n/** The connection type for Comment. */\nexport type CommentConnection = {\n  __typename?: 'CommentConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<CommentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Comment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type CommentEdge = {\n  __typename?: 'CommentEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Comment>;\n};\n\n/** Autogenerated input type of CreateArticleMutation */\nexport type CreateArticleMutationInput = {\n  title: Scalars['String'];\n  intro: Scalars['String'];\n  content: Scalars['String'];\n  price: Scalars['Float'];\n  state: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateArticleMutation */\nexport type CreateArticleMutationPayload = {\n  __typename?: 'CreateArticleMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of CreateCommentMutation */\nexport type CreateCommentMutationInput = {\n  commentableId: Scalars['ID'];\n  commentableType: Scalars['String'];\n  content: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of CreateCommentMutation */\nexport type CreateCommentMutationPayload = {\n  __typename?: 'CreateCommentMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  commentable: Article;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of DownvoteArticleMutation */\nexport type DownvoteArticleMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of DownvoteCommentMutation */\nexport type DownvoteCommentMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of HideArticleMutation */\nexport type HideArticleMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of HideArticleMutation */\nexport type HideArticleMutationPayload = {\n  __typename?: 'HideArticleMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n\nexport type MixinMessage = {\n  __typename?: 'MixinMessage';\n  action: Scalars['String'];\n  category: Scalars['String'];\n  content: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['Int'];\n  processedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  user?: Maybe<User>;\n  userId?: Maybe<Scalars['String']>;\n};\n\n/** The connection type for MixinMessage. */\nexport type MixinMessageConnection = {\n  __typename?: 'MixinMessageConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<MixinMessageEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<MixinMessage>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type MixinMessageEdge = {\n  __typename?: 'MixinMessageEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<MixinMessage>;\n};\n\nexport type MixinNetworkSnapshot = {\n  __typename?: 'MixinNetworkSnapshot';\n  amount: Scalars['Float'];\n  article?: Maybe<Article>;\n  assetId: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  data?: Maybe<Scalars['String']>;\n  id: Scalars['Int'];\n  opponent?: Maybe<User>;\n  opponentId: Scalars['String'];\n  processedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  snapshotId: Scalars['String'];\n  traceId: Scalars['ID'];\n  transferredAt: Scalars['ISO8601DateTime'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  userId: Scalars['String'];\n};\n\n/** The connection type for MixinNetworkSnapshot. */\nexport type MixinNetworkSnapshotConnection = {\n  __typename?: 'MixinNetworkSnapshotConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<MixinNetworkSnapshotEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<MixinNetworkSnapshot>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type MixinNetworkSnapshotEdge = {\n  __typename?: 'MixinNetworkSnapshotEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<MixinNetworkSnapshot>;\n};\n\nexport type MixinNetworkUser = {\n  __typename?: 'MixinNetworkUser';\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  owner?: Maybe<MixinNetworkUserOwnerUnion>;\n  ownerId: Scalars['Int'];\n  ownerType: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  uuid: Scalars['ID'];\n};\n\n/** Mixin network user' owner */\nexport type MixinNetworkUserOwnerUnion = Article;\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  adminBanUser?: Maybe<User>;\n  adminBlockArticle?: Maybe<Article>;\n  adminCreateAnnouncement?: Maybe<AdminCreateAnnouncementMutationPayload>;\n  adminCreateBonus?: Maybe<AdminCreateBonusMutationPayload>;\n  adminDeleteAnnouncement?: Maybe<AdminDeleteAnnouncementMutationPayload>;\n  adminDeleteComment?: Maybe<AdminDeleteCommentMutationPayload>;\n  adminDeliverAnnouncement?: Maybe<AdminDeliverAnnouncementMutationPayload>;\n  adminDeliverBonus?: Maybe<Bonus>;\n  adminLogin?: Maybe<AdminLoginMutationPayload>;\n  adminPreviewAnnouncement?: Maybe<AdminPreviewAnnouncementMutationPayload>;\n  adminRecoverComment?: Maybe<AdminRecoverCommentMutationPayload>;\n  adminUnbanUser?: Maybe<User>;\n  adminUnblockArticle?: Maybe<Article>;\n  adminUpdateAnnouncement?: Maybe<AdminUpdateAnnouncementMutationPayload>;\n  adminUpdateBonus?: Maybe<AdminUpdateBonusMutationPayload>;\n  createArticle?: Maybe<CreateArticleMutationPayload>;\n  createComment?: Maybe<CreateCommentMutationPayload>;\n  createdAt: Scalars['ISO8601DateTime'];\n  downvoteArticle?: Maybe<Article>;\n  downvoteComment?: Maybe<Comment>;\n  hideArticle?: Maybe<HideArticleMutationPayload>;\n  publishArticle?: Maybe<PublishArticleMutationPayload>;\n  toggleAuthoringSubscribeUserAction?: Maybe<ToggleAuthoringSubscribeUserActionMutationPayload>;\n  toggleCommentingSubscribeArticleAction?: Maybe<Article>;\n  toggleReadingSubscribeUserAction?: Maybe<ToggleReadingSubscribeUserActionMutationPayload>;\n  updateArticle?: Maybe<UpdateArticleMutationPayload>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  upvoteArticle?: Maybe<Article>;\n  upvoteComment?: Maybe<Comment>;\n};\n\n\nexport type MutationAdminBanUserArgs = {\n  input: AdminBanUserMutationInput;\n};\n\n\nexport type MutationAdminBlockArticleArgs = {\n  input: AdminBlockArticleMutationInput;\n};\n\n\nexport type MutationAdminCreateAnnouncementArgs = {\n  input: AdminCreateAnnouncementMutationInput;\n};\n\n\nexport type MutationAdminCreateBonusArgs = {\n  input: AdminCreateBonusMutationInput;\n};\n\n\nexport type MutationAdminDeleteAnnouncementArgs = {\n  input: AdminDeleteAnnouncementMutationInput;\n};\n\n\nexport type MutationAdminDeleteCommentArgs = {\n  input: AdminDeleteCommentMutationInput;\n};\n\n\nexport type MutationAdminDeliverAnnouncementArgs = {\n  input: AdminDeliverAnnouncementMutationInput;\n};\n\n\nexport type MutationAdminDeliverBonusArgs = {\n  input: AdminDeliverBonusMutationInput;\n};\n\n\nexport type MutationAdminLoginArgs = {\n  input: AdminLoginMutationInput;\n};\n\n\nexport type MutationAdminPreviewAnnouncementArgs = {\n  input: AdminPreviewAnnouncementMutationInput;\n};\n\n\nexport type MutationAdminRecoverCommentArgs = {\n  input: AdminRecoverCommentMutationInput;\n};\n\n\nexport type MutationAdminUnbanUserArgs = {\n  input: AdminUnbanUserMutationInput;\n};\n\n\nexport type MutationAdminUnblockArticleArgs = {\n  input: AdminUnblockArticleMutationInput;\n};\n\n\nexport type MutationAdminUpdateAnnouncementArgs = {\n  input: AdminUpdateAnnouncementMutationInput;\n};\n\n\nexport type MutationAdminUpdateBonusArgs = {\n  input: AdminUpdateBonusMutationInput;\n};\n\n\nexport type MutationCreateArticleArgs = {\n  input: CreateArticleMutationInput;\n};\n\n\nexport type MutationCreateCommentArgs = {\n  input: CreateCommentMutationInput;\n};\n\n\nexport type MutationDownvoteArticleArgs = {\n  input: DownvoteArticleMutationInput;\n};\n\n\nexport type MutationDownvoteCommentArgs = {\n  input: DownvoteCommentMutationInput;\n};\n\n\nexport type MutationHideArticleArgs = {\n  input: HideArticleMutationInput;\n};\n\n\nexport type MutationPublishArticleArgs = {\n  input: PublishArticleMutationInput;\n};\n\n\nexport type MutationToggleAuthoringSubscribeUserActionArgs = {\n  input: ToggleAuthoringSubscribeUserActionMutationInput;\n};\n\n\nexport type MutationToggleCommentingSubscribeArticleActionArgs = {\n  input: ToggleCommentingSubscribeArticleActionMutationInput;\n};\n\n\nexport type MutationToggleReadingSubscribeUserActionArgs = {\n  input: ToggleReadingSubscribeUserActionMutationInput;\n};\n\n\nexport type MutationUpdateArticleArgs = {\n  input: UpdateArticleMutationInput;\n};\n\n\nexport type MutationUpvoteArticleArgs = {\n  input: UpvoteArticleMutationInput;\n};\n\n\nexport type MutationUpvoteCommentArgs = {\n  input: UpvoteCommentMutationInput;\n};\n\nexport type Order = {\n  __typename?: 'Order';\n  buyer: User;\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  item: OrderItemUnion;\n  itemId: Scalars['ID'];\n  itemType: Scalars['String'];\n  orderType: Scalars['String'];\n  seller: User;\n  state: Scalars['String'];\n  total: Scalars['Float'];\n  traceId: Scalars['ID'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** The connection type for Order. */\nexport type OrderConnection = {\n  __typename?: 'OrderConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<OrderEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Order>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type OrderEdge = {\n  __typename?: 'OrderEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Order>;\n};\n\n/** order' item */\nexport type OrderItemUnion = Article;\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  __typename?: 'PageInfo';\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars['String']>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars['Boolean'];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars['Boolean'];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars['String']>;\n};\n\nexport type Payment = {\n  __typename?: 'Payment';\n  amount: Scalars['Float'];\n  assetId: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  memo?: Maybe<Scalars['String']>;\n  order?: Maybe<Order>;\n  payer: User;\n  snapshotId: Scalars['String'];\n  state: Scalars['String'];\n  traceId: Scalars['ID'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** The connection type for Payment. */\nexport type PaymentConnection = {\n  __typename?: 'PaymentConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PaymentEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Payment>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type PaymentEdge = {\n  __typename?: 'PaymentEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Payment>;\n};\n\n/** Autogenerated input type of PublishArticleMutation */\nexport type PublishArticleMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of PublishArticleMutation */\nexport type PublishArticleMutationPayload = {\n  __typename?: 'PublishArticleMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  success?: Maybe<Scalars['Boolean']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  adminAnnouncementConnection: AnnouncementConnection;\n  adminArticle: Article;\n  adminArticleConnection: ArticleConnection;\n  adminBonusConnection: BonusConnection;\n  adminCommentConnection: CommentConnection;\n  adminMixinMessageConnection: MixinMessageConnection;\n  adminMixinNetworkSnapshotConnection: MixinNetworkSnapshotConnection;\n  adminOrderConnection: OrderConnection;\n  adminPaymentConnection: PaymentConnection;\n  adminSwapOrderConnection: SwapOrderConnection;\n  adminTransferConnection: TransferConnection;\n  adminUserConnection: UserConnection;\n  adminWalletBalance: Array<Asset>;\n  article?: Maybe<Article>;\n  articleChart: Scalars['String'];\n  articleConnection: ArticleConnection;\n  commentConnection: CommentConnection;\n  createdAt: Scalars['ISO8601DateTime'];\n  myArticle?: Maybe<Article>;\n  myArticleConnection: ArticleConnection;\n  myArticleOrderConnection?: Maybe<OrderConnection>;\n  myPaymentConnection: PaymentConnection;\n  myStatistics: UserStatistics;\n  mySwapOrderConnection: SwapOrderConnection;\n  myTransferConnection: TransferConnection;\n  payment?: Maybe<Payment>;\n  revenueChart: Scalars['String'];\n  statistics: Statistics;\n  swapPreOrder?: Maybe<SwapPreOrder>;\n  transferConnection: TransferConnection;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  user?: Maybe<User>;\n  userArticleConnection: ArticleConnection;\n  userChart: Scalars['String'];\n};\n\n\nexport type QueryAdminAnnouncementConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminArticleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryAdminArticleConnectionArgs = {\n  query?: Maybe<Scalars['String']>;\n  state?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminBonusConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminCommentConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminMixinMessageConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminMixinNetworkSnapshotConnectionArgs = {\n  userId?: Maybe<Scalars['String']>;\n  filter?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminOrderConnectionArgs = {\n  itemId?: Maybe<Scalars['ID']>;\n  itemType?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminPaymentConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminSwapOrderConnectionArgs = {\n  userId?: Maybe<Scalars['ID']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminTransferConnectionArgs = {\n  itemId?: Maybe<Scalars['ID']>;\n  itemType?: Maybe<Scalars['String']>;\n  sourceId?: Maybe<Scalars['ID']>;\n  sourceType?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminUserConnectionArgs = {\n  query?: Maybe<Scalars['String']>;\n  orderBy?: Maybe<Scalars['String']>;\n  filter?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryAdminWalletBalanceArgs = {\n  userId?: Maybe<Scalars['String']>;\n};\n\n\nexport type QueryArticleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryArticleConnectionArgs = {\n  query?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  order: Scalars['String'];\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryCommentConnectionArgs = {\n  commentableType?: Maybe<Scalars['String']>;\n  commentableId?: Maybe<Scalars['ID']>;\n  authorMixinId?: Maybe<Scalars['String']>;\n  orderBy?: Maybe<Scalars['String']>;\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyArticleArgs = {\n  uuid: Scalars['ID'];\n};\n\n\nexport type QueryMyArticleConnectionArgs = {\n  type: Scalars['String'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyArticleOrderConnectionArgs = {\n  uuid: Scalars['ID'];\n  orderType: Scalars['String'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyPaymentConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMySwapOrderConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryMyTransferConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  transferType?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryPaymentArgs = {\n  traceId: Scalars['ID'];\n};\n\n\nexport type QuerySwapPreOrderArgs = {\n  payAssetId: Scalars['String'];\n  amount: Scalars['Float'];\n};\n\n\nexport type QueryTransferConnectionArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type QueryUserArgs = {\n  mixinId: Scalars['ID'];\n};\n\n\nexport type QueryUserArticleConnectionArgs = {\n  mixinId: Scalars['ID'];\n  type: Scalars['String'];\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\nexport type Statistics = {\n  __typename?: 'Statistics';\n  articlesCount: Scalars['Int'];\n  authorRevenueAmount: Scalars['Float'];\n  createdAt: Scalars['ISO8601DateTime'];\n  readerRevenueAmount: Scalars['Float'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  usersCount: Scalars['Int'];\n};\n\nexport type SwapOrder = {\n  __typename?: 'SwapOrder';\n  amount?: Maybe<Scalars['Float']>;\n  article?: Maybe<Article>;\n  createdAt: Scalars['ISO8601DateTime'];\n  fillAssetId: Scalars['String'];\n  funds?: Maybe<Scalars['Float']>;\n  id: Scalars['ID'];\n  minAmount?: Maybe<Scalars['Float']>;\n  payAssetId: Scalars['String'];\n  payer: User;\n  payment: Payment;\n  state: Scalars['String'];\n  traceId: Scalars['ID'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** The connection type for SwapOrder. */\nexport type SwapOrderConnection = {\n  __typename?: 'SwapOrderConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SwapOrderEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<SwapOrder>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type SwapOrderEdge = {\n  __typename?: 'SwapOrderEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<SwapOrder>;\n};\n\nexport type SwapPreOrder = {\n  __typename?: 'SwapPreOrder';\n  amount: Scalars['Float'];\n  createdAt: Scalars['ISO8601DateTime'];\n  fillAssetId: Scalars['String'];\n  funds: Scalars['Float'];\n  minAmount: Scalars['Float'];\n  payAssetId: Scalars['String'];\n  priceImpact?: Maybe<Scalars['Float']>;\n  routePrice?: Maybe<Scalars['Float']>;\n  state: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of ToggleAuthoringSubscribeUserActionMutation */\nexport type ToggleAuthoringSubscribeUserActionMutationInput = {\n  mixinId: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ToggleAuthoringSubscribeUserActionMutation */\nexport type ToggleAuthoringSubscribeUserActionMutationPayload = {\n  __typename?: 'ToggleAuthoringSubscribeUserActionMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of ToggleCommentingSubscribeArticleActionMutation */\nexport type ToggleCommentingSubscribeArticleActionMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of ToggleReadingSubscribeUserActionMutation */\nexport type ToggleReadingSubscribeUserActionMutationInput = {\n  mixinId: Scalars['String'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of ToggleReadingSubscribeUserActionMutation */\nexport type ToggleReadingSubscribeUserActionMutationPayload = {\n  __typename?: 'ToggleReadingSubscribeUserActionMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\nexport type Transfer = {\n  __typename?: 'Transfer';\n  amount: Scalars['Float'];\n  article?: Maybe<Article>;\n  assetId: Scalars['String'];\n  createdAt: Scalars['ISO8601DateTime'];\n  memo?: Maybe<Scalars['String']>;\n  opponentId?: Maybe<Scalars['String']>;\n  processedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  recipient?: Maybe<User>;\n  snapshotId?: Maybe<Scalars['String']>;\n  traceId: Scalars['ID'];\n  transferType: Scalars['String'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  walletId?: Maybe<Scalars['String']>;\n};\n\n/** The connection type for Transfer. */\nexport type TransferConnection = {\n  __typename?: 'TransferConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<TransferEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<Transfer>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type TransferEdge = {\n  __typename?: 'TransferEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<Transfer>;\n};\n\n/** Autogenerated input type of UpdateArticleMutation */\nexport type UpdateArticleMutationInput = {\n  uuid: Scalars['ID'];\n  title?: Maybe<Scalars['String']>;\n  intro?: Maybe<Scalars['String']>;\n  content?: Maybe<Scalars['String']>;\n  price?: Maybe<Scalars['Float']>;\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated return type of UpdateArticleMutation */\nexport type UpdateArticleMutationPayload = {\n  __typename?: 'UpdateArticleMutationPayload';\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n  createdAt: Scalars['ISO8601DateTime'];\n  error?: Maybe<Scalars['String']>;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n/** Autogenerated input type of UpvoteArticleMutation */\nexport type UpvoteArticleMutationInput = {\n  uuid: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\n/** Autogenerated input type of UpvoteCommentMutation */\nexport type UpvoteCommentMutationInput = {\n  id: Scalars['ID'];\n  /** A unique identifier for the client performing the mutation. */\n  clientMutationId?: Maybe<Scalars['String']>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  articles: ArticleConnection;\n  authoringSubscribed?: Maybe<Scalars['Boolean']>;\n  avatarUrl: Scalars['String'];\n  bannedAt?: Maybe<Scalars['ISO8601DateTime']>;\n  bio?: Maybe<Scalars['String']>;\n  comments: CommentConnection;\n  createdAt: Scalars['ISO8601DateTime'];\n  id: Scalars['ID'];\n  mixinId: Scalars['ID'];\n  mixinUuid: Scalars['String'];\n  name: Scalars['String'];\n  readingSubscribed?: Maybe<Scalars['Boolean']>;\n  statistics: UserStatistics;\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n\nexport type UserArticlesArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n\nexport type UserCommentsArgs = {\n  after?: Maybe<Scalars['String']>;\n  before?: Maybe<Scalars['String']>;\n  first?: Maybe<Scalars['Int']>;\n  last?: Maybe<Scalars['Int']>;\n};\n\n/** The connection type for User. */\nexport type UserConnection = {\n  __typename?: 'UserConnection';\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<UserEdge>>>;\n  /** A list of nodes. */\n  nodes?: Maybe<Array<Maybe<User>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /** Total # of objects returned from this Plural Query */\n  totalCount: Scalars['Int'];\n};\n\n/** An edge in a connection. */\nexport type UserEdge = {\n  __typename?: 'UserEdge';\n  /** A cursor for use in pagination. */\n  cursor: Scalars['String'];\n  /** The item at the end of the edge. */\n  node?: Maybe<User>;\n};\n\nexport type UserStatistics = {\n  __typename?: 'UserStatistics';\n  articlesCount: Scalars['Int'];\n  authorRevenueAmount: Scalars['Float'];\n  boughtArticlesCount: Scalars['Int'];\n  commentsCount: Scalars['Int'];\n  createdAt: Scalars['ISO8601DateTime'];\n  paymentTotal: Scalars['Float'];\n  readerRevenueAmount: Scalars['Float'];\n  revenueTotal: Scalars['Float'];\n  updatedAt?: Maybe<Scalars['ISO8601DateTime']>;\n};\n\n\nexport const AdminBanUserDocument = gql`\n    mutation AdminBanUser($input: AdminBanUserMutationInput!) {\n  adminBanUser(input: $input) {\n    id\n    bannedAt\n  }\n}\n    `;\nexport type AdminBanUserMutationFn = Apollo.MutationFunction<AdminBanUserMutation, AdminBanUserMutationVariables>;\n\n/**\n * __useAdminBanUserMutation__\n *\n * To run a mutation, you first call `useAdminBanUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminBanUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminBanUserMutation, { data, loading, error }] = useAdminBanUserMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminBanUserMutation(baseOptions?: Apollo.MutationHookOptions<AdminBanUserMutation, AdminBanUserMutationVariables>) {\n        return Apollo.useMutation<AdminBanUserMutation, AdminBanUserMutationVariables>(AdminBanUserDocument, baseOptions);\n      }\nexport type AdminBanUserMutationHookResult = ReturnType<typeof useAdminBanUserMutation>;\nexport type AdminBanUserMutationResult = Apollo.MutationResult<AdminBanUserMutation>;\nexport type AdminBanUserMutationOptions = Apollo.BaseMutationOptions<AdminBanUserMutation, AdminBanUserMutationVariables>;\nexport const AdminBlockArticleDocument = gql`\n    mutation AdminBlockArticle($input: AdminBlockArticleMutationInput!) {\n  adminBlockArticle(input: $input) {\n    id\n    uuid\n    state\n  }\n}\n    `;\nexport type AdminBlockArticleMutationFn = Apollo.MutationFunction<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>;\n\n/**\n * __useAdminBlockArticleMutation__\n *\n * To run a mutation, you first call `useAdminBlockArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminBlockArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminBlockArticleMutation, { data, loading, error }] = useAdminBlockArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminBlockArticleMutation(baseOptions?: Apollo.MutationHookOptions<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>) {\n        return Apollo.useMutation<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>(AdminBlockArticleDocument, baseOptions);\n      }\nexport type AdminBlockArticleMutationHookResult = ReturnType<typeof useAdminBlockArticleMutation>;\nexport type AdminBlockArticleMutationResult = Apollo.MutationResult<AdminBlockArticleMutation>;\nexport type AdminBlockArticleMutationOptions = Apollo.BaseMutationOptions<AdminBlockArticleMutation, AdminBlockArticleMutationVariables>;\nexport const AdminCreateAnouncementDocument = gql`\n    mutation AdminCreateAnouncement($input: AdminCreateAnnouncementMutationInput!) {\n  adminCreateAnnouncement(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminCreateAnouncementMutationFn = Apollo.MutationFunction<AdminCreateAnouncementMutation, AdminCreateAnouncementMutationVariables>;\n\n/**\n * __useAdminCreateAnouncementMutation__\n *\n * To run a mutation, you first call `useAdminCreateAnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminCreateAnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminCreateAnouncementMutation, { data, loading, error }] = useAdminCreateAnouncementMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminCreateAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminCreateAnouncementMutation, AdminCreateAnouncementMutationVariables>) {\n        return Apollo.useMutation<AdminCreateAnouncementMutation, AdminCreateAnouncementMutationVariables>(AdminCreateAnouncementDocument, baseOptions);\n      }\nexport type AdminCreateAnouncementMutationHookResult = ReturnType<typeof useAdminCreateAnouncementMutation>;\nexport type AdminCreateAnouncementMutationResult = Apollo.MutationResult<AdminCreateAnouncementMutation>;\nexport type AdminCreateAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminCreateAnouncementMutation, AdminCreateAnouncementMutationVariables>;\nexport const AdminCreateBonusDocument = gql`\n    mutation AdminCreateBonus($input: AdminCreateBonusMutationInput!) {\n  adminCreateBonus(input: $input) {\n    error\n  }\n}\n    `;\nexport type AdminCreateBonusMutationFn = Apollo.MutationFunction<AdminCreateBonusMutation, AdminCreateBonusMutationVariables>;\n\n/**\n * __useAdminCreateBonusMutation__\n *\n * To run a mutation, you first call `useAdminCreateBonusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminCreateBonusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminCreateBonusMutation, { data, loading, error }] = useAdminCreateBonusMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminCreateBonusMutation(baseOptions?: Apollo.MutationHookOptions<AdminCreateBonusMutation, AdminCreateBonusMutationVariables>) {\n        return Apollo.useMutation<AdminCreateBonusMutation, AdminCreateBonusMutationVariables>(AdminCreateBonusDocument, baseOptions);\n      }\nexport type AdminCreateBonusMutationHookResult = ReturnType<typeof useAdminCreateBonusMutation>;\nexport type AdminCreateBonusMutationResult = Apollo.MutationResult<AdminCreateBonusMutation>;\nexport type AdminCreateBonusMutationOptions = Apollo.BaseMutationOptions<AdminCreateBonusMutation, AdminCreateBonusMutationVariables>;\nexport const AdminDeleteAnouncementDocument = gql`\n    mutation AdminDeleteAnouncement($input: AdminDeleteAnnouncementMutationInput!) {\n  adminDeleteAnnouncement(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminDeleteAnouncementMutationFn = Apollo.MutationFunction<AdminDeleteAnouncementMutation, AdminDeleteAnouncementMutationVariables>;\n\n/**\n * __useAdminDeleteAnouncementMutation__\n *\n * To run a mutation, you first call `useAdminDeleteAnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminDeleteAnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminDeleteAnouncementMutation, { data, loading, error }] = useAdminDeleteAnouncementMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminDeleteAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminDeleteAnouncementMutation, AdminDeleteAnouncementMutationVariables>) {\n        return Apollo.useMutation<AdminDeleteAnouncementMutation, AdminDeleteAnouncementMutationVariables>(AdminDeleteAnouncementDocument, baseOptions);\n      }\nexport type AdminDeleteAnouncementMutationHookResult = ReturnType<typeof useAdminDeleteAnouncementMutation>;\nexport type AdminDeleteAnouncementMutationResult = Apollo.MutationResult<AdminDeleteAnouncementMutation>;\nexport type AdminDeleteAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminDeleteAnouncementMutation, AdminDeleteAnouncementMutationVariables>;\nexport const AdminDeleteCommentDocument = gql`\n    mutation AdminDeleteComment($input: AdminDeleteCommentMutationInput!) {\n  adminDeleteComment(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminDeleteCommentMutationFn = Apollo.MutationFunction<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>;\n\n/**\n * __useAdminDeleteCommentMutation__\n *\n * To run a mutation, you first call `useAdminDeleteCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminDeleteCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminDeleteCommentMutation, { data, loading, error }] = useAdminDeleteCommentMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminDeleteCommentMutation(baseOptions?: Apollo.MutationHookOptions<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>) {\n        return Apollo.useMutation<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>(AdminDeleteCommentDocument, baseOptions);\n      }\nexport type AdminDeleteCommentMutationHookResult = ReturnType<typeof useAdminDeleteCommentMutation>;\nexport type AdminDeleteCommentMutationResult = Apollo.MutationResult<AdminDeleteCommentMutation>;\nexport type AdminDeleteCommentMutationOptions = Apollo.BaseMutationOptions<AdminDeleteCommentMutation, AdminDeleteCommentMutationVariables>;\nexport const AdminDeliverAnouncementDocument = gql`\n    mutation AdminDeliverAnouncement($input: AdminDeliverAnnouncementMutationInput!) {\n  adminDeliverAnnouncement(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminDeliverAnouncementMutationFn = Apollo.MutationFunction<AdminDeliverAnouncementMutation, AdminDeliverAnouncementMutationVariables>;\n\n/**\n * __useAdminDeliverAnouncementMutation__\n *\n * To run a mutation, you first call `useAdminDeliverAnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminDeliverAnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminDeliverAnouncementMutation, { data, loading, error }] = useAdminDeliverAnouncementMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminDeliverAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminDeliverAnouncementMutation, AdminDeliverAnouncementMutationVariables>) {\n        return Apollo.useMutation<AdminDeliverAnouncementMutation, AdminDeliverAnouncementMutationVariables>(AdminDeliverAnouncementDocument, baseOptions);\n      }\nexport type AdminDeliverAnouncementMutationHookResult = ReturnType<typeof useAdminDeliverAnouncementMutation>;\nexport type AdminDeliverAnouncementMutationResult = Apollo.MutationResult<AdminDeliverAnouncementMutation>;\nexport type AdminDeliverAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminDeliverAnouncementMutation, AdminDeliverAnouncementMutationVariables>;\nexport const AdminDeliverBonusDocument = gql`\n    mutation AdminDeliverBonus($input: AdminDeliverBonusMutationInput!) {\n  adminDeliverBonus(input: $input) {\n    id\n    state\n  }\n}\n    `;\nexport type AdminDeliverBonusMutationFn = Apollo.MutationFunction<AdminDeliverBonusMutation, AdminDeliverBonusMutationVariables>;\n\n/**\n * __useAdminDeliverBonusMutation__\n *\n * To run a mutation, you first call `useAdminDeliverBonusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminDeliverBonusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminDeliverBonusMutation, { data, loading, error }] = useAdminDeliverBonusMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminDeliverBonusMutation(baseOptions?: Apollo.MutationHookOptions<AdminDeliverBonusMutation, AdminDeliverBonusMutationVariables>) {\n        return Apollo.useMutation<AdminDeliverBonusMutation, AdminDeliverBonusMutationVariables>(AdminDeliverBonusDocument, baseOptions);\n      }\nexport type AdminDeliverBonusMutationHookResult = ReturnType<typeof useAdminDeliverBonusMutation>;\nexport type AdminDeliverBonusMutationResult = Apollo.MutationResult<AdminDeliverBonusMutation>;\nexport type AdminDeliverBonusMutationOptions = Apollo.BaseMutationOptions<AdminDeliverBonusMutation, AdminDeliverBonusMutationVariables>;\nexport const AdminLoginDocument = gql`\n    mutation AdminLogin($input: AdminLoginMutationInput!) {\n  adminLogin(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminLoginMutationFn = Apollo.MutationFunction<AdminLoginMutation, AdminLoginMutationVariables>;\n\n/**\n * __useAdminLoginMutation__\n *\n * To run a mutation, you first call `useAdminLoginMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminLoginMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminLoginMutation, { data, loading, error }] = useAdminLoginMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminLoginMutation(baseOptions?: Apollo.MutationHookOptions<AdminLoginMutation, AdminLoginMutationVariables>) {\n        return Apollo.useMutation<AdminLoginMutation, AdminLoginMutationVariables>(AdminLoginDocument, baseOptions);\n      }\nexport type AdminLoginMutationHookResult = ReturnType<typeof useAdminLoginMutation>;\nexport type AdminLoginMutationResult = Apollo.MutationResult<AdminLoginMutation>;\nexport type AdminLoginMutationOptions = Apollo.BaseMutationOptions<AdminLoginMutation, AdminLoginMutationVariables>;\nexport const AdminPreviewAnouncementDocument = gql`\n    mutation AdminPreviewAnouncement($input: AdminPreviewAnnouncementMutationInput!) {\n  adminPreviewAnnouncement(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminPreviewAnouncementMutationFn = Apollo.MutationFunction<AdminPreviewAnouncementMutation, AdminPreviewAnouncementMutationVariables>;\n\n/**\n * __useAdminPreviewAnouncementMutation__\n *\n * To run a mutation, you first call `useAdminPreviewAnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminPreviewAnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminPreviewAnouncementMutation, { data, loading, error }] = useAdminPreviewAnouncementMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminPreviewAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminPreviewAnouncementMutation, AdminPreviewAnouncementMutationVariables>) {\n        return Apollo.useMutation<AdminPreviewAnouncementMutation, AdminPreviewAnouncementMutationVariables>(AdminPreviewAnouncementDocument, baseOptions);\n      }\nexport type AdminPreviewAnouncementMutationHookResult = ReturnType<typeof useAdminPreviewAnouncementMutation>;\nexport type AdminPreviewAnouncementMutationResult = Apollo.MutationResult<AdminPreviewAnouncementMutation>;\nexport type AdminPreviewAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminPreviewAnouncementMutation, AdminPreviewAnouncementMutationVariables>;\nexport const AdminRecoverCommentDocument = gql`\n    mutation AdminRecoverComment($input: AdminRecoverCommentMutationInput!) {\n  adminRecoverComment(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminRecoverCommentMutationFn = Apollo.MutationFunction<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>;\n\n/**\n * __useAdminRecoverCommentMutation__\n *\n * To run a mutation, you first call `useAdminRecoverCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminRecoverCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminRecoverCommentMutation, { data, loading, error }] = useAdminRecoverCommentMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminRecoverCommentMutation(baseOptions?: Apollo.MutationHookOptions<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>) {\n        return Apollo.useMutation<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>(AdminRecoverCommentDocument, baseOptions);\n      }\nexport type AdminRecoverCommentMutationHookResult = ReturnType<typeof useAdminRecoverCommentMutation>;\nexport type AdminRecoverCommentMutationResult = Apollo.MutationResult<AdminRecoverCommentMutation>;\nexport type AdminRecoverCommentMutationOptions = Apollo.BaseMutationOptions<AdminRecoverCommentMutation, AdminRecoverCommentMutationVariables>;\nexport const AdminUnbanUserDocument = gql`\n    mutation AdminUnbanUser($input: AdminUnbanUserMutationInput!) {\n  adminUnbanUser(input: $input) {\n    id\n    bannedAt\n  }\n}\n    `;\nexport type AdminUnbanUserMutationFn = Apollo.MutationFunction<AdminUnbanUserMutation, AdminUnbanUserMutationVariables>;\n\n/**\n * __useAdminUnbanUserMutation__\n *\n * To run a mutation, you first call `useAdminUnbanUserMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminUnbanUserMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminUnbanUserMutation, { data, loading, error }] = useAdminUnbanUserMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminUnbanUserMutation(baseOptions?: Apollo.MutationHookOptions<AdminUnbanUserMutation, AdminUnbanUserMutationVariables>) {\n        return Apollo.useMutation<AdminUnbanUserMutation, AdminUnbanUserMutationVariables>(AdminUnbanUserDocument, baseOptions);\n      }\nexport type AdminUnbanUserMutationHookResult = ReturnType<typeof useAdminUnbanUserMutation>;\nexport type AdminUnbanUserMutationResult = Apollo.MutationResult<AdminUnbanUserMutation>;\nexport type AdminUnbanUserMutationOptions = Apollo.BaseMutationOptions<AdminUnbanUserMutation, AdminUnbanUserMutationVariables>;\nexport const AdminUnblockArticleDocument = gql`\n    mutation AdminUnblockArticle($input: AdminUnblockArticleMutationInput!) {\n  adminUnblockArticle(input: $input) {\n    id\n    uuid\n    state\n  }\n}\n    `;\nexport type AdminUnblockArticleMutationFn = Apollo.MutationFunction<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>;\n\n/**\n * __useAdminUnblockArticleMutation__\n *\n * To run a mutation, you first call `useAdminUnblockArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminUnblockArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminUnblockArticleMutation, { data, loading, error }] = useAdminUnblockArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminUnblockArticleMutation(baseOptions?: Apollo.MutationHookOptions<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>) {\n        return Apollo.useMutation<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>(AdminUnblockArticleDocument, baseOptions);\n      }\nexport type AdminUnblockArticleMutationHookResult = ReturnType<typeof useAdminUnblockArticleMutation>;\nexport type AdminUnblockArticleMutationResult = Apollo.MutationResult<AdminUnblockArticleMutation>;\nexport type AdminUnblockArticleMutationOptions = Apollo.BaseMutationOptions<AdminUnblockArticleMutation, AdminUnblockArticleMutationVariables>;\nexport const AdminUpdateAnouncementDocument = gql`\n    mutation AdminUpdateAnouncement($input: AdminUpdateAnnouncementMutationInput!) {\n  adminUpdateAnnouncement(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type AdminUpdateAnouncementMutationFn = Apollo.MutationFunction<AdminUpdateAnouncementMutation, AdminUpdateAnouncementMutationVariables>;\n\n/**\n * __useAdminUpdateAnouncementMutation__\n *\n * To run a mutation, you first call `useAdminUpdateAnouncementMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminUpdateAnouncementMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminUpdateAnouncementMutation, { data, loading, error }] = useAdminUpdateAnouncementMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminUpdateAnouncementMutation(baseOptions?: Apollo.MutationHookOptions<AdminUpdateAnouncementMutation, AdminUpdateAnouncementMutationVariables>) {\n        return Apollo.useMutation<AdminUpdateAnouncementMutation, AdminUpdateAnouncementMutationVariables>(AdminUpdateAnouncementDocument, baseOptions);\n      }\nexport type AdminUpdateAnouncementMutationHookResult = ReturnType<typeof useAdminUpdateAnouncementMutation>;\nexport type AdminUpdateAnouncementMutationResult = Apollo.MutationResult<AdminUpdateAnouncementMutation>;\nexport type AdminUpdateAnouncementMutationOptions = Apollo.BaseMutationOptions<AdminUpdateAnouncementMutation, AdminUpdateAnouncementMutationVariables>;\nexport const AdminUpdateBonusDocument = gql`\n    mutation AdminUpdateBonus($input: AdminUpdateBonusMutationInput!) {\n  adminUpdateBonus(input: $input) {\n    error\n  }\n}\n    `;\nexport type AdminUpdateBonusMutationFn = Apollo.MutationFunction<AdminUpdateBonusMutation, AdminUpdateBonusMutationVariables>;\n\n/**\n * __useAdminUpdateBonusMutation__\n *\n * To run a mutation, you first call `useAdminUpdateBonusMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useAdminUpdateBonusMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [adminUpdateBonusMutation, { data, loading, error }] = useAdminUpdateBonusMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useAdminUpdateBonusMutation(baseOptions?: Apollo.MutationHookOptions<AdminUpdateBonusMutation, AdminUpdateBonusMutationVariables>) {\n        return Apollo.useMutation<AdminUpdateBonusMutation, AdminUpdateBonusMutationVariables>(AdminUpdateBonusDocument, baseOptions);\n      }\nexport type AdminUpdateBonusMutationHookResult = ReturnType<typeof useAdminUpdateBonusMutation>;\nexport type AdminUpdateBonusMutationResult = Apollo.MutationResult<AdminUpdateBonusMutation>;\nexport type AdminUpdateBonusMutationOptions = Apollo.BaseMutationOptions<AdminUpdateBonusMutation, AdminUpdateBonusMutationVariables>;\nexport const AdminAnnouncementConnectionDocument = gql`\n    query AdminAnnouncementConnection($after: String) {\n  adminAnnouncementConnection(after: $after) {\n    nodes {\n      id\n      content\n      state\n      messageType\n      createdAt\n      deliveredAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminAnnouncementConnectionQuery__\n *\n * To run a query within a React component, call `useAdminAnnouncementConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminAnnouncementConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminAnnouncementConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminAnnouncementConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>(AdminAnnouncementConnectionDocument, baseOptions);\n      }\nexport function useAdminAnnouncementConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>(AdminAnnouncementConnectionDocument, baseOptions);\n        }\nexport type AdminAnnouncementConnectionQueryHookResult = ReturnType<typeof useAdminAnnouncementConnectionQuery>;\nexport type AdminAnnouncementConnectionLazyQueryHookResult = ReturnType<typeof useAdminAnnouncementConnectionLazyQuery>;\nexport type AdminAnnouncementConnectionQueryResult = Apollo.QueryResult<AdminAnnouncementConnectionQuery, AdminAnnouncementConnectionQueryVariables>;\nexport const ArticleChartDocument = gql`\n    query ArticleChart {\n  articleChart\n}\n    `;\n\n/**\n * __useArticleChartQuery__\n *\n * To run a query within a React component, call `useArticleChartQuery` and pass it any options that fit your needs.\n * When your component renders, `useArticleChartQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArticleChartQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useArticleChartQuery(baseOptions?: Apollo.QueryHookOptions<ArticleChartQuery, ArticleChartQueryVariables>) {\n        return Apollo.useQuery<ArticleChartQuery, ArticleChartQueryVariables>(ArticleChartDocument, baseOptions);\n      }\nexport function useArticleChartLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ArticleChartQuery, ArticleChartQueryVariables>) {\n          return Apollo.useLazyQuery<ArticleChartQuery, ArticleChartQueryVariables>(ArticleChartDocument, baseOptions);\n        }\nexport type ArticleChartQueryHookResult = ReturnType<typeof useArticleChartQuery>;\nexport type ArticleChartLazyQueryHookResult = ReturnType<typeof useArticleChartLazyQuery>;\nexport type ArticleChartQueryResult = Apollo.QueryResult<ArticleChartQuery, ArticleChartQueryVariables>;\nexport const AdminArticleConnectionDocument = gql`\n    query AdminArticleConnection($query: String, $state: String, $after: String) {\n  adminArticleConnection(query: $query, state: $state, after: $after) {\n    nodes {\n      id\n      uuid\n      title\n      intro\n      price\n      revenue\n      ordersCount\n      commentsCount\n      state\n      wallet {\n        name\n        uuid\n      }\n      author {\n        name\n        avatarUrl\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminArticleConnectionQuery__\n *\n * To run a query within a React component, call `useAdminArticleConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminArticleConnectionQuery({\n *   variables: {\n *      query: // value for 'query'\n *      state: // value for 'state'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminArticleConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>(AdminArticleConnectionDocument, baseOptions);\n      }\nexport function useAdminArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>(AdminArticleConnectionDocument, baseOptions);\n        }\nexport type AdminArticleConnectionQueryHookResult = ReturnType<typeof useAdminArticleConnectionQuery>;\nexport type AdminArticleConnectionLazyQueryHookResult = ReturnType<typeof useAdminArticleConnectionLazyQuery>;\nexport type AdminArticleConnectionQueryResult = Apollo.QueryResult<AdminArticleConnectionQuery, AdminArticleConnectionQueryVariables>;\nexport const AdminArticleDocument = gql`\n    query AdminArticle($uuid: ID!) {\n  adminArticle(uuid: $uuid) {\n    id\n    uuid\n    title\n    intro\n    price\n    revenue\n    ordersCount\n    commentsCount\n    state\n    walletId\n    author {\n      name\n      avatarUrl\n    }\n    createdAt\n  }\n}\n    `;\n\n/**\n * __useAdminArticleQuery__\n *\n * To run a query within a React component, call `useAdminArticleQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminArticleQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminArticleQuery({\n *   variables: {\n *      uuid: // value for 'uuid'\n *   },\n * });\n */\nexport function useAdminArticleQuery(baseOptions: Apollo.QueryHookOptions<AdminArticleQuery, AdminArticleQueryVariables>) {\n        return Apollo.useQuery<AdminArticleQuery, AdminArticleQueryVariables>(AdminArticleDocument, baseOptions);\n      }\nexport function useAdminArticleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminArticleQuery, AdminArticleQueryVariables>) {\n          return Apollo.useLazyQuery<AdminArticleQuery, AdminArticleQueryVariables>(AdminArticleDocument, baseOptions);\n        }\nexport type AdminArticleQueryHookResult = ReturnType<typeof useAdminArticleQuery>;\nexport type AdminArticleLazyQueryHookResult = ReturnType<typeof useAdminArticleLazyQuery>;\nexport type AdminArticleQueryResult = Apollo.QueryResult<AdminArticleQuery, AdminArticleQueryVariables>;\nexport const AdminBonusConnectionDocument = gql`\n    query AdminBonusConnection($after: String) {\n  adminBonusConnection(after: $after) {\n    nodes {\n      id\n      title\n      description\n      amount\n      assetId\n      state\n      createdAt\n      user {\n        id\n        avatarUrl\n        name\n        mixinId\n      }\n      transfer {\n        snapshotId\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminBonusConnectionQuery__\n *\n * To run a query within a React component, call `useAdminBonusConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminBonusConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminBonusConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminBonusConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>(AdminBonusConnectionDocument, baseOptions);\n      }\nexport function useAdminBonusConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>(AdminBonusConnectionDocument, baseOptions);\n        }\nexport type AdminBonusConnectionQueryHookResult = ReturnType<typeof useAdminBonusConnectionQuery>;\nexport type AdminBonusConnectionLazyQueryHookResult = ReturnType<typeof useAdminBonusConnectionLazyQuery>;\nexport type AdminBonusConnectionQueryResult = Apollo.QueryResult<AdminBonusConnectionQuery, AdminBonusConnectionQueryVariables>;\nexport const AdminMixinMessageConnectionDocument = gql`\n    query AdminMixinMessageConnection($after: String) {\n  adminMixinMessageConnection(after: $after) {\n    nodes {\n      id\n      action\n      category\n      content\n      userId\n      user {\n        name\n        avatarUrl\n      }\n      createdAt\n      processedAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminMixinMessageConnectionQuery__\n *\n * To run a query within a React component, call `useAdminMixinMessageConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminMixinMessageConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminMixinMessageConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminMixinMessageConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>(AdminMixinMessageConnectionDocument, baseOptions);\n      }\nexport function useAdminMixinMessageConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>(AdminMixinMessageConnectionDocument, baseOptions);\n        }\nexport type AdminMixinMessageConnectionQueryHookResult = ReturnType<typeof useAdminMixinMessageConnectionQuery>;\nexport type AdminMixinMessageConnectionLazyQueryHookResult = ReturnType<typeof useAdminMixinMessageConnectionLazyQuery>;\nexport type AdminMixinMessageConnectionQueryResult = Apollo.QueryResult<AdminMixinMessageConnectionQuery, AdminMixinMessageConnectionQueryVariables>;\nexport const AdminMixinNetworkSnapshotConnectionDocument = gql`\n    query AdminMixinNetworkSnapshotConnection($filter: String, $userId: String, $after: String) {\n  adminMixinNetworkSnapshotConnection(\n    filter: $filter\n    userId: $userId\n    after: $after\n  ) {\n    nodes {\n      id\n      traceId\n      snapshotId\n      assetId\n      userId\n      amount\n      data\n      opponentId\n      opponent {\n        name\n        avatarUrl\n        mixinId\n      }\n      article {\n        id\n        uuid\n        title\n      }\n      createdAt\n      processedAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminMixinNetworkSnapshotConnectionQuery__\n *\n * To run a query within a React component, call `useAdminMixinNetworkSnapshotConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminMixinNetworkSnapshotConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminMixinNetworkSnapshotConnectionQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      userId: // value for 'userId'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminMixinNetworkSnapshotConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>(AdminMixinNetworkSnapshotConnectionDocument, baseOptions);\n      }\nexport function useAdminMixinNetworkSnapshotConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>(AdminMixinNetworkSnapshotConnectionDocument, baseOptions);\n        }\nexport type AdminMixinNetworkSnapshotConnectionQueryHookResult = ReturnType<typeof useAdminMixinNetworkSnapshotConnectionQuery>;\nexport type AdminMixinNetworkSnapshotConnectionLazyQueryHookResult = ReturnType<typeof useAdminMixinNetworkSnapshotConnectionLazyQuery>;\nexport type AdminMixinNetworkSnapshotConnectionQueryResult = Apollo.QueryResult<AdminMixinNetworkSnapshotConnectionQuery, AdminMixinNetworkSnapshotConnectionQueryVariables>;\nexport const AdminOrderConnectionDocument = gql`\n    query AdminOrderConnection($itemId: ID, $itemType: String, $after: String) {\n  adminOrderConnection(itemId: $itemId, itemType: $itemType, after: $after) {\n    nodes {\n      id\n      traceId\n      orderType\n      itemId\n      itemType\n      state\n      total\n      seller {\n        name\n        avatarUrl\n        mixinId\n      }\n      buyer {\n        name\n        avatarUrl\n        mixinId\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminOrderConnectionQuery__\n *\n * To run a query within a React component, call `useAdminOrderConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminOrderConnectionQuery({\n *   variables: {\n *      itemId: // value for 'itemId'\n *      itemType: // value for 'itemType'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminOrderConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>(AdminOrderConnectionDocument, baseOptions);\n      }\nexport function useAdminOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>(AdminOrderConnectionDocument, baseOptions);\n        }\nexport type AdminOrderConnectionQueryHookResult = ReturnType<typeof useAdminOrderConnectionQuery>;\nexport type AdminOrderConnectionLazyQueryHookResult = ReturnType<typeof useAdminOrderConnectionLazyQuery>;\nexport type AdminOrderConnectionQueryResult = Apollo.QueryResult<AdminOrderConnectionQuery, AdminOrderConnectionQueryVariables>;\nexport const AdminPaymentConnectionDocument = gql`\n    query AdminPaymentConnection($after: String) {\n  adminPaymentConnection(after: $after) {\n    nodes {\n      traceId\n      snapshotId\n      amount\n      state\n      assetId\n      payer {\n        name\n        mixinId\n        avatarUrl\n      }\n      order {\n        orderType\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminPaymentConnectionQuery__\n *\n * To run a query within a React component, call `useAdminPaymentConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminPaymentConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminPaymentConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminPaymentConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>(AdminPaymentConnectionDocument, baseOptions);\n      }\nexport function useAdminPaymentConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>(AdminPaymentConnectionDocument, baseOptions);\n        }\nexport type AdminPaymentConnectionQueryHookResult = ReturnType<typeof useAdminPaymentConnectionQuery>;\nexport type AdminPaymentConnectionLazyQueryHookResult = ReturnType<typeof useAdminPaymentConnectionLazyQuery>;\nexport type AdminPaymentConnectionQueryResult = Apollo.QueryResult<AdminPaymentConnectionQuery, AdminPaymentConnectionQueryVariables>;\nexport const RevenueChartDocument = gql`\n    query RevenueChart {\n  revenueChart\n}\n    `;\n\n/**\n * __useRevenueChartQuery__\n *\n * To run a query within a React component, call `useRevenueChartQuery` and pass it any options that fit your needs.\n * When your component renders, `useRevenueChartQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useRevenueChartQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useRevenueChartQuery(baseOptions?: Apollo.QueryHookOptions<RevenueChartQuery, RevenueChartQueryVariables>) {\n        return Apollo.useQuery<RevenueChartQuery, RevenueChartQueryVariables>(RevenueChartDocument, baseOptions);\n      }\nexport function useRevenueChartLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<RevenueChartQuery, RevenueChartQueryVariables>) {\n          return Apollo.useLazyQuery<RevenueChartQuery, RevenueChartQueryVariables>(RevenueChartDocument, baseOptions);\n        }\nexport type RevenueChartQueryHookResult = ReturnType<typeof useRevenueChartQuery>;\nexport type RevenueChartLazyQueryHookResult = ReturnType<typeof useRevenueChartLazyQuery>;\nexport type RevenueChartQueryResult = Apollo.QueryResult<RevenueChartQuery, RevenueChartQueryVariables>;\nexport const AdminSwapOrderConnectionDocument = gql`\n    query AdminSwapOrderConnection($userId: ID, $after: String) {\n  adminSwapOrderConnection(userId: $userId, after: $after) {\n    nodes {\n      id\n      traceId\n      state\n      funds\n      amount\n      minAmount\n      fillAssetId\n      payAssetId\n      article {\n        uuid\n        title\n        price\n      }\n      payer {\n        name\n        avatarUrl\n        mixinId\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminSwapOrderConnectionQuery__\n *\n * To run a query within a React component, call `useAdminSwapOrderConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminSwapOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminSwapOrderConnectionQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminSwapOrderConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>(AdminSwapOrderConnectionDocument, baseOptions);\n      }\nexport function useAdminSwapOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>(AdminSwapOrderConnectionDocument, baseOptions);\n        }\nexport type AdminSwapOrderConnectionQueryHookResult = ReturnType<typeof useAdminSwapOrderConnectionQuery>;\nexport type AdminSwapOrderConnectionLazyQueryHookResult = ReturnType<typeof useAdminSwapOrderConnectionLazyQuery>;\nexport type AdminSwapOrderConnectionQueryResult = Apollo.QueryResult<AdminSwapOrderConnectionQuery, AdminSwapOrderConnectionQueryVariables>;\nexport const AdminTransferConnectionDocument = gql`\n    query AdminTransferConnection($itemId: ID, $itemType: String, $souceId: ID, $souceType: String, $after: String) {\n  adminTransferConnection(\n    itemId: $itemId\n    itemType: $itemType\n    sourceId: $souceId\n    sourceType: $souceType\n    after: $after\n  ) {\n    nodes {\n      traceId\n      snapshotId\n      amount\n      memo\n      transferType\n      assetId\n      opponentId\n      walletId\n      recipient {\n        name\n        avatarUrl\n        mixinId\n      }\n      processedAt\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminTransferConnectionQuery__\n *\n * To run a query within a React component, call `useAdminTransferConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminTransferConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminTransferConnectionQuery({\n *   variables: {\n *      itemId: // value for 'itemId'\n *      itemType: // value for 'itemType'\n *      souceId: // value for 'souceId'\n *      souceType: // value for 'souceType'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminTransferConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>(AdminTransferConnectionDocument, baseOptions);\n      }\nexport function useAdminTransferConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>(AdminTransferConnectionDocument, baseOptions);\n        }\nexport type AdminTransferConnectionQueryHookResult = ReturnType<typeof useAdminTransferConnectionQuery>;\nexport type AdminTransferConnectionLazyQueryHookResult = ReturnType<typeof useAdminTransferConnectionLazyQuery>;\nexport type AdminTransferConnectionQueryResult = Apollo.QueryResult<AdminTransferConnectionQuery, AdminTransferConnectionQueryVariables>;\nexport const UserChartDocument = gql`\n    query UserChart {\n  userChart\n}\n    `;\n\n/**\n * __useUserChartQuery__\n *\n * To run a query within a React component, call `useUserChartQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserChartQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserChartQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useUserChartQuery(baseOptions?: Apollo.QueryHookOptions<UserChartQuery, UserChartQueryVariables>) {\n        return Apollo.useQuery<UserChartQuery, UserChartQueryVariables>(UserChartDocument, baseOptions);\n      }\nexport function useUserChartLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserChartQuery, UserChartQueryVariables>) {\n          return Apollo.useLazyQuery<UserChartQuery, UserChartQueryVariables>(UserChartDocument, baseOptions);\n        }\nexport type UserChartQueryHookResult = ReturnType<typeof useUserChartQuery>;\nexport type UserChartLazyQueryHookResult = ReturnType<typeof useUserChartLazyQuery>;\nexport type UserChartQueryResult = Apollo.QueryResult<UserChartQuery, UserChartQueryVariables>;\nexport const AdminUserConnectionDocument = gql`\n    query AdminUserConnection($query: String, $orderBy: String, $filter: String, $after: String) {\n  adminUserConnection(\n    query: $query\n    orderBy: $orderBy\n    filter: $filter\n    after: $after\n  ) {\n    nodes {\n      id\n      name\n      mixinId\n      mixinUuid\n      avatarUrl\n      statistics {\n        articlesCount\n        commentsCount\n        revenueTotal\n        paymentTotal\n      }\n      createdAt\n      bannedAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useAdminUserConnectionQuery__\n *\n * To run a query within a React component, call `useAdminUserConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminUserConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminUserConnectionQuery({\n *   variables: {\n *      query: // value for 'query'\n *      orderBy: // value for 'orderBy'\n *      filter: // value for 'filter'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useAdminUserConnectionQuery(baseOptions?: Apollo.QueryHookOptions<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>) {\n        return Apollo.useQuery<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>(AdminUserConnectionDocument, baseOptions);\n      }\nexport function useAdminUserConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>(AdminUserConnectionDocument, baseOptions);\n        }\nexport type AdminUserConnectionQueryHookResult = ReturnType<typeof useAdminUserConnectionQuery>;\nexport type AdminUserConnectionLazyQueryHookResult = ReturnType<typeof useAdminUserConnectionLazyQuery>;\nexport type AdminUserConnectionQueryResult = Apollo.QueryResult<AdminUserConnectionQuery, AdminUserConnectionQueryVariables>;\nexport const AdminWalletBalanceDocument = gql`\n    query AdminWalletBalance($userId: String) {\n  adminWalletBalance(userId: $userId) {\n    assetId\n    name\n    symbol\n    iconUrl\n    balance\n    priceUsd\n    priceBtc\n  }\n}\n    `;\n\n/**\n * __useAdminWalletBalanceQuery__\n *\n * To run a query within a React component, call `useAdminWalletBalanceQuery` and pass it any options that fit your needs.\n * When your component renders, `useAdminWalletBalanceQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useAdminWalletBalanceQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *   },\n * });\n */\nexport function useAdminWalletBalanceQuery(baseOptions?: Apollo.QueryHookOptions<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>) {\n        return Apollo.useQuery<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>(AdminWalletBalanceDocument, baseOptions);\n      }\nexport function useAdminWalletBalanceLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>) {\n          return Apollo.useLazyQuery<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>(AdminWalletBalanceDocument, baseOptions);\n        }\nexport type AdminWalletBalanceQueryHookResult = ReturnType<typeof useAdminWalletBalanceQuery>;\nexport type AdminWalletBalanceLazyQueryHookResult = ReturnType<typeof useAdminWalletBalanceLazyQuery>;\nexport type AdminWalletBalanceQueryResult = Apollo.QueryResult<AdminWalletBalanceQuery, AdminWalletBalanceQueryVariables>;\nexport const CreateCommentDocument = gql`\n    mutation CreateComment($input: CreateCommentMutationInput!) {\n  createComment(input: $input) {\n    error\n    commentable {\n      id\n      commentingSubscribed\n    }\n  }\n}\n    `;\nexport type CreateCommentMutationFn = Apollo.MutationFunction<CreateCommentMutation, CreateCommentMutationVariables>;\n\n/**\n * __useCreateCommentMutation__\n *\n * To run a mutation, you first call `useCreateCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createCommentMutation, { data, loading, error }] = useCreateCommentMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateCommentMutation(baseOptions?: Apollo.MutationHookOptions<CreateCommentMutation, CreateCommentMutationVariables>) {\n        return Apollo.useMutation<CreateCommentMutation, CreateCommentMutationVariables>(CreateCommentDocument, baseOptions);\n      }\nexport type CreateCommentMutationHookResult = ReturnType<typeof useCreateCommentMutation>;\nexport type CreateCommentMutationResult = Apollo.MutationResult<CreateCommentMutation>;\nexport type CreateCommentMutationOptions = Apollo.BaseMutationOptions<CreateCommentMutation, CreateCommentMutationVariables>;\nexport const DownvoteArticleDocument = gql`\n    mutation DownvoteArticle($input: DownvoteArticleMutationInput!) {\n  downvoteArticle(input: $input) {\n    id\n    uuid\n    upvotesCount\n    downvotesCount\n    upvoted\n    downvoted\n  }\n}\n    `;\nexport type DownvoteArticleMutationFn = Apollo.MutationFunction<DownvoteArticleMutation, DownvoteArticleMutationVariables>;\n\n/**\n * __useDownvoteArticleMutation__\n *\n * To run a mutation, you first call `useDownvoteArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDownvoteArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [downvoteArticleMutation, { data, loading, error }] = useDownvoteArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useDownvoteArticleMutation(baseOptions?: Apollo.MutationHookOptions<DownvoteArticleMutation, DownvoteArticleMutationVariables>) {\n        return Apollo.useMutation<DownvoteArticleMutation, DownvoteArticleMutationVariables>(DownvoteArticleDocument, baseOptions);\n      }\nexport type DownvoteArticleMutationHookResult = ReturnType<typeof useDownvoteArticleMutation>;\nexport type DownvoteArticleMutationResult = Apollo.MutationResult<DownvoteArticleMutation>;\nexport type DownvoteArticleMutationOptions = Apollo.BaseMutationOptions<DownvoteArticleMutation, DownvoteArticleMutationVariables>;\nexport const DownvoteCommentDocument = gql`\n    mutation DownvoteComment($input: DownvoteCommentMutationInput!) {\n  downvoteComment(input: $input) {\n    id\n    upvoted\n    downvoted\n    upvotesCount\n    downvotesCount\n  }\n}\n    `;\nexport type DownvoteCommentMutationFn = Apollo.MutationFunction<DownvoteCommentMutation, DownvoteCommentMutationVariables>;\n\n/**\n * __useDownvoteCommentMutation__\n *\n * To run a mutation, you first call `useDownvoteCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useDownvoteCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [downvoteCommentMutation, { data, loading, error }] = useDownvoteCommentMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useDownvoteCommentMutation(baseOptions?: Apollo.MutationHookOptions<DownvoteCommentMutation, DownvoteCommentMutationVariables>) {\n        return Apollo.useMutation<DownvoteCommentMutation, DownvoteCommentMutationVariables>(DownvoteCommentDocument, baseOptions);\n      }\nexport type DownvoteCommentMutationHookResult = ReturnType<typeof useDownvoteCommentMutation>;\nexport type DownvoteCommentMutationResult = Apollo.MutationResult<DownvoteCommentMutation>;\nexport type DownvoteCommentMutationOptions = Apollo.BaseMutationOptions<DownvoteCommentMutation, DownvoteCommentMutationVariables>;\nexport const ToggleAuthoringSubscribeUserActionDocument = gql`\n    mutation ToggleAuthoringSubscribeUserAction($input: ToggleAuthoringSubscribeUserActionMutationInput!) {\n  toggleAuthoringSubscribeUserAction(input: $input) {\n    error\n  }\n}\n    `;\nexport type ToggleAuthoringSubscribeUserActionMutationFn = Apollo.MutationFunction<ToggleAuthoringSubscribeUserActionMutation, ToggleAuthoringSubscribeUserActionMutationVariables>;\n\n/**\n * __useToggleAuthoringSubscribeUserActionMutation__\n *\n * To run a mutation, you first call `useToggleAuthoringSubscribeUserActionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleAuthoringSubscribeUserActionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleAuthoringSubscribeUserActionMutation, { data, loading, error }] = useToggleAuthoringSubscribeUserActionMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useToggleAuthoringSubscribeUserActionMutation(baseOptions?: Apollo.MutationHookOptions<ToggleAuthoringSubscribeUserActionMutation, ToggleAuthoringSubscribeUserActionMutationVariables>) {\n        return Apollo.useMutation<ToggleAuthoringSubscribeUserActionMutation, ToggleAuthoringSubscribeUserActionMutationVariables>(ToggleAuthoringSubscribeUserActionDocument, baseOptions);\n      }\nexport type ToggleAuthoringSubscribeUserActionMutationHookResult = ReturnType<typeof useToggleAuthoringSubscribeUserActionMutation>;\nexport type ToggleAuthoringSubscribeUserActionMutationResult = Apollo.MutationResult<ToggleAuthoringSubscribeUserActionMutation>;\nexport type ToggleAuthoringSubscribeUserActionMutationOptions = Apollo.BaseMutationOptions<ToggleAuthoringSubscribeUserActionMutation, ToggleAuthoringSubscribeUserActionMutationVariables>;\nexport const ToggleCommentingSubscribeArticleActionDocument = gql`\n    mutation ToggleCommentingSubscribeArticleAction($input: ToggleCommentingSubscribeArticleActionMutationInput!) {\n  toggleCommentingSubscribeArticleAction(input: $input) {\n    id\n    uuid\n    commentingSubscribed\n  }\n}\n    `;\nexport type ToggleCommentingSubscribeArticleActionMutationFn = Apollo.MutationFunction<ToggleCommentingSubscribeArticleActionMutation, ToggleCommentingSubscribeArticleActionMutationVariables>;\n\n/**\n * __useToggleCommentingSubscribeArticleActionMutation__\n *\n * To run a mutation, you first call `useToggleCommentingSubscribeArticleActionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleCommentingSubscribeArticleActionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleCommentingSubscribeArticleActionMutation, { data, loading, error }] = useToggleCommentingSubscribeArticleActionMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useToggleCommentingSubscribeArticleActionMutation(baseOptions?: Apollo.MutationHookOptions<ToggleCommentingSubscribeArticleActionMutation, ToggleCommentingSubscribeArticleActionMutationVariables>) {\n        return Apollo.useMutation<ToggleCommentingSubscribeArticleActionMutation, ToggleCommentingSubscribeArticleActionMutationVariables>(ToggleCommentingSubscribeArticleActionDocument, baseOptions);\n      }\nexport type ToggleCommentingSubscribeArticleActionMutationHookResult = ReturnType<typeof useToggleCommentingSubscribeArticleActionMutation>;\nexport type ToggleCommentingSubscribeArticleActionMutationResult = Apollo.MutationResult<ToggleCommentingSubscribeArticleActionMutation>;\nexport type ToggleCommentingSubscribeArticleActionMutationOptions = Apollo.BaseMutationOptions<ToggleCommentingSubscribeArticleActionMutation, ToggleCommentingSubscribeArticleActionMutationVariables>;\nexport const ToggleReadingSubscribeUserActionDocument = gql`\n    mutation ToggleReadingSubscribeUserAction($input: ToggleReadingSubscribeUserActionMutationInput!) {\n  toggleReadingSubscribeUserAction(input: $input) {\n    error\n  }\n}\n    `;\nexport type ToggleReadingSubscribeUserActionMutationFn = Apollo.MutationFunction<ToggleReadingSubscribeUserActionMutation, ToggleReadingSubscribeUserActionMutationVariables>;\n\n/**\n * __useToggleReadingSubscribeUserActionMutation__\n *\n * To run a mutation, you first call `useToggleReadingSubscribeUserActionMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useToggleReadingSubscribeUserActionMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [toggleReadingSubscribeUserActionMutation, { data, loading, error }] = useToggleReadingSubscribeUserActionMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useToggleReadingSubscribeUserActionMutation(baseOptions?: Apollo.MutationHookOptions<ToggleReadingSubscribeUserActionMutation, ToggleReadingSubscribeUserActionMutationVariables>) {\n        return Apollo.useMutation<ToggleReadingSubscribeUserActionMutation, ToggleReadingSubscribeUserActionMutationVariables>(ToggleReadingSubscribeUserActionDocument, baseOptions);\n      }\nexport type ToggleReadingSubscribeUserActionMutationHookResult = ReturnType<typeof useToggleReadingSubscribeUserActionMutation>;\nexport type ToggleReadingSubscribeUserActionMutationResult = Apollo.MutationResult<ToggleReadingSubscribeUserActionMutation>;\nexport type ToggleReadingSubscribeUserActionMutationOptions = Apollo.BaseMutationOptions<ToggleReadingSubscribeUserActionMutation, ToggleReadingSubscribeUserActionMutationVariables>;\nexport const UpvoteArticleDocument = gql`\n    mutation UpvoteArticle($input: UpvoteArticleMutationInput!) {\n  upvoteArticle(input: $input) {\n    id\n    uuid\n    upvotesCount\n    downvotesCount\n    upvoted\n    downvoted\n  }\n}\n    `;\nexport type UpvoteArticleMutationFn = Apollo.MutationFunction<UpvoteArticleMutation, UpvoteArticleMutationVariables>;\n\n/**\n * __useUpvoteArticleMutation__\n *\n * To run a mutation, you first call `useUpvoteArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpvoteArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [upvoteArticleMutation, { data, loading, error }] = useUpvoteArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpvoteArticleMutation(baseOptions?: Apollo.MutationHookOptions<UpvoteArticleMutation, UpvoteArticleMutationVariables>) {\n        return Apollo.useMutation<UpvoteArticleMutation, UpvoteArticleMutationVariables>(UpvoteArticleDocument, baseOptions);\n      }\nexport type UpvoteArticleMutationHookResult = ReturnType<typeof useUpvoteArticleMutation>;\nexport type UpvoteArticleMutationResult = Apollo.MutationResult<UpvoteArticleMutation>;\nexport type UpvoteArticleMutationOptions = Apollo.BaseMutationOptions<UpvoteArticleMutation, UpvoteArticleMutationVariables>;\nexport const UpvoteCommentDocument = gql`\n    mutation UpvoteComment($input: UpvoteCommentMutationInput!) {\n  upvoteComment(input: $input) {\n    id\n    upvoted\n    downvoted\n    upvotesCount\n    downvotesCount\n  }\n}\n    `;\nexport type UpvoteCommentMutationFn = Apollo.MutationFunction<UpvoteCommentMutation, UpvoteCommentMutationVariables>;\n\n/**\n * __useUpvoteCommentMutation__\n *\n * To run a mutation, you first call `useUpvoteCommentMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpvoteCommentMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [upvoteCommentMutation, { data, loading, error }] = useUpvoteCommentMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpvoteCommentMutation(baseOptions?: Apollo.MutationHookOptions<UpvoteCommentMutation, UpvoteCommentMutationVariables>) {\n        return Apollo.useMutation<UpvoteCommentMutation, UpvoteCommentMutationVariables>(UpvoteCommentDocument, baseOptions);\n      }\nexport type UpvoteCommentMutationHookResult = ReturnType<typeof useUpvoteCommentMutation>;\nexport type UpvoteCommentMutationResult = Apollo.MutationResult<UpvoteCommentMutation>;\nexport type UpvoteCommentMutationOptions = Apollo.BaseMutationOptions<UpvoteCommentMutation, UpvoteCommentMutationVariables>;\nexport const ArticleConnectionDocument = gql`\n    query ArticleConnection($order: String!, $query: String, $after: String) {\n  articleConnection(order: $order, query: $query, after: $after) {\n    nodes {\n      uuid\n      title\n      intro\n      price\n      revenue\n      ordersCount\n      commentsCount\n      upvoteRatio\n      author {\n        name\n        avatarUrl\n        mixinId\n        bio\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useArticleConnectionQuery__\n *\n * To run a query within a React component, call `useArticleConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArticleConnectionQuery({\n *   variables: {\n *      order: // value for 'order'\n *      query: // value for 'query'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useArticleConnectionQuery(baseOptions: Apollo.QueryHookOptions<ArticleConnectionQuery, ArticleConnectionQueryVariables>) {\n        return Apollo.useQuery<ArticleConnectionQuery, ArticleConnectionQueryVariables>(ArticleConnectionDocument, baseOptions);\n      }\nexport function useArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ArticleConnectionQuery, ArticleConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<ArticleConnectionQuery, ArticleConnectionQueryVariables>(ArticleConnectionDocument, baseOptions);\n        }\nexport type ArticleConnectionQueryHookResult = ReturnType<typeof useArticleConnectionQuery>;\nexport type ArticleConnectionLazyQueryHookResult = ReturnType<typeof useArticleConnectionLazyQuery>;\nexport type ArticleConnectionQueryResult = Apollo.QueryResult<ArticleConnectionQuery, ArticleConnectionQueryVariables>;\nexport const ArticleDocument = gql`\n    query Article($uuid: ID!, $readerAfter: String) {\n  article(uuid: $uuid) {\n    id\n    uuid\n    title\n    intro\n    content\n    price\n    assetId\n    authorized\n    ordersCount\n    commentsCount\n    myShare\n    revenue\n    commentingSubscribed\n    paymentTraceId\n    upvoted\n    downvoted\n    upvotesCount\n    downvotesCount\n    wordsCount\n    partialContent\n    walletId\n    author {\n      name\n      avatarUrl\n      mixinId\n      bio\n    }\n    readers(after: $readerAfter, first: 10) {\n      nodes {\n        name\n        avatarUrl\n        mixinId\n      }\n      totalCount\n      pageInfo {\n        hasNextPage\n        endCursor\n      }\n    }\n    buyOrders {\n      totalCount\n    }\n    rewardOrders {\n      totalCount\n    }\n    createdAt\n  }\n}\n    `;\n\n/**\n * __useArticleQuery__\n *\n * To run a query within a React component, call `useArticleQuery` and pass it any options that fit your needs.\n * When your component renders, `useArticleQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArticleQuery({\n *   variables: {\n *      uuid: // value for 'uuid'\n *      readerAfter: // value for 'readerAfter'\n *   },\n * });\n */\nexport function useArticleQuery(baseOptions: Apollo.QueryHookOptions<ArticleQuery, ArticleQueryVariables>) {\n        return Apollo.useQuery<ArticleQuery, ArticleQueryVariables>(ArticleDocument, baseOptions);\n      }\nexport function useArticleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ArticleQuery, ArticleQueryVariables>) {\n          return Apollo.useLazyQuery<ArticleQuery, ArticleQueryVariables>(ArticleDocument, baseOptions);\n        }\nexport type ArticleQueryHookResult = ReturnType<typeof useArticleQuery>;\nexport type ArticleLazyQueryHookResult = ReturnType<typeof useArticleLazyQuery>;\nexport type ArticleQueryResult = Apollo.QueryResult<ArticleQuery, ArticleQueryVariables>;\nexport const CommentConnectionDocument = gql`\n    query CommentConnection($commentableType: String, $commentableId: ID, $authorMixinId: String, $orderBy: String, $after: String) {\n  commentConnection(\n    commentableType: $commentableType\n    commentableId: $commentableId\n    authorMixinId: $authorMixinId\n    orderBy: $orderBy\n    after: $after\n  ) {\n    nodes {\n      id\n      content\n      deletedAt\n      upvotesCount\n      downvotesCount\n      upvoted\n      downvoted\n      author {\n        name\n        avatarUrl\n        mixinId\n        bio\n        createdAt\n      }\n      commentable {\n        uuid\n        title\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useCommentConnectionQuery__\n *\n * To run a query within a React component, call `useCommentConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useCommentConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useCommentConnectionQuery({\n *   variables: {\n *      commentableType: // value for 'commentableType'\n *      commentableId: // value for 'commentableId'\n *      authorMixinId: // value for 'authorMixinId'\n *      orderBy: // value for 'orderBy'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useCommentConnectionQuery(baseOptions?: Apollo.QueryHookOptions<CommentConnectionQuery, CommentConnectionQueryVariables>) {\n        return Apollo.useQuery<CommentConnectionQuery, CommentConnectionQueryVariables>(CommentConnectionDocument, baseOptions);\n      }\nexport function useCommentConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<CommentConnectionQuery, CommentConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<CommentConnectionQuery, CommentConnectionQueryVariables>(CommentConnectionDocument, baseOptions);\n        }\nexport type CommentConnectionQueryHookResult = ReturnType<typeof useCommentConnectionQuery>;\nexport type CommentConnectionLazyQueryHookResult = ReturnType<typeof useCommentConnectionLazyQuery>;\nexport type CommentConnectionQueryResult = Apollo.QueryResult<CommentConnectionQuery, CommentConnectionQueryVariables>;\nexport const PaymentDocument = gql`\n    query Payment($traceId: ID!) {\n  payment(traceId: $traceId) {\n    traceId\n    amount\n    assetId\n    state\n  }\n}\n    `;\n\n/**\n * __usePaymentQuery__\n *\n * To run a query within a React component, call `usePaymentQuery` and pass it any options that fit your needs.\n * When your component renders, `usePaymentQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = usePaymentQuery({\n *   variables: {\n *      traceId: // value for 'traceId'\n *   },\n * });\n */\nexport function usePaymentQuery(baseOptions: Apollo.QueryHookOptions<PaymentQuery, PaymentQueryVariables>) {\n        return Apollo.useQuery<PaymentQuery, PaymentQueryVariables>(PaymentDocument, baseOptions);\n      }\nexport function usePaymentLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<PaymentQuery, PaymentQueryVariables>) {\n          return Apollo.useLazyQuery<PaymentQuery, PaymentQueryVariables>(PaymentDocument, baseOptions);\n        }\nexport type PaymentQueryHookResult = ReturnType<typeof usePaymentQuery>;\nexport type PaymentLazyQueryHookResult = ReturnType<typeof usePaymentLazyQuery>;\nexport type PaymentQueryResult = Apollo.QueryResult<PaymentQuery, PaymentQueryVariables>;\nexport const StatisticsDocument = gql`\n    query Statistics {\n  statistics {\n    usersCount\n    articlesCount\n    authorRevenueAmount\n    readerRevenueAmount\n  }\n}\n    `;\n\n/**\n * __useStatisticsQuery__\n *\n * To run a query within a React component, call `useStatisticsQuery` and pass it any options that fit your needs.\n * When your component renders, `useStatisticsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useStatisticsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useStatisticsQuery(baseOptions?: Apollo.QueryHookOptions<StatisticsQuery, StatisticsQueryVariables>) {\n        return Apollo.useQuery<StatisticsQuery, StatisticsQueryVariables>(StatisticsDocument, baseOptions);\n      }\nexport function useStatisticsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<StatisticsQuery, StatisticsQueryVariables>) {\n          return Apollo.useLazyQuery<StatisticsQuery, StatisticsQueryVariables>(StatisticsDocument, baseOptions);\n        }\nexport type StatisticsQueryHookResult = ReturnType<typeof useStatisticsQuery>;\nexport type StatisticsLazyQueryHookResult = ReturnType<typeof useStatisticsLazyQuery>;\nexport type StatisticsQueryResult = Apollo.QueryResult<StatisticsQuery, StatisticsQueryVariables>;\nexport const SwapPreOrderDocument = gql`\n    query SwapPreOrder($payAssetId: String!, $amount: Float!) {\n  swapPreOrder(payAssetId: $payAssetId, amount: $amount) {\n    state\n    funds\n    amount\n    minAmount\n    fillAssetId\n    payAssetId\n    priceImpact\n    routePrice\n  }\n}\n    `;\n\n/**\n * __useSwapPreOrderQuery__\n *\n * To run a query within a React component, call `useSwapPreOrderQuery` and pass it any options that fit your needs.\n * When your component renders, `useSwapPreOrderQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSwapPreOrderQuery({\n *   variables: {\n *      payAssetId: // value for 'payAssetId'\n *      amount: // value for 'amount'\n *   },\n * });\n */\nexport function useSwapPreOrderQuery(baseOptions: Apollo.QueryHookOptions<SwapPreOrderQuery, SwapPreOrderQueryVariables>) {\n        return Apollo.useQuery<SwapPreOrderQuery, SwapPreOrderQueryVariables>(SwapPreOrderDocument, baseOptions);\n      }\nexport function useSwapPreOrderLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SwapPreOrderQuery, SwapPreOrderQueryVariables>) {\n          return Apollo.useLazyQuery<SwapPreOrderQuery, SwapPreOrderQueryVariables>(SwapPreOrderDocument, baseOptions);\n        }\nexport type SwapPreOrderQueryHookResult = ReturnType<typeof useSwapPreOrderQuery>;\nexport type SwapPreOrderLazyQueryHookResult = ReturnType<typeof useSwapPreOrderLazyQuery>;\nexport type SwapPreOrderQueryResult = Apollo.QueryResult<SwapPreOrderQuery, SwapPreOrderQueryVariables>;\nexport const TransferConnectionDocument = gql`\n    query TransferConnection($after: String) {\n  transferConnection(after: $after) {\n    nodes {\n      traceId\n      snapshotId\n      amount\n      assetId\n      transferType\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useTransferConnectionQuery__\n *\n * To run a query within a React component, call `useTransferConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useTransferConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useTransferConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useTransferConnectionQuery(baseOptions?: Apollo.QueryHookOptions<TransferConnectionQuery, TransferConnectionQueryVariables>) {\n        return Apollo.useQuery<TransferConnectionQuery, TransferConnectionQueryVariables>(TransferConnectionDocument, baseOptions);\n      }\nexport function useTransferConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<TransferConnectionQuery, TransferConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<TransferConnectionQuery, TransferConnectionQueryVariables>(TransferConnectionDocument, baseOptions);\n        }\nexport type TransferConnectionQueryHookResult = ReturnType<typeof useTransferConnectionQuery>;\nexport type TransferConnectionLazyQueryHookResult = ReturnType<typeof useTransferConnectionLazyQuery>;\nexport type TransferConnectionQueryResult = Apollo.QueryResult<TransferConnectionQuery, TransferConnectionQueryVariables>;\nexport const UserArticleConnectionDocument = gql`\n    query UserArticleConnection($mixinId: ID!, $type: String!, $after: String) {\n  userArticleConnection(mixinId: $mixinId, type: $type, after: $after) {\n    nodes {\n      uuid\n      title\n      intro\n      price\n      revenue\n      ordersCount\n      state\n      author {\n        name\n        avatarUrl\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useUserArticleConnectionQuery__\n *\n * To run a query within a React component, call `useUserArticleConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserArticleConnectionQuery({\n *   variables: {\n *      mixinId: // value for 'mixinId'\n *      type: // value for 'type'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useUserArticleConnectionQuery(baseOptions: Apollo.QueryHookOptions<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>) {\n        return Apollo.useQuery<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>(UserArticleConnectionDocument, baseOptions);\n      }\nexport function useUserArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>(UserArticleConnectionDocument, baseOptions);\n        }\nexport type UserArticleConnectionQueryHookResult = ReturnType<typeof useUserArticleConnectionQuery>;\nexport type UserArticleConnectionLazyQueryHookResult = ReturnType<typeof useUserArticleConnectionLazyQuery>;\nexport type UserArticleConnectionQueryResult = Apollo.QueryResult<UserArticleConnectionQuery, UserArticleConnectionQueryVariables>;\nexport const UserDocument = gql`\n    query User($mixinId: ID!) {\n  user(mixinId: $mixinId) {\n    id\n    name\n    mixinId\n    mixinUuid\n    avatarUrl\n    bio\n    authoringSubscribed\n    readingSubscribed\n    statistics {\n      articlesCount\n      authorRevenueAmount\n      readerRevenueAmount\n    }\n  }\n}\n    `;\n\n/**\n * __useUserQuery__\n *\n * To run a query within a React component, call `useUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserQuery({\n *   variables: {\n *      mixinId: // value for 'mixinId'\n *   },\n * });\n */\nexport function useUserQuery(baseOptions: Apollo.QueryHookOptions<UserQuery, UserQueryVariables>) {\n        return Apollo.useQuery<UserQuery, UserQueryVariables>(UserDocument, baseOptions);\n      }\nexport function useUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserQuery, UserQueryVariables>) {\n          return Apollo.useLazyQuery<UserQuery, UserQueryVariables>(UserDocument, baseOptions);\n        }\nexport type UserQueryHookResult = ReturnType<typeof useUserQuery>;\nexport type UserLazyQueryHookResult = ReturnType<typeof useUserLazyQuery>;\nexport type UserQueryResult = Apollo.QueryResult<UserQuery, UserQueryVariables>;\nexport const CreateArticleDocument = gql`\n    mutation CreateArticle($input: CreateArticleMutationInput!) {\n  createArticle(input: $input) {\n    error\n  }\n}\n    `;\nexport type CreateArticleMutationFn = Apollo.MutationFunction<CreateArticleMutation, CreateArticleMutationVariables>;\n\n/**\n * __useCreateArticleMutation__\n *\n * To run a mutation, you first call `useCreateArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useCreateArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [createArticleMutation, { data, loading, error }] = useCreateArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useCreateArticleMutation(baseOptions?: Apollo.MutationHookOptions<CreateArticleMutation, CreateArticleMutationVariables>) {\n        return Apollo.useMutation<CreateArticleMutation, CreateArticleMutationVariables>(CreateArticleDocument, baseOptions);\n      }\nexport type CreateArticleMutationHookResult = ReturnType<typeof useCreateArticleMutation>;\nexport type CreateArticleMutationResult = Apollo.MutationResult<CreateArticleMutation>;\nexport type CreateArticleMutationOptions = Apollo.BaseMutationOptions<CreateArticleMutation, CreateArticleMutationVariables>;\nexport const HideArticleDocument = gql`\n    mutation HideArticle($input: HideArticleMutationInput!) {\n  hideArticle(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type HideArticleMutationFn = Apollo.MutationFunction<HideArticleMutation, HideArticleMutationVariables>;\n\n/**\n * __useHideArticleMutation__\n *\n * To run a mutation, you first call `useHideArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useHideArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [hideArticleMutation, { data, loading, error }] = useHideArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useHideArticleMutation(baseOptions?: Apollo.MutationHookOptions<HideArticleMutation, HideArticleMutationVariables>) {\n        return Apollo.useMutation<HideArticleMutation, HideArticleMutationVariables>(HideArticleDocument, baseOptions);\n      }\nexport type HideArticleMutationHookResult = ReturnType<typeof useHideArticleMutation>;\nexport type HideArticleMutationResult = Apollo.MutationResult<HideArticleMutation>;\nexport type HideArticleMutationOptions = Apollo.BaseMutationOptions<HideArticleMutation, HideArticleMutationVariables>;\nexport const PublishArticleDocument = gql`\n    mutation PublishArticle($input: PublishArticleMutationInput!) {\n  publishArticle(input: $input) {\n    error\n    success\n  }\n}\n    `;\nexport type PublishArticleMutationFn = Apollo.MutationFunction<PublishArticleMutation, PublishArticleMutationVariables>;\n\n/**\n * __usePublishArticleMutation__\n *\n * To run a mutation, you first call `usePublishArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `usePublishArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [publishArticleMutation, { data, loading, error }] = usePublishArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function usePublishArticleMutation(baseOptions?: Apollo.MutationHookOptions<PublishArticleMutation, PublishArticleMutationVariables>) {\n        return Apollo.useMutation<PublishArticleMutation, PublishArticleMutationVariables>(PublishArticleDocument, baseOptions);\n      }\nexport type PublishArticleMutationHookResult = ReturnType<typeof usePublishArticleMutation>;\nexport type PublishArticleMutationResult = Apollo.MutationResult<PublishArticleMutation>;\nexport type PublishArticleMutationOptions = Apollo.BaseMutationOptions<PublishArticleMutation, PublishArticleMutationVariables>;\nexport const UpdateArticleDocument = gql`\n    mutation UpdateArticle($input: UpdateArticleMutationInput!) {\n  updateArticle(input: $input) {\n    error\n  }\n}\n    `;\nexport type UpdateArticleMutationFn = Apollo.MutationFunction<UpdateArticleMutation, UpdateArticleMutationVariables>;\n\n/**\n * __useUpdateArticleMutation__\n *\n * To run a mutation, you first call `useUpdateArticleMutation` within a React component and pass it any options that fit your needs.\n * When your component renders, `useUpdateArticleMutation` returns a tuple that includes:\n * - A mutate function that you can call at any time to execute the mutation\n * - An object with fields that represent the current status of the mutation's execution\n *\n * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;\n *\n * @example\n * const [updateArticleMutation, { data, loading, error }] = useUpdateArticleMutation({\n *   variables: {\n *      input: // value for 'input'\n *   },\n * });\n */\nexport function useUpdateArticleMutation(baseOptions?: Apollo.MutationHookOptions<UpdateArticleMutation, UpdateArticleMutationVariables>) {\n        return Apollo.useMutation<UpdateArticleMutation, UpdateArticleMutationVariables>(UpdateArticleDocument, baseOptions);\n      }\nexport type UpdateArticleMutationHookResult = ReturnType<typeof useUpdateArticleMutation>;\nexport type UpdateArticleMutationResult = Apollo.MutationResult<UpdateArticleMutation>;\nexport type UpdateArticleMutationOptions = Apollo.BaseMutationOptions<UpdateArticleMutation, UpdateArticleMutationVariables>;\nexport const MyArticleConnectionDocument = gql`\n    query MyArticleConnection($type: String!, $after: String) {\n  myArticleConnection(type: $type, after: $after) {\n    nodes {\n      uuid\n      title\n      intro\n      price\n      revenue\n      ordersCount\n      state\n      author {\n        name\n        avatarUrl\n      }\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyArticleConnectionQuery__\n *\n * To run a query within a React component, call `useMyArticleConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyArticleConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyArticleConnectionQuery({\n *   variables: {\n *      type: // value for 'type'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyArticleConnectionQuery(baseOptions: Apollo.QueryHookOptions<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>) {\n        return Apollo.useQuery<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>(MyArticleConnectionDocument, baseOptions);\n      }\nexport function useMyArticleConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>(MyArticleConnectionDocument, baseOptions);\n        }\nexport type MyArticleConnectionQueryHookResult = ReturnType<typeof useMyArticleConnectionQuery>;\nexport type MyArticleConnectionLazyQueryHookResult = ReturnType<typeof useMyArticleConnectionLazyQuery>;\nexport type MyArticleConnectionQueryResult = Apollo.QueryResult<MyArticleConnectionQuery, MyArticleConnectionQueryVariables>;\nexport const MyArticleOrderConnectionDocument = gql`\n    query MyArticleOrderConnection($uuid: ID!, $orderType: String!, $after: String) {\n  myArticleOrderConnection(uuid: $uuid, orderType: $orderType, after: $after) {\n    nodes {\n      traceId\n      buyer {\n        avatarUrl\n        name\n      }\n      orderType\n      state\n      total\n      createdAt\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyArticleOrderConnectionQuery__\n *\n * To run a query within a React component, call `useMyArticleOrderConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyArticleOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyArticleOrderConnectionQuery({\n *   variables: {\n *      uuid: // value for 'uuid'\n *      orderType: // value for 'orderType'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyArticleOrderConnectionQuery(baseOptions: Apollo.QueryHookOptions<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>) {\n        return Apollo.useQuery<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>(MyArticleOrderConnectionDocument, baseOptions);\n      }\nexport function useMyArticleOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>(MyArticleOrderConnectionDocument, baseOptions);\n        }\nexport type MyArticleOrderConnectionQueryHookResult = ReturnType<typeof useMyArticleOrderConnectionQuery>;\nexport type MyArticleOrderConnectionLazyQueryHookResult = ReturnType<typeof useMyArticleOrderConnectionLazyQuery>;\nexport type MyArticleOrderConnectionQueryResult = Apollo.QueryResult<MyArticleOrderConnectionQuery, MyArticleOrderConnectionQueryVariables>;\nexport const MyArticleDocument = gql`\n    query MyArticle($uuid: ID!) {\n  myArticle(uuid: $uuid) {\n    id\n    uuid\n    title\n    intro\n    content\n    state\n    price\n    assetId\n    ordersCount\n    commentsCount\n    revenue\n    authorRevenueAmount\n    readerRevenueAmount\n    commentingSubscribed\n    upvotesCount\n    downvotesCount\n    wordsCount\n    createdAt\n    updatedAt\n    buyers {\n      totalCount\n    }\n    buyOrders {\n      totalCount\n    }\n    rewarders {\n      totalCount\n    }\n    rewardOrders {\n      totalCount\n    }\n    comments {\n      totalCount\n    }\n  }\n}\n    `;\n\n/**\n * __useMyArticleQuery__\n *\n * To run a query within a React component, call `useMyArticleQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyArticleQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyArticleQuery({\n *   variables: {\n *      uuid: // value for 'uuid'\n *   },\n * });\n */\nexport function useMyArticleQuery(baseOptions: Apollo.QueryHookOptions<MyArticleQuery, MyArticleQueryVariables>) {\n        return Apollo.useQuery<MyArticleQuery, MyArticleQueryVariables>(MyArticleDocument, baseOptions);\n      }\nexport function useMyArticleLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyArticleQuery, MyArticleQueryVariables>) {\n          return Apollo.useLazyQuery<MyArticleQuery, MyArticleQueryVariables>(MyArticleDocument, baseOptions);\n        }\nexport type MyArticleQueryHookResult = ReturnType<typeof useMyArticleQuery>;\nexport type MyArticleLazyQueryHookResult = ReturnType<typeof useMyArticleLazyQuery>;\nexport type MyArticleQueryResult = Apollo.QueryResult<MyArticleQuery, MyArticleQueryVariables>;\nexport const MyPaymentConnectionDocument = gql`\n    query MyPaymentConnection($after: String) {\n  myPaymentConnection(after: $after) {\n    nodes {\n      traceId\n      snapshotId\n      amount\n      assetId\n      state\n      createdAt\n      order {\n        item {\n          ... on Article {\n            title\n            uuid\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyPaymentConnectionQuery__\n *\n * To run a query within a React component, call `useMyPaymentConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyPaymentConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyPaymentConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyPaymentConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>) {\n        return Apollo.useQuery<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>(MyPaymentConnectionDocument, baseOptions);\n      }\nexport function useMyPaymentConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>(MyPaymentConnectionDocument, baseOptions);\n        }\nexport type MyPaymentConnectionQueryHookResult = ReturnType<typeof useMyPaymentConnectionQuery>;\nexport type MyPaymentConnectionLazyQueryHookResult = ReturnType<typeof useMyPaymentConnectionLazyQuery>;\nexport type MyPaymentConnectionQueryResult = Apollo.QueryResult<MyPaymentConnectionQuery, MyPaymentConnectionQueryVariables>;\nexport const MyStatisticsDocument = gql`\n    query MyStatistics {\n  myStatistics {\n    articlesCount\n    authorRevenueAmount\n    boughtArticlesCount\n    readerRevenueAmount\n  }\n}\n    `;\n\n/**\n * __useMyStatisticsQuery__\n *\n * To run a query within a React component, call `useMyStatisticsQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyStatisticsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyStatisticsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useMyStatisticsQuery(baseOptions?: Apollo.QueryHookOptions<MyStatisticsQuery, MyStatisticsQueryVariables>) {\n        return Apollo.useQuery<MyStatisticsQuery, MyStatisticsQueryVariables>(MyStatisticsDocument, baseOptions);\n      }\nexport function useMyStatisticsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyStatisticsQuery, MyStatisticsQueryVariables>) {\n          return Apollo.useLazyQuery<MyStatisticsQuery, MyStatisticsQueryVariables>(MyStatisticsDocument, baseOptions);\n        }\nexport type MyStatisticsQueryHookResult = ReturnType<typeof useMyStatisticsQuery>;\nexport type MyStatisticsLazyQueryHookResult = ReturnType<typeof useMyStatisticsLazyQuery>;\nexport type MyStatisticsQueryResult = Apollo.QueryResult<MyStatisticsQuery, MyStatisticsQueryVariables>;\nexport const MySwapOrderConnectionDocument = gql`\n    query MySwapOrderConnection($after: String) {\n  mySwapOrderConnection(after: $after) {\n    nodes {\n      id\n      traceId\n      state\n      funds\n      amount\n      minAmount\n      fillAssetId\n      payAssetId\n      article {\n        uuid\n        title\n        price\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMySwapOrderConnectionQuery__\n *\n * To run a query within a React component, call `useMySwapOrderConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMySwapOrderConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMySwapOrderConnectionQuery({\n *   variables: {\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMySwapOrderConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>) {\n        return Apollo.useQuery<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>(MySwapOrderConnectionDocument, baseOptions);\n      }\nexport function useMySwapOrderConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>(MySwapOrderConnectionDocument, baseOptions);\n        }\nexport type MySwapOrderConnectionQueryHookResult = ReturnType<typeof useMySwapOrderConnectionQuery>;\nexport type MySwapOrderConnectionLazyQueryHookResult = ReturnType<typeof useMySwapOrderConnectionLazyQuery>;\nexport type MySwapOrderConnectionQueryResult = Apollo.QueryResult<MySwapOrderConnectionQuery, MySwapOrderConnectionQueryVariables>;\nexport const MyTransferConnectionDocument = gql`\n    query MyTransferConnection($transferType: String, $after: String) {\n  myTransferConnection(transferType: $transferType, after: $after) {\n    nodes {\n      traceId\n      snapshotId\n      amount\n      assetId\n      transferType\n      createdAt\n      article {\n        uuid\n        title\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useMyTransferConnectionQuery__\n *\n * To run a query within a React component, call `useMyTransferConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useMyTransferConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useMyTransferConnectionQuery({\n *   variables: {\n *      transferType: // value for 'transferType'\n *      after: // value for 'after'\n *   },\n * });\n */\nexport function useMyTransferConnectionQuery(baseOptions?: Apollo.QueryHookOptions<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>) {\n        return Apollo.useQuery<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>(MyTransferConnectionDocument, baseOptions);\n      }\nexport function useMyTransferConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>) {\n          return Apollo.useLazyQuery<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>(MyTransferConnectionDocument, baseOptions);\n        }\nexport type MyTransferConnectionQueryHookResult = ReturnType<typeof useMyTransferConnectionQuery>;\nexport type MyTransferConnectionLazyQueryHookResult = ReturnType<typeof useMyTransferConnectionLazyQuery>;\nexport type MyTransferConnectionQueryResult = Apollo.QueryResult<MyTransferConnectionQuery, MyTransferConnectionQueryVariables>;","import { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst customizedConnectionMergeFunction = (\n  keyArgs: false | string[] = false,\n): {\n  keyArgs: any;\n  merge: (existing: any, incoming: any, options?: any) => any;\n} => {\n  return {\n    keyArgs,\n    merge(existing: any, incoming: any, { args }) {\n      if (args?.after === existing?.pageInfo?.endCursor) {\n        const nodes = existing ? [...existing.nodes] : [];\n        return {\n          ...incoming,\n          nodes: [...nodes, ...incoming.nodes],\n        };\n      } else {\n        return incoming;\n      }\n    },\n  };\n};\n\nexport const apolloClient = (uri: string, csrfToken?: string) => {\n  const cache = new InMemoryCache({\n    typePolicies: {\n      Query: {\n        fields: {\n          adminAnnouncementConnection: customizedConnectionMergeFunction(),\n          adminArticleConnection: customizedConnectionMergeFunction([\n            'query',\n            'state',\n          ]),\n          adminBonusConnection: customizedConnectionMergeFunction(),\n          adminMixinMessageConnection: customizedConnectionMergeFunction(),\n          adminMixinNetworkSnapshotConnection: customizedConnectionMergeFunction(\n            ['filter', 'userId'],\n          ),\n          adminOrderConnection: customizedConnectionMergeFunction([\n            'itemId',\n            'itemType',\n          ]),\n          adminPaymentConnection: customizedConnectionMergeFunction(),\n          adminSwapOrderConnection: customizedConnectionMergeFunction(),\n          adminTransferConnection: customizedConnectionMergeFunction([\n            'itemId',\n            'itemType',\n            'sourceId',\n            'sourceType',\n          ]),\n          adminUserConnection: customizedConnectionMergeFunction([\n            'filter',\n            'query',\n            'orderBy',\n          ]),\n          articleConnection: customizedConnectionMergeFunction([\n            'order',\n            'query',\n          ]),\n          commentConnection: customizedConnectionMergeFunction([\n            'commentableId',\n            'commentableType',\n            'authorMixinId',\n          ]),\n          myTransferConnection: customizedConnectionMergeFunction([\n            'transferType',\n          ]),\n          myArticleOrderConnection: customizedConnectionMergeFunction([\n            'uuid',\n            'orderType',\n          ]),\n          mySwapOrderConnection: customizedConnectionMergeFunction(),\n          myPaymentConnection: customizedConnectionMergeFunction(),\n          myArticleConnection: customizedConnectionMergeFunction(['type']),\n          userArticleConnection: customizedConnectionMergeFunction([\n            'type',\n            'mixinId',\n          ]),\n          transferConnection: customizedConnectionMergeFunction(),\n        },\n      },\n    },\n  });\n\n  return new ApolloClient({\n    uri,\n    cache,\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-CSRF-Token':\n        csrfToken ||\n        ((document.querySelector(\"meta[name='csrf-token']\") as any) || {})\n          .content,\n    },\n  });\n};\n","import MDEditor from '@uiw/react-md-editor';\nimport React from 'react';\nimport Zoom from 'react-medium-image-zoom';\nimport './MarkdownRendererComponent.less';\n\nexport function MarkdownRendererComponent(props: { source: string }) {\n  return (\n    <MDEditor.Markdown\n      source={props.source}\n      renderers={{\n        image: ({ src, alt }) => (\n          <Zoom wrapElement='span'>\n            <img style={{ maxWidth: '100%' }} src={src} alt={alt} />\n          </Zoom>\n        ),\n      }}\n    />\n  );\n}\n","export const SUPPORTED_TOKENS = [\n  {\n    assetId: '3edb734c-6d6f-32ff-ab03-4eb43640c758',\n    iconUrl:\n      'https://mixin-images.zeromesh.net/1fQiAdit_Ji6_Pf4tW8uzutONh9kurHhAnN4wqEIItkDAvFTSXTMwlk3AB749keufDFVoqJb5fSbgz7K2HoOV7Q=s128',\n    name: 'PressOne Token',\n    symbol: 'PRS',\n    priceBase: 1,\n  },\n  {\n    assetId: 'c6d0c728-2624-429b-8e0d-d9d19b6592fa',\n    iconUrl:\n      'https://mixin-images.zeromesh.net/HvYGJsV5TGeZ-X9Ek3FEQohQZ3fE9LBEBGcOcn4c4BNHovP4fW4YB97Dg5LcXoQ1hUjMEgjbl1DPlKg1TW7kK6XP=s128',\n    name: 'Bitcoin',\n    symbol: 'BTC',\n    priceBase: 0.000001,\n  },\n  {\n    assetId: '6cfe566e-4aad-470b-8c9a-2fd35b49c68d',\n    iconUrl:\n      'https://mixin-images.zeromesh.net/a5dtG-IAg2IO0Zm4HxqJoQjfz-5nf1HWZ0teCyOnReMd3pmB8oEdSAXWvFHt2AJkJj5YgfyceTACjGmXnI-VyRo=s128',\n    name: 'EOS',\n    symbol: 'EOS',\n    priceBase: 0.005,\n  },\n  {\n    assetId: '43d61dcd-e413-450d-80b8-101d5e903357',\n    iconUrl:\n      'https://mixin-images.zeromesh.net/zVDjOxNTQvVsA8h2B4ZVxuHoCF3DJszufYKWpd9duXUSbSapoZadC7_13cnWBqg0EmwmRcKGbJaUpA8wFfpgZA=s128',\n    name: 'ETH',\n    symbol: 'ETH',\n    priceBase: 0.000025,\n  },\n  {\n    assetId: '4d8c508b-91c5-375b-92b0-ee702ed2dac5',\n    iconUrl:\n      'https://mixin-images.zeromesh.net/ndNBEpObYs7450U08oAOMnSEPzN66SL8Mh-f2pPWBDeWaKbXTPUIdrZph7yj8Z93Rl8uZ16m7Qjz-E-9JFKSsJ-F=s128',\n    name: 'Tether USD',\n    symbol: 'USDT',\n    priceBase: 0.02,\n  },\n  {\n    assetId: 'c94ac88f-4671-3976-b60a-09064f1811e8',\n    iconUrl:\n      'https://mixin-images.zeromesh.net/UasWtBZO0TZyLTLCFQjvE_UYekjC7eHCuT_9_52ZpzmCC-X-NPioVegng7Hfx0XmIUavZgz5UL-HIgPCBECc-Ws=s128',\n    name: 'Mixin',\n    symbol: 'XIN',\n    priceBase: 0.0001,\n  },\n];\n\nexport const PRS = {\n  assetId: '3edb734c-6d6f-32ff-ab03-4eb43640c758',\n  iconUrl:\n    'https://mixin-images.zeromesh.net/1fQiAdit_Ji6_Pf4tW8uzutONh9kurHhAnN4wqEIItkDAvFTSXTMwlk3AB749keufDFVoqJb5fSbgz7K2HoOV7Q=s128',\n  name: 'PressOne Token',\n  symbol: 'PRS',\n};\n\nexport const FOXSWAP_APP_ID = 'a753e0eb-3010-4c4a-a7b2-a7bda4063f62';\nexport const FOXSWAP_CODE_ID = '2140515d-b77f-4476-92f6-39d953c74cc5';\nexport const FOXSWAP_DISABLE = true;\n","import React, { useContext } from 'react';\n\nexport const ActiveMenuContext = React.createContext(null);\nexport function useActiveMenu() {\n  return useContext(ActiveMenuContext);\n}\n","import React, { useContext } from 'react';\n\nexport const CurrentUserContext = React.createContext(null);\nexport function useCurrentUser() {\n  return useContext(CurrentUserContext);\n}\n","import React, { useContext } from 'react';\n\nexport const PrsdiggContext = React.createContext(null);\nexport function usePrsdigg() {\n  return useContext(PrsdiggContext);\n}\n","import React, { useContext } from 'react';\n\nexport const UserAgentContext = React.createContext(null);\nexport function useUserAgent() {\n  return useContext(UserAgentContext);\n}\n","export function hideLoader() {\n  const ele: any = document.querySelector('.loader-wrapper');\n  if (Boolean(ele)) {\n    ele.style.display = 'none';\n  }\n}\n","class MixinUtils {\n  public environment() {\n    if (\n      (window as any).webkit &&\n      (window as any).webkit.messageHandlers &&\n      (window as any).webkit.messageHandlers.MixinContext\n    ) {\n      return 'iOS';\n    }\n    if (\n      (window as any).MixinContext &&\n      (window as any).MixinContext.getContext\n    ) {\n      return 'Android';\n    }\n    return undefined;\n  }\n\n  public conversationId() {\n    let ctx: any;\n    switch (this.environment()) {\n      case 'iOS':\n        ctx = prompt('MixinContext.getContext()');\n        return JSON.parse(ctx).conversation_id;\n      case 'Android':\n        ctx = (window as any).MixinContext.getContext();\n        return JSON.parse(ctx).conversation_id;\n      default:\n        return undefined;\n    }\n  }\n\n  public appVersion() {\n    let ctx: any;\n    switch (this.environment()) {\n      case 'iOS':\n        ctx = prompt('MixinContext.getContext()');\n        return JSON.parse(ctx).app_version;\n      case 'Android':\n        ctx = (window as any).MixinContext.getContext();\n        return JSON.parse(ctx).app_version;\n      default:\n        return undefined;\n    }\n  }\n\n  public immersive() {\n    let ctx: any;\n    switch (this.environment()) {\n      case 'iOS':\n        ctx = prompt('MixinContext.getContext()');\n        return JSON.parse(ctx).immersive;\n      case 'Android':\n        ctx = (window as any).MixinContext.getContext();\n        return JSON.parse(ctx).immersive;\n      default:\n        return undefined;\n    }\n  }\n}\n\nexport const mixinUtils = new MixinUtils();\n","export * from './apolloClient';\nexport * from './components';\nexport * from './constants';\nexport * from './contexts';\nexport * from './hideLoader';\nexport * from './mixinUtils';\n\nexport const imagePath = (name: string) => require('@/images/' + name);\n","module.exports = __webpack_public_path__ + \"media/src/images/logo-88d70463ca10daf3f879a77a6205768c.svg\";","export * from './CurrentAdminContext';\nexport * from './PrsdiggContext';\n","import LoadingComponent from '@admin/components/LoadingComponent/LoadingComponent';\nimport {\n  Comment as IComment,\n  useAdminDeleteCommentMutation,\n  useAdminRecoverCommentMutation,\n  useCommentConnectionQuery,\n} from '@graphql';\nimport { Avatar, Button, message, Popconfirm, Popover, Space } from 'antd';\nimport Table, { ColumnProps } from 'antd/lib/table';\nimport React from 'react';\n\nexport default function CommentsComponent(props: {\n  commentableId?: string;\n  commentableType?: string;\n  authorMixinId?: string;\n}) {\n  const { commentableId, commentableType, authorMixinId } = props;\n  const { data, loading, fetchMore, refetch } = useCommentConnectionQuery({\n    variables: { commentableId, commentableType, authorMixinId },\n  });\n  const [deleteComment, { loading: deleting }] = useAdminDeleteCommentMutation({\n    update(_, { data: { error: err } }) {\n      if (err) {\n        message.error(err);\n      } else {\n        message.success('Successfully deleted!');\n        refetch();\n      }\n    },\n  });\n  const [recover, { loading: recovering }] = useAdminRecoverCommentMutation({\n    update(_, { data: { error: err } }) {\n      if (err) {\n        message.error(err);\n      } else {\n        message.success('Successfully recovered!');\n        refetch();\n      }\n    },\n  });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    commentConnection: {\n      nodes: comments,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n\n  const columns: Array<ColumnProps<IComment>> = [\n    {\n      dataIndex: 'id',\n      key: 'id',\n      title: 'ID',\n    },\n    {\n      dataIndex: 'author',\n      key: 'author',\n      render: (_, comment) => (\n        <Space>\n          <Avatar src={comment.author.avatarUrl} />\n          {comment.author.name}\n        </Space>\n      ),\n      title: 'Author',\n    },\n    {\n      dataIndex: 'content',\n      key: 'content',\n      render: (content) => (\n        <Popover content={content}>\n          <div style={{ maxWidth: '100%' }}>\n            {content ? content.slice(0, 140) : '-'}\n          </div>\n        </Popover>\n      ),\n      title: 'content',\n    },\n    {\n      dataIndex: 'article',\n      key: 'article',\n      render: (_, comment) => (\n        <a href={`/articles/${comment.commentable.uuid}`} target='_blank'>\n          {comment.commentable.title}\n        </a>\n      ),\n      title: 'article',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'CreatedAt',\n    },\n    {\n      dataIndex: 'deletedAt',\n      key: 'deletedAt',\n      render: (deletedAt) => <span>{deletedAt || '-'}</span>,\n      title: 'deletedAt',\n    },\n    {\n      dataIndex: 'actions',\n      key: 'actions',\n      render: (_, comment) => (\n        <span>\n          {comment.deletedAt ? (\n            <Popconfirm\n              title='Are you sure to recover this comment?'\n              onConfirm={() =>\n                recover({ variables: { input: { id: comment.id } } })\n              }\n            >\n              <Button type='link' disabled={recovering}>\n                Recover\n              </Button>\n            </Popconfirm>\n          ) : (\n            <Popconfirm\n              title='Are you sure to delete this comment?'\n              onConfirm={() =>\n                deleteComment({ variables: { input: { id: comment.id } } })\n              }\n            >\n              <Button type='link' disabled={deleting}>\n                Delete\n              </Button>\n            </Popconfirm>\n          )}\n        </span>\n      ),\n      title: 'Actions',\n    },\n  ];\n  return (\n    <div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={comments}\n        rowKey='id'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import LoadingComponent from '@admin/components/LoadingComponent/LoadingComponent';\nimport { usePrsdigg } from '@admin/shared';\nimport {\n  MixinNetworkSnapshot,\n  useAdminMixinNetworkSnapshotConnectionQuery,\n} from '@graphql';\nimport { FOXSWAP_APP_ID, SUPPORTED_TOKENS } from '@shared';\nimport { Avatar, Button, Space, Table } from 'antd';\nimport { ColumnProps } from 'antd/lib/table';\nimport React from 'react';\n\nexport default function MixinNetworkSnapshotsComponent(props: {\n  filter?: 'input' | 'output' | 'prsdigg' | 'all';\n  userId?: string;\n}) {\n  const { appId } = usePrsdigg();\n  const { userId, filter = 'all' } = props;\n  const {\n    data,\n    loading,\n    fetchMore,\n  } = useAdminMixinNetworkSnapshotConnectionQuery({\n    variables: { filter, userId },\n  });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n\n  const {\n    adminMixinNetworkSnapshotConnection: {\n      nodes: snapshots,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n  const columns: Array<ColumnProps<MixinNetworkSnapshot>> = [\n    {\n      dataIndex: 'traceId',\n      key: 'traceId',\n      title: 'traceId',\n    },\n    {\n      dataIndex: 'wallet',\n      key: 'wallet',\n      render: (_, snapshot) =>\n        snapshot.article ? (\n          <a\n            href={`https://prsdigg.com/articles/${snapshot.article.uuid}`}\n            target='_blank'\n          >\n            {snapshot.article.title}\n          </a>\n        ) : snapshot.userId === appId ? (\n          'PRSDigg'\n        ) : snapshot.userId === FOXSWAP_APP_ID ? (\n          '4swap'\n        ) : (\n          snapshot.userId\n        ),\n      title: 'Wallet',\n    },\n    {\n      dataIndex: 'opponent',\n      key: 'opponent',\n      render: (_, snapshot) =>\n        snapshot.opponent ? (\n          <Space>\n            <Avatar src={snapshot.opponent.avatarUrl} />\n            {snapshot.opponent.name}\n            {snapshot.opponent.mixinId}\n          </Space>\n        ) : snapshot.opponentId === appId ? (\n          'PRSDigg'\n        ) : snapshot.opponentId === FOXSWAP_APP_ID ? (\n          '4swap'\n        ) : (\n          snapshot.opponentId\n        ),\n      title: 'Opponent',\n    },\n    {\n      dataIndex: 'amount',\n      key: 'amount',\n      render: (amount, snapshot) => (\n        <Space>\n          <Avatar\n            src={\n              SUPPORTED_TOKENS.find(\n                (token) => token.assetId === snapshot.assetId,\n              )?.iconUrl\n            }\n          />\n          <span>{amount}</span>\n        </Space>\n      ),\n      title: 'amount',\n    },\n    {\n      dataIndex: 'processedAt',\n      key: 'processedAt',\n      title: 'processedAt',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'createdAt',\n    },\n  ];\n\n  return (\n    <div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={snapshots}\n        rowKey='traceId'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { SUPPORTED_TOKENS } from '@/shared';\nimport LoadingComponent from '@admin/components/LoadingComponent/LoadingComponent';\nimport { usePrsdigg } from '@admin/shared';\nimport {\n  AdminTransferConnectionQueryHookResult,\n  Transfer as ITransfer,\n  useAdminTransferConnectionQuery,\n} from '@graphql';\nimport { Avatar, Button, Space } from 'antd';\nimport Table, { ColumnProps } from 'antd/lib/table';\nimport React from 'react';\n\nexport default function TransfersComponent(props: {\n  itemId?: string;\n  itemType?: string;\n  sourceId?: string;\n  sourceType?: string;\n}) {\n  const { appId } = usePrsdigg();\n  const { itemId, itemType, sourceId, sourceType } = props;\n  const {\n    data,\n    loading,\n    fetchMore,\n  }: AdminTransferConnectionQueryHookResult = useAdminTransferConnectionQuery({\n    variables: { itemId, itemType, sourceId, sourceType },\n  });\n\n  if (loading) {\n    return <LoadingComponent />;\n  }\n  const {\n    adminTransferConnection: {\n      nodes: transfers,\n      pageInfo: { hasNextPage, endCursor },\n    },\n  } = data;\n  const columns: Array<ColumnProps<ITransfer>> = [\n    {\n      dataIndex: 'traceId',\n      key: 'traceId',\n      title: 'Trace ID',\n    },\n    {\n      dataIndex: 'recipient',\n      key: 'recipient',\n      render: (_, transfer) =>\n        transfer.recipient ? (\n          <Space>\n            <Avatar src={transfer.recipient.avatarUrl} />\n            <span>\n              {transfer.recipient.name}({transfer.recipient.mixinId})\n            </span>\n          </Space>\n        ) : transfer.opponentId === appId ? (\n          'PRSDigg'\n        ) : (\n          transfer.opponentId\n        ),\n      title: 'Recipient',\n    },\n    {\n      dataIndex: 'amount',\n      key: 'amount',\n      render: (amount, transfer) => (\n        <Space>\n          <Avatar\n            src={\n              SUPPORTED_TOKENS.find(\n                (token) => token.assetId === transfer.assetId,\n              )?.iconUrl\n            }\n          />\n          <span>{amount}</span>\n        </Space>\n      ),\n      title: 'Amount',\n    },\n    {\n      dataIndex: 'transferType',\n      key: 'transferType',\n      title: 'transferType',\n    },\n    {\n      dataIndex: 'processedAt',\n      key: 'processedAt',\n      render: (processedAt) => <span>{processedAt || '-'}</span>,\n      title: 'Processed At',\n    },\n    {\n      dataIndex: 'createdAt',\n      key: 'createdAt',\n      title: 'Created At',\n    },\n    {\n      dataIndex: 'snapshotId',\n      key: 'snapshotId',\n      render: (snapshotId) => (\n        <span>\n          {snapshotId ? (\n            <a\n              href={`https://mixin.one/snapshots/${snapshotId}`}\n              target='_blank'\n            >\n              View\n            </a>\n          ) : (\n            'processing'\n          )}\n        </span>\n      ),\n      title: 'Snapshot',\n    },\n  ];\n\n  return (\n    <div>\n      <Table\n        scroll={{ x: true }}\n        columns={columns}\n        dataSource={transfers}\n        rowKey='traceId'\n        pagination={false}\n      />\n      <div style={{ margin: '1rem', textAlign: 'center' }}>\n        <Button\n          type='link'\n          loading={loading}\n          disabled={!hasNextPage}\n          onClick={() => {\n            fetchMore({\n              variables: {\n                after: endCursor,\n              },\n            });\n          }}\n        >\n          {hasNextPage ? 'Load More' : 'No More'}\n        </Button>\n      </div>\n    </div>\n  );\n}\n","import { Asset, useAdminWalletBalanceQuery } from '@graphql';\nimport { Avatar, Table } from 'antd';\nimport { ColumnProps } from 'antd/es/table';\nimport React from 'react';\nimport LoadingComponent from '../LoadingComponent/LoadingComponent';\n\nexport default function WalletBalanceComponent(props: { userId?: string }) {\n  const { userId } = props;\n  const { loading, data } = useAdminWalletBalanceQuery({\n    fetchPolicy: 'network-only',\n    variables: { userId },\n  });\n  if (loading) {\n    return <LoadingComponent />;\n  }\n  const { adminWalletBalance: assets } = data;\n\n  const columns: Array<ColumnProps<Asset>> = [\n    { title: 'asset ID', dataIndex: 'assetId', key: 'assetId' },\n    {\n      dataIndex: 'iconUrl',\n      key: 'iconUrl',\n      render: (text, record) => <Avatar src={text}>{record.symbol[0]}</Avatar>,\n      title: 'icon',\n    },\n    { title: 'Symbol', dataIndex: 'symbol', key: 'symbol' },\n    { title: 'Balance', dataIndex: 'balance', key: 'balance' },\n    {\n      dataIndex: 'priceUsd',\n      key: 'priceUsd',\n      render: (text, record) => {\n        return parseFloat(record.balance) > 0\n          ? `$ ${parseFloat(text) * parseFloat(record.balance)}`\n          : 0;\n      },\n      title: 'Value',\n    },\n  ];\n  return (\n    <Table\n      scroll={{ x: true }}\n      columns={columns}\n      dataSource={assets}\n      rowKey='assetId'\n      loading={loading}\n      pagination={{ pageSize: 50 }}\n    />\n  );\n}\n","import { Spin } from 'antd';\nimport React from 'react';\n\nexport default function LoadingComponent() {\n  return (\n    <div style={{ width: '100%', padding: '2rem', textAlign: 'center' }}>\n      <Spin />\n    </div>\n  );\n}\n","// Load all the channels within this directory and all subdirectories.\n// Channel files must be named *_channel.js.\n\nconst channels = require.context('.', true, /_channel\\.js$/);\nchannels.keys().forEach(channels);\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 753;","var api = require(\"!../../../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../../../../../../node_modules/css-loader/dist/cjs.js!../../../../../../node_modules/less-loader/dist/cjs.js??ref--6-2!./MarkdownRendererComponent.less\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"[data-rmiz-wrap=\\\"visible\\\"],\\n[data-rmiz-wrap=\\\"hidden\\\"] {\\n  position: relative;\\n  display: inline-flex;\\n  align-items: flex-start;\\n}\\n[data-rmiz-wrap=\\\"hidden\\\"] {\\n  visibility: hidden;\\n}\\n[data-rmiz-overlay] {\\n  position: fixed;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  transition-property: background-color;\\n}\\n[data-rmiz-btn-open],\\n[data-rmiz-btn-close] {\\n  position: absolute;\\n  top: 0;\\n  right: 0;\\n  bottom: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  /* reset styles */\\n  margin: 0;\\n  padding: 0;\\n  border: none;\\n  border-radius: 0;\\n  font: inherit;\\n  color: inherit;\\n  background: none;\\n  -webkit-appearance: none;\\n  -moz-appearance: none;\\n  appearance: none;\\n}\\n[data-rmiz-btn-open] {\\n  cursor: zoom-in;\\n}\\n[data-rmiz-btn-close] {\\n  cursor: zoom-out;\\n}\\n[data-rmiz-modal-content] {\\n  position: absolute;\\n  transition-property: transform;\\n  transform-origin: center center;\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","var map = {\n\t\"./logo\": 198,\n\t\"./logo.svg\": 198\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 759;","import React, { useContext } from 'react';\n\nexport const CurrentAdminContext = React.createContext(null);\nexport function useCurrentAdmin() {\n  return useContext(CurrentAdminContext);\n}\n","import React, { useContext } from 'react';\n\nexport const PrsdiggContext = React.createContext(null);\nexport function usePrsdigg() {\n  return useContext(PrsdiggContext);\n}\n"],"sourceRoot":""}